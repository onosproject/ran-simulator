// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/types/types.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{0}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLng() float32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Route struct {
	RouteID   RouteID  `protobuf:"bytes,1,opt,name=name,proto3,casttype=RouteID" json:"name,omitempty"`
	Waypoints []*Point `protobuf:"bytes,2,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	Color     string   `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{1}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetRouteID() RouteID {
	if m != nil {
		return m.RouteID
	}
	return ""
}

func (m *Route) GetWaypoints() []*Point {
	if m != nil {
		return m.Waypoints
	}
	return nil
}

func (m *Route) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type Ue struct {
	Name             UEName     `protobuf:"bytes,1,opt,name=name,proto3,casttype=UEName" json:"name,omitempty"`
	Type             string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Position         *Point     `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Rotation         uint32     `protobuf:"varint,5,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Route            RouteID    `protobuf:"bytes,6,opt,name=route,proto3,casttype=RouteID" json:"route,omitempty"`
	ServingTower     EcID       `protobuf:"bytes,7,opt,name=serving_tower,json=servingTower,proto3,casttype=EcID" json:"serving_tower,omitempty"`
	ServingTowerDist float32    `protobuf:"fixed32,8,opt,name=serving_tower_dist,json=servingTowerDist,proto3" json:"serving_tower_dist,omitempty"`
	Tower1           EcID       `protobuf:"bytes,9,opt,name=tower1,proto3,casttype=EcID" json:"tower1,omitempty"`
	Tower1Dist       float32    `protobuf:"fixed32,10,opt,name=tower1_dist,json=tower1Dist,proto3" json:"tower1_dist,omitempty"`
	Tower2           EcID       `protobuf:"bytes,11,opt,name=tower2,proto3,casttype=EcID" json:"tower2,omitempty"`
	Tower2Dist       float32    `protobuf:"fixed32,12,opt,name=tower2_dist,json=tower2Dist,proto3" json:"tower2_dist,omitempty"`
	Tower3           EcID       `protobuf:"bytes,13,opt,name=tower3,proto3,casttype=EcID" json:"tower3,omitempty"`
	Tower3Dist       float32    `protobuf:"fixed32,14,opt,name=tower3_dist,json=tower3Dist,proto3" json:"tower3_dist,omitempty"`
	Crnti            Crnti      `protobuf:"bytes,15,opt,name=crnti,proto3,casttype=Crnti" json:"crnti,omitempty"`
	Admitted         bool       `protobuf:"varint,16,opt,name=admitted,proto3" json:"admitted,omitempty"`
	Metrics          *UeMetrics `protobuf:"bytes,17,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Imsi             uint32     `protobuf:"varint,18,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (m *Ue) Reset()         { *m = Ue{} }
func (m *Ue) String() string { return proto.CompactTextString(m) }
func (*Ue) ProtoMessage()    {}
func (*Ue) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{2}
}
func (m *Ue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ue.Merge(m, src)
}
func (m *Ue) XXX_Size() int {
	return m.Size()
}
func (m *Ue) XXX_DiscardUnknown() {
	xxx_messageInfo_Ue.DiscardUnknown(m)
}

var xxx_messageInfo_Ue proto.InternalMessageInfo

func (m *Ue) GetName() UEName {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ue) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Ue) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Ue) GetRotation() uint32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *Ue) GetRoute() RouteID {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *Ue) GetServingTower() EcID {
	if m != nil {
		return m.ServingTower
	}
	return ""
}

func (m *Ue) GetServingTowerDist() float32 {
	if m != nil {
		return m.ServingTowerDist
	}
	return 0
}

func (m *Ue) GetTower1() EcID {
	if m != nil {
		return m.Tower1
	}
	return ""
}

func (m *Ue) GetTower1Dist() float32 {
	if m != nil {
		return m.Tower1Dist
	}
	return 0
}

func (m *Ue) GetTower2() EcID {
	if m != nil {
		return m.Tower2
	}
	return ""
}

func (m *Ue) GetTower2Dist() float32 {
	if m != nil {
		return m.Tower2Dist
	}
	return 0
}

func (m *Ue) GetTower3() EcID {
	if m != nil {
		return m.Tower3
	}
	return ""
}

func (m *Ue) GetTower3Dist() float32 {
	if m != nil {
		return m.Tower3Dist
	}
	return 0
}

func (m *Ue) GetCrnti() Crnti {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *Ue) GetAdmitted() bool {
	if m != nil {
		return m.Admitted
	}
	return false
}

func (m *Ue) GetMetrics() *UeMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Ue) GetImsi() uint32 {
	if m != nil {
		return m.Imsi
	}
	return 0
}

type UeMetrics struct {
	// Latency (in nanoseconds) of the most recent hand-over
	HoLatency int64 `protobuf:"varint,1,opt,name=ho_latency,json=hoLatency,proto3" json:"ho_latency,omitempty"`
	// Handover report timestamp (in nanoseconds since epoch)
	HoReportTimestamp int64 `protobuf:"varint,2,opt,name=ho_report_timestamp,json=hoReportTimestamp,proto3" json:"ho_report_timestamp,omitempty"`
}

func (m *UeMetrics) Reset()         { *m = UeMetrics{} }
func (m *UeMetrics) String() string { return proto.CompactTextString(m) }
func (*UeMetrics) ProtoMessage()    {}
func (*UeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{3}
}
func (m *UeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeMetrics.Merge(m, src)
}
func (m *UeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *UeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_UeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_UeMetrics proto.InternalMessageInfo

func (m *UeMetrics) GetHoLatency() int64 {
	if m != nil {
		return m.HoLatency
	}
	return 0
}

func (m *UeMetrics) GetHoReportTimestamp() int64 {
	if m != nil {
		return m.HoReportTimestamp
	}
	return 0
}

type TowersParams struct {
	// Number of rows of towers
	TowerRows uint32 `protobuf:"varint,1,opt,name=towerRows,proto3" json:"towerRows,omitempty"`
	// Number of columns of towers
	TowerCols uint32 `protobuf:"varint,2,opt,name=towerCols,proto3" json:"towerCols,omitempty"`
	// Tower spacing vert in degrees latitude
	TowerSpacingVert float32 `protobuf:"fixed32,3,opt,name=towerSpacingVert,proto3" json:"towerSpacingVert,omitempty"`
	// Tower spacing horiz in degrees longitude
	TowerSpacingHoriz float32 `protobuf:"fixed32,4,opt,name=towerSpacingHoriz,proto3" json:"towerSpacingHoriz,omitempty"`
	// Ratio of random locations diameter to tower grid width
	LocationsScale float32 `protobuf:"fixed32,5,opt,name=locationsScale,proto3" json:"locationsScale,omitempty"`
	// Max num of UEs per tower
	MaxUEsPerTower uint32 `protobuf:"varint,6,opt,name=maxUEsPerTower,proto3" json:"maxUEsPerTower,omitempty"`
}

func (m *TowersParams) Reset()         { *m = TowersParams{} }
func (m *TowersParams) String() string { return proto.CompactTextString(m) }
func (*TowersParams) ProtoMessage()    {}
func (*TowersParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{4}
}
func (m *TowersParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TowersParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TowersParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TowersParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TowersParams.Merge(m, src)
}
func (m *TowersParams) XXX_Size() int {
	return m.Size()
}
func (m *TowersParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TowersParams.DiscardUnknown(m)
}

var xxx_messageInfo_TowersParams proto.InternalMessageInfo

func (m *TowersParams) GetTowerRows() uint32 {
	if m != nil {
		return m.TowerRows
	}
	return 0
}

func (m *TowersParams) GetTowerCols() uint32 {
	if m != nil {
		return m.TowerCols
	}
	return 0
}

func (m *TowersParams) GetTowerSpacingVert() float32 {
	if m != nil {
		return m.TowerSpacingVert
	}
	return 0
}

func (m *TowersParams) GetTowerSpacingHoriz() float32 {
	if m != nil {
		return m.TowerSpacingHoriz
	}
	return 0
}

func (m *TowersParams) GetLocationsScale() float32 {
	if m != nil {
		return m.LocationsScale
	}
	return 0
}

func (m *TowersParams) GetMaxUEsPerTower() uint32 {
	if m != nil {
		return m.MaxUEsPerTower
	}
	return 0
}

type Tower struct {
	EcID      EcID   `protobuf:"bytes,1,opt,name=ecID,proto3,casttype=EcID" json:"ecID,omitempty"`
	PlmnID    PlmnID `protobuf:"bytes,2,opt,name=plmnID,proto3,casttype=PlmnID" json:"plmnID,omitempty"`
	Location  *Point `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Color     string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	MaxUEs    uint32 `protobuf:"varint,5,opt,name=maxUEs,proto3" json:"maxUEs,omitempty"`
	Neighbors []EcID `protobuf:"bytes,6,rep,name=neighbors,proto3,casttype=EcID" json:"neighbors,omitempty"`
	// The tower transmit power in decibels
	TxPowerdB float32 `protobuf:"fixed32,7,opt,name=txPowerdB,proto3" json:"txPowerdB,omitempty"`
	// crntis maps a ue's name to its crnti
	CrntiMap   map[Crnti]UEName `protobuf:"bytes,9,rep,name=crntiMap,proto3,castkey=Crnti,castvalue=UEName" json:"crntiMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CrntiIndex uint32           `protobuf:"varint,10,opt,name=crntiIndex,proto3" json:"crntiIndex,omitempty"`
	Port       uint32           `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Tower) Reset()         { *m = Tower{} }
func (m *Tower) String() string { return proto.CompactTextString(m) }
func (*Tower) ProtoMessage()    {}
func (*Tower) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{5}
}
func (m *Tower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tower.Merge(m, src)
}
func (m *Tower) XXX_Size() int {
	return m.Size()
}
func (m *Tower) XXX_DiscardUnknown() {
	xxx_messageInfo_Tower.DiscardUnknown(m)
}

var xxx_messageInfo_Tower proto.InternalMessageInfo

func (m *Tower) GetEcID() EcID {
	if m != nil {
		return m.EcID
	}
	return ""
}

func (m *Tower) GetPlmnID() PlmnID {
	if m != nil {
		return m.PlmnID
	}
	return ""
}

func (m *Tower) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Tower) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Tower) GetMaxUEs() uint32 {
	if m != nil {
		return m.MaxUEs
	}
	return 0
}

func (m *Tower) GetNeighbors() []EcID {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *Tower) GetTxPowerdB() float32 {
	if m != nil {
		return m.TxPowerdB
	}
	return 0
}

func (m *Tower) GetCrntiMap() map[Crnti]UEName {
	if m != nil {
		return m.CrntiMap
	}
	return nil
}

func (m *Tower) GetCrntiIndex() uint32 {
	if m != nil {
		return m.CrntiIndex
	}
	return 0
}

func (m *Tower) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MapLayout struct {
	// Map center latitude and longitude
	Center *Point `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	// The starting Zoom level
	Zoom float32 `protobuf:"fixed32,2,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Show map as faded on start
	Fade bool `protobuf:"varint,3,opt,name=fade,proto3" json:"fade,omitempty"`
	// Show routes on start
	ShowRoutes bool `protobuf:"varint,4,opt,name=showRoutes,proto3" json:"showRoutes,omitempty"`
	// Show power as circle on start
	ShowPower bool `protobuf:"varint,5,opt,name=showPower,proto3" json:"showPower,omitempty"`
	// Max number of UEs for complete simulation
	MinUes uint32 `protobuf:"varint,6,opt,name=min_ues,json=minUes,proto3" json:"min_ues,omitempty"`
	// Max number of UEs for complete simulation
	MaxUes uint32 `protobuf:"varint,7,opt,name=max_ues,json=maxUes,proto3" json:"max_ues,omitempty"`
	// the current number of routes
	CurrentRoutes uint32 `protobuf:"varint,8,opt,name=current_routes,json=currentRoutes,proto3" json:"current_routes,omitempty"`
}

func (m *MapLayout) Reset()         { *m = MapLayout{} }
func (m *MapLayout) String() string { return proto.CompactTextString(m) }
func (*MapLayout) ProtoMessage()    {}
func (*MapLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_386b2e9db948721e, []int{6}
}
func (m *MapLayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapLayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLayout.Merge(m, src)
}
func (m *MapLayout) XXX_Size() int {
	return m.Size()
}
func (m *MapLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLayout.DiscardUnknown(m)
}

var xxx_messageInfo_MapLayout proto.InternalMessageInfo

func (m *MapLayout) GetCenter() *Point {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *MapLayout) GetZoom() float32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

func (m *MapLayout) GetFade() bool {
	if m != nil {
		return m.Fade
	}
	return false
}

func (m *MapLayout) GetShowRoutes() bool {
	if m != nil {
		return m.ShowRoutes
	}
	return false
}

func (m *MapLayout) GetShowPower() bool {
	if m != nil {
		return m.ShowPower
	}
	return false
}

func (m *MapLayout) GetMinUes() uint32 {
	if m != nil {
		return m.MinUes
	}
	return 0
}

func (m *MapLayout) GetMaxUes() uint32 {
	if m != nil {
		return m.MaxUes
	}
	return 0
}

func (m *MapLayout) GetCurrentRoutes() uint32 {
	if m != nil {
		return m.CurrentRoutes
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "ran.trafficsim.types.Point")
	proto.RegisterType((*Route)(nil), "ran.trafficsim.types.Route")
	proto.RegisterType((*Ue)(nil), "ran.trafficsim.types.Ue")
	proto.RegisterType((*UeMetrics)(nil), "ran.trafficsim.types.UeMetrics")
	proto.RegisterType((*TowersParams)(nil), "ran.trafficsim.types.TowersParams")
	proto.RegisterType((*Tower)(nil), "ran.trafficsim.types.Tower")
	proto.RegisterMapType((map[Crnti]UEName)(nil), "ran.trafficsim.types.Tower.CrntiMapEntry")
	proto.RegisterType((*MapLayout)(nil), "ran.trafficsim.types.MapLayout")
}

func init() { proto.RegisterFile("api/types/types.proto", fileDescriptor_386b2e9db948721e) }

var fileDescriptor_386b2e9db948721e = []byte{
	// 962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xfa, 0xc7, 0x66, 0xf7, 0x25, 0x0e, 0xc9, 0x34, 0x94, 0x55, 0x00, 0xdb, 0x58, 0x10,
	0x85, 0x12, 0x5c, 0x11, 0x1f, 0xa0, 0x70, 0xcb, 0x0f, 0x89, 0x48, 0x0d, 0x8a, 0xa6, 0x35, 0x87,
	0x5e, 0xac, 0xe9, 0x7a, 0x62, 0x8f, 0xf0, 0xee, 0xac, 0x66, 0xc6, 0x4d, 0xdc, 0x23, 0xe2, 0xc4,
	0x89, 0x3f, 0x8b, 0x63, 0x2f, 0x48, 0x9c, 0x5c, 0xe4, 0xfc, 0x09, 0x70, 0xf2, 0x85, 0x6a, 0xde,
	0xae, 0xd7, 0x76, 0x6a, 0x29, 0x17, 0xeb, 0xcd, 0xf7, 0x7d, 0xfe, 0xe6, 0xcd, 0xbc, 0xf7, 0x66,
	0xe1, 0x43, 0x96, 0x88, 0xc7, 0x66, 0x94, 0x70, 0x9d, 0xfe, 0x36, 0x13, 0x25, 0x8d, 0x24, 0xbb,
	0x8a, 0xc5, 0x4d, 0xa3, 0xd8, 0xd5, 0x95, 0x08, 0xb5, 0x88, 0x9a, 0xc8, 0xed, 0xed, 0xf6, 0x64,
	0x4f, 0xa2, 0xe0, 0xb1, 0x8d, 0x52, 0x6d, 0xe3, 0x2b, 0x28, 0x5f, 0x4a, 0x11, 0x1b, 0xb2, 0x0d,
	0xc5, 0x01, 0x33, 0x81, 0x53, 0x77, 0x0e, 0x0a, 0xd4, 0x86, 0x88, 0xc4, 0xbd, 0xa0, 0x90, 0x21,
	0x71, 0xaf, 0xf1, 0x9b, 0x03, 0x65, 0x2a, 0x87, 0x86, 0x93, 0x47, 0x50, 0x8a, 0x59, 0xc4, 0x51,
	0xee, 0x1f, 0x3f, 0x9c, 0x8c, 0x6b, 0xeb, 0x48, 0x9c, 0x9f, 0x4e, 0xe7, 0x21, 0x45, 0x0d, 0x79,
	0x02, 0xfe, 0x35, 0x1b, 0x25, 0x76, 0x17, 0x1d, 0x14, 0xea, 0xc5, 0x83, 0x8d, 0xa3, 0x8f, 0x9b,
	0xab, 0x52, 0x6c, 0x62, 0x26, 0x74, 0xae, 0x26, 0xbb, 0x50, 0x0e, 0xe5, 0x40, 0xaa, 0xa0, 0x68,
	0xf7, 0xa1, 0xe9, 0xa2, 0xf1, 0x6f, 0x09, 0x0a, 0x6d, 0x4e, 0xf6, 0x97, 0x72, 0x20, 0x93, 0x71,
	0xad, 0xf4, 0x13, 0x8b, 0xf8, 0x74, 0x5c, 0x73, 0xdb, 0x67, 0x36, 0xca, 0xf6, 0x27, 0x50, 0xb2,
	0xf6, 0x78, 0x10, 0x9f, 0x62, 0x4c, 0xbe, 0x05, 0x2f, 0x91, 0x5a, 0x18, 0x21, 0xe3, 0xa0, 0x54,
	0x77, 0xee, 0x4b, 0x29, 0x17, 0x93, 0x3d, 0xf0, 0x94, 0x34, 0x0c, 0xff, 0x58, 0xae, 0x3b, 0x07,
	0x15, 0x9a, 0xaf, 0xc9, 0x67, 0x50, 0x56, 0xf6, 0xe4, 0x81, 0x8b, 0x19, 0x6d, 0x2c, 0x5e, 0x45,
	0xca, 0x90, 0xaf, 0xa1, 0xa2, 0xb9, 0x7a, 0x25, 0xe2, 0x5e, 0xc7, 0xc8, 0x6b, 0xae, 0x82, 0x75,
	0x94, 0x7a, 0xd3, 0x71, 0xad, 0x74, 0x16, 0x9e, 0x9f, 0xd2, 0xcd, 0x8c, 0x7e, 0x6e, 0x59, 0x72,
	0x08, 0x64, 0x49, 0xde, 0xe9, 0x0a, 0x6d, 0x02, 0x0f, 0x2b, 0xb2, 0xbd, 0xa8, 0x3c, 0x15, 0xda,
	0x90, 0x3a, 0xb8, 0xa8, 0xfa, 0x26, 0xf0, 0xef, 0xb8, 0x66, 0x38, 0xa9, 0xc1, 0x46, 0x1a, 0xa5,
	0x46, 0x80, 0x46, 0x90, 0x42, 0x4b, 0x16, 0x47, 0xc1, 0xc6, 0x4a, 0x8b, 0xa3, 0xdc, 0xe2, 0x28,
	0xb5, 0xd8, 0x5c, 0xb0, 0x38, 0x5a, 0xb2, 0x68, 0x05, 0x95, 0x95, 0x16, 0xad, 0xdc, 0xa2, 0x95,
	0x5a, 0x6c, 0x2d, 0x58, 0xb4, 0xd0, 0xe2, 0x00, 0xca, 0xa1, 0x8a, 0x8d, 0x08, 0x3e, 0xc8, 0x4b,
	0x5b, 0x3e, 0xb1, 0xc0, 0x74, 0x16, 0xd0, 0x54, 0x60, 0xcb, 0xc1, 0xba, 0x91, 0x30, 0x86, 0x77,
	0x83, 0xed, 0xba, 0x73, 0xe0, 0xd1, 0x7c, 0x4d, 0x9e, 0xc0, 0x7a, 0xc4, 0x8d, 0x12, 0xa1, 0x0e,
	0x76, 0xb0, 0xc4, 0xb5, 0xd5, 0x25, 0x6e, 0xf3, 0x8b, 0x54, 0x46, 0x67, 0x7a, 0xdb, 0x32, 0x22,
	0xd2, 0x22, 0x20, 0x58, 0x61, 0x8c, 0x1b, 0x2f, 0xc0, 0xcf, 0x95, 0xe4, 0x53, 0x80, 0xbe, 0xec,
	0x0c, 0x98, 0xe1, 0x71, 0x38, 0xc2, 0x0e, 0x2c, 0x52, 0xbf, 0x2f, 0x9f, 0xa6, 0x00, 0x69, 0xc2,
	0x83, 0xbe, 0xec, 0x28, 0x9e, 0x48, 0x65, 0x3a, 0x46, 0x44, 0x5c, 0x1b, 0x16, 0x25, 0xd8, 0x81,
	0x45, 0xba, 0xd3, 0x97, 0x14, 0x99, 0xe7, 0x33, 0xa2, 0xf1, 0x9f, 0x03, 0x9b, 0x58, 0x47, 0x7d,
	0xc9, 0x14, 0x8b, 0x34, 0xf9, 0x04, 0x7c, 0xbc, 0x0f, 0x2a, 0xaf, 0x35, 0xda, 0x57, 0xe8, 0x1c,
	0xc8, 0xd9, 0x13, 0x39, 0xd0, 0x68, 0x3a, 0x63, 0x2d, 0x40, 0x1e, 0xc1, 0x36, 0x2e, 0x9e, 0x25,
	0x2c, 0x14, 0x71, 0xef, 0x67, 0xae, 0x0c, 0xce, 0x4f, 0x81, 0xbe, 0x87, 0x93, 0x43, 0xd8, 0x59,
	0xc4, 0x7e, 0x94, 0x4a, 0xbc, 0xc6, 0x81, 0x28, 0xd0, 0xf7, 0x09, 0xb2, 0x0f, 0x5b, 0x03, 0x19,
	0x62, 0xb3, 0xeb, 0x67, 0x21, 0x1b, 0x70, 0x1c, 0x81, 0x02, 0xbd, 0x83, 0x5a, 0x5d, 0xc4, 0x6e,
	0xda, 0x67, 0xfa, 0x92, 0x2b, 0x3c, 0x16, 0x4e, 0x44, 0x85, 0xde, 0x41, 0x1b, 0x7f, 0x15, 0xa1,
	0x9c, 0x36, 0xfa, 0xe7, 0x50, 0xe2, 0xe1, 0xf9, 0x69, 0x36, 0xcb, 0xdb, 0x93, 0xac, 0x65, 0xf2,
	0xd6, 0x41, 0x96, 0x1c, 0x82, 0x9b, 0x0c, 0xa2, 0xf8, 0xfc, 0x34, 0x9d, 0xe5, 0xe3, 0xdd, 0xc9,
	0xb8, 0xe6, 0x5e, 0x22, 0x32, 0xcd, 0x23, 0x9a, 0x69, 0xec, 0x8c, 0xcf, 0xf2, 0xc2, 0xf3, 0xdf,
	0x37, 0xe3, 0x33, 0xf1, 0xfc, 0xd5, 0x29, 0x2d, 0xbc, 0x3a, 0xe4, 0x21, 0xb8, 0x69, 0xfa, 0xd9,
	0xdc, 0x67, 0x2b, 0xb2, 0x0f, 0x7e, 0xcc, 0x45, 0xaf, 0xff, 0x52, 0x2a, 0x1d, 0xb8, 0xf5, 0xe2,
	0x52, 0xcb, 0xcf, 0x29, 0x2c, 0xda, 0xcd, 0xa5, 0x3d, 0x6d, 0xf7, 0x18, 0xc7, 0xbe, 0x40, 0xe7,
	0x00, 0x79, 0x01, 0x1e, 0x76, 0xf4, 0x05, 0x4b, 0x02, 0x1f, 0xdf, 0xc8, 0x2f, 0x57, 0x27, 0x8b,
	0xf7, 0xd5, 0x3c, 0xc9, 0xb4, 0x67, 0xb1, 0x51, 0xa3, 0xe3, 0x07, 0xbf, 0xbe, 0xcd, 0xe6, 0xe2,
	0xf7, 0xb7, 0xf9, 0xe3, 0x97, 0xfb, 0x91, 0x2a, 0x00, 0xc6, 0xe7, 0x71, 0x97, 0xdf, 0xe0, 0xd0,
	0x57, 0xe8, 0x02, 0x62, 0xbb, 0xdd, 0xb6, 0x23, 0x8e, 0x7c, 0x85, 0x62, 0xbc, 0xf7, 0x03, 0x54,
	0x96, 0xf6, 0xb0, 0x5f, 0x83, 0x5f, 0x78, 0xda, 0xea, 0x3e, 0xb5, 0xa1, 0xbd, 0xa6, 0x57, 0x6c,
	0x30, 0x9c, 0x3d, 0xac, 0xe9, 0xe2, 0xfb, 0xc2, 0x77, 0x4e, 0xe3, 0x7f, 0x07, 0xfc, 0x0b, 0x96,
	0x3c, 0x65, 0x23, 0x39, 0x34, 0xa4, 0x05, 0x6e, 0xc8, 0x63, 0xc3, 0x15, 0xfe, 0xf9, 0x9e, 0x2a,
	0x64, 0x52, 0x9b, 0xd3, 0x6b, 0x29, 0xa3, 0xec, 0xeb, 0x83, 0xb1, 0xc5, 0xae, 0x58, 0x97, 0x63,
	0x31, 0x3d, 0x8a, 0xb1, 0x3d, 0x9b, 0xee, 0xcb, 0x6b, 0x7c, 0x66, 0x35, 0x16, 0xcc, 0xa3, 0x0b,
	0x88, 0xbd, 0x75, 0xbb, 0xc2, 0x6b, 0xc6, 0xc2, 0x79, 0x74, 0x0e, 0x90, 0x8f, 0x60, 0x3d, 0x12,
	0x71, 0x67, 0xc8, 0x75, 0xd6, 0xa1, 0x6e, 0x24, 0xe2, 0x36, 0xd7, 0x48, 0xb0, 0x1b, 0x24, 0xd6,
	0xe7, 0xd5, 0xe6, 0x9a, 0x7c, 0x01, 0x5b, 0xe1, 0x50, 0x29, 0x1e, 0x9b, 0x8e, 0x4a, 0xf7, 0xf4,
	0x90, 0xaf, 0x64, 0x68, 0xba, 0xed, 0x71, 0xf0, 0xe7, 0xa4, 0xea, 0xbc, 0x99, 0x54, 0x9d, 0x7f,
	0x26, 0x55, 0xe7, 0x8f, 0xdb, 0xea, 0xda, 0x9b, 0xdb, 0xea, 0xda, 0xdf, 0xb7, 0xd5, 0xb5, 0x97,
	0x2e, 0x7e, 0x77, 0x5b, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x46, 0x93, 0x08, 0xbc, 0x07,
	0x00, 0x00,
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lng != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lng))))
		i--
		dAtA[i] = 0x15
	}
	if m.Lat != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Waypoints) > 0 {
		for iNdEx := len(m.Waypoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Waypoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RouteID) > 0 {
		i -= len(m.RouteID)
		copy(dAtA[i:], m.RouteID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RouteID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Imsi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Imsi))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Admitted {
		i--
		if m.Admitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Tower3Dist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tower3Dist))))
		i--
		dAtA[i] = 0x75
	}
	if len(m.Tower3) > 0 {
		i -= len(m.Tower3)
		copy(dAtA[i:], m.Tower3)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tower3)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Tower2Dist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tower2Dist))))
		i--
		dAtA[i] = 0x65
	}
	if len(m.Tower2) > 0 {
		i -= len(m.Tower2)
		copy(dAtA[i:], m.Tower2)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tower2)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Tower1Dist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tower1Dist))))
		i--
		dAtA[i] = 0x55
	}
	if len(m.Tower1) > 0 {
		i -= len(m.Tower1)
		copy(dAtA[i:], m.Tower1)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tower1)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ServingTowerDist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ServingTowerDist))))
		i--
		dAtA[i] = 0x45
	}
	if len(m.ServingTower) > 0 {
		i -= len(m.ServingTower)
		copy(dAtA[i:], m.ServingTower)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServingTower)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Route) > 0 {
		i -= len(m.Route)
		copy(dAtA[i:], m.Route)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Route)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rotation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Rotation))
		i--
		dAtA[i] = 0x28
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoReportTimestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoReportTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.HoLatency != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoLatency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TowersParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowersParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TowersParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxUEsPerTower != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUEsPerTower))
		i--
		dAtA[i] = 0x30
	}
	if m.LocationsScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LocationsScale))))
		i--
		dAtA[i] = 0x2d
	}
	if m.TowerSpacingHoriz != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TowerSpacingHoriz))))
		i--
		dAtA[i] = 0x25
	}
	if m.TowerSpacingVert != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TowerSpacingVert))))
		i--
		dAtA[i] = 0x1d
	}
	if m.TowerCols != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TowerCols))
		i--
		dAtA[i] = 0x10
	}
	if m.TowerRows != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TowerRows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x58
	}
	if m.CrntiIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CrntiIndex))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CrntiMap) > 0 {
		for k := range m.CrntiMap {
			v := m.CrntiMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TxPowerdB != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TxPowerdB))))
		i--
		dAtA[i] = 0x3d
	}
	if len(m.Neighbors) > 0 {
		for iNdEx := len(m.Neighbors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Neighbors[iNdEx])
			copy(dAtA[i:], m.Neighbors[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Neighbors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MaxUEs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUEs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x22
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlmnID) > 0 {
		i -= len(m.PlmnID)
		copy(dAtA[i:], m.PlmnID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PlmnID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EcID) > 0 {
		i -= len(m.EcID)
		copy(dAtA[i:], m.EcID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EcID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapLayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapLayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapLayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentRoutes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentRoutes))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUes))
		i--
		dAtA[i] = 0x38
	}
	if m.MinUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinUes))
		i--
		dAtA[i] = 0x30
	}
	if m.ShowPower {
		i--
		if m.ShowPower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ShowRoutes {
		i--
		if m.ShowRoutes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Fade {
		i--
		if m.Fade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Zoom != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Zoom))))
		i--
		dAtA[i] = 0x15
	}
	if m.Center != nil {
		{
			size, err := m.Center.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 5
	}
	if m.Lng != 0 {
		n += 5
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Waypoints) > 0 {
		for _, e := range m.Waypoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Ue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Rotation != 0 {
		n += 1 + sovTypes(uint64(m.Rotation))
	}
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ServingTower)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServingTowerDist != 0 {
		n += 5
	}
	l = len(m.Tower1)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower1Dist != 0 {
		n += 5
	}
	l = len(m.Tower2)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower2Dist != 0 {
		n += 5
	}
	l = len(m.Tower3)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower3Dist != 0 {
		n += 5
	}
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Admitted {
		n += 3
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Imsi != 0 {
		n += 2 + sovTypes(uint64(m.Imsi))
	}
	return n
}

func (m *UeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoLatency != 0 {
		n += 1 + sovTypes(uint64(m.HoLatency))
	}
	if m.HoReportTimestamp != 0 {
		n += 1 + sovTypes(uint64(m.HoReportTimestamp))
	}
	return n
}

func (m *TowersParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TowerRows != 0 {
		n += 1 + sovTypes(uint64(m.TowerRows))
	}
	if m.TowerCols != 0 {
		n += 1 + sovTypes(uint64(m.TowerCols))
	}
	if m.TowerSpacingVert != 0 {
		n += 5
	}
	if m.TowerSpacingHoriz != 0 {
		n += 5
	}
	if m.LocationsScale != 0 {
		n += 5
	}
	if m.MaxUEsPerTower != 0 {
		n += 1 + sovTypes(uint64(m.MaxUEsPerTower))
	}
	return n
}

func (m *Tower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EcID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PlmnID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxUEs != 0 {
		n += 1 + sovTypes(uint64(m.MaxUEs))
	}
	if len(m.Neighbors) > 0 {
		for _, s := range m.Neighbors {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TxPowerdB != 0 {
		n += 5
	}
	if len(m.CrntiMap) > 0 {
		for k, v := range m.CrntiMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.CrntiIndex != 0 {
		n += 1 + sovTypes(uint64(m.CrntiIndex))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *MapLayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Zoom != 0 {
		n += 5
	}
	if m.Fade {
		n += 2
	}
	if m.ShowRoutes {
		n += 2
	}
	if m.ShowPower {
		n += 2
	}
	if m.MinUes != 0 {
		n += 1 + sovTypes(uint64(m.MinUes))
	}
	if m.MaxUes != 0 {
		n += 1 + sovTypes(uint64(m.MaxUes))
	}
	if m.CurrentRoutes != 0 {
		n += 1 + sovTypes(uint64(m.CurrentRoutes))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lng = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteID = RouteID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waypoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waypoints = append(m.Waypoints, &Point{})
			if err := m.Waypoints[len(m.Waypoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = UEName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Point{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			m.Rotation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = RouteID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingTower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServingTower = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingTowerDist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ServingTowerDist = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tower1 = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower1Dist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tower1Dist = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tower2 = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower2Dist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tower2Dist = float32(math.Float32frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tower3 = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower3Dist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tower3Dist = float32(math.Float32frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = Crnti(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admitted = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &UeMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			m.Imsi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Imsi |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoLatency", wireType)
			}
			m.HoLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoLatency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoReportTimestamp", wireType)
			}
			m.HoReportTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoReportTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowersParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowersParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowersParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerRows", wireType)
			}
			m.TowerRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TowerRows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerCols", wireType)
			}
			m.TowerCols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TowerCols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerSpacingVert", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TowerSpacingVert = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerSpacingHoriz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TowerSpacingHoriz = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationsScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LocationsScale = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUEsPerTower", wireType)
			}
			m.MaxUEsPerTower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUEsPerTower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcID = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlmnID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlmnID = PlmnID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Point{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUEs", wireType)
			}
			m.MaxUEs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUEs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbors = append(m.Neighbors, EcID(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerdB", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TxPowerdB = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrntiMap == nil {
				m.CrntiMap = make(map[Crnti]UEName)
			}
			var mapkey Crnti
			var mapvalue UEName
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = Crnti(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = UEName(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CrntiMap[Crnti(mapkey)] = ((UEName)(mapvalue))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiIndex", wireType)
			}
			m.CrntiIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrntiIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapLayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Point{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Zoom = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fade = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRoutes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRoutes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPower = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUes", wireType)
			}
			m.MinUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUes", wireType)
			}
			m.MaxUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoutes", wireType)
			}
			m.CurrentRoutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRoutes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
