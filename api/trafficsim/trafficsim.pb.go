// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/trafficsim/trafficsim.proto

package trafficsim

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/onosproject/ran-simulator/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Change event type
type Type int32

const (
	// NONE indicates this response does not represent a modification of the Change
	Type_NONE Type = 0
	// ADDED is an event which occurs when a Change is added to the topology
	Type_ADDED Type = 1
	// UPDATED is an event which occurs when a Change is updated
	Type_UPDATED Type = 2
	// REMOVED is an event which occurs when a Change is removed from the configuration
	Type_REMOVED Type = 3
)

var Type_name = map[int32]string{
	0: "NONE",
	1: "ADDED",
	2: "UPDATED",
	3: "REMOVED",
}

var Type_value = map[string]int32{
	"NONE":    0,
	"ADDED":   1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{0}
}

// In the case of an update this helps qualify the update type - add items as necessary
type UpdateType int32

const (
	UpdateType_NOUPDATETYPE UpdateType = 0
	// POSITION An update in position of UE only, without a change in the Tower affinity
	UpdateType_POSITION UpdateType = 1
	// TOWER An update in non-serving tower affinity (and also position) of UE
	UpdateType_TOWER UpdateType = 2
	// HANDOVER An update of the serving tower
	UpdateType_HANDOVER UpdateType = 3
)

var UpdateType_name = map[int32]string{
	0: "NOUPDATETYPE",
	1: "POSITION",
	2: "TOWER",
	3: "HANDOVER",
}

var UpdateType_value = map[string]int32{
	"NOUPDATETYPE": 0,
	"POSITION":     1,
	"TOWER":        2,
	"HANDOVER":     3,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{1}
}

type MapLayoutRequest struct {
}

func (m *MapLayoutRequest) Reset()         { *m = MapLayoutRequest{} }
func (m *MapLayoutRequest) String() string { return proto.CompactTextString(m) }
func (*MapLayoutRequest) ProtoMessage()    {}
func (*MapLayoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{0}
}
func (m *MapLayoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapLayoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapLayoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapLayoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLayoutRequest.Merge(m, src)
}
func (m *MapLayoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapLayoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLayoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapLayoutRequest proto.InternalMessageInfo

type ListTowersRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all towers have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay bool `protobuf:"varint,2,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
}

func (m *ListTowersRequest) Reset()         { *m = ListTowersRequest{} }
func (m *ListTowersRequest) String() string { return proto.CompactTextString(m) }
func (*ListTowersRequest) ProtoMessage()    {}
func (*ListTowersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{1}
}
func (m *ListTowersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTowersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTowersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTowersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTowersRequest.Merge(m, src)
}
func (m *ListTowersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTowersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTowersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTowersRequest proto.InternalMessageInfo

func (m *ListTowersRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListTowersRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

type ListTowersResponse struct {
	// tower is the tower change on which the event occurred
	Tower *types.Tower `protobuf:"bytes,1,opt,name=tower,proto3" json:"tower,omitempty"`
	// type is a qualification of the type of change being made
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=ran.trafficsim.Type" json:"type,omitempty"`
}

func (m *ListTowersResponse) Reset()         { *m = ListTowersResponse{} }
func (m *ListTowersResponse) String() string { return proto.CompactTextString(m) }
func (*ListTowersResponse) ProtoMessage()    {}
func (*ListTowersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{2}
}
func (m *ListTowersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTowersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTowersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTowersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTowersResponse.Merge(m, src)
}
func (m *ListTowersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTowersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTowersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTowersResponse proto.InternalMessageInfo

func (m *ListTowersResponse) GetTower() *types.Tower {
	if m != nil {
		return m.Tower
	}
	return nil
}

func (m *ListTowersResponse) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NONE
}

type ListRoutesRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all routes have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay bool `protobuf:"varint,2,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
}

func (m *ListRoutesRequest) Reset()         { *m = ListRoutesRequest{} }
func (m *ListRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRoutesRequest) ProtoMessage()    {}
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{3}
}
func (m *ListRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesRequest.Merge(m, src)
}
func (m *ListRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesRequest proto.InternalMessageInfo

func (m *ListRoutesRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListRoutesRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

type ListRoutesResponse struct {
	// route is the route change on which the event occurred
	Route *types.Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// type is a qualification of the type of change being made
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=ran.trafficsim.Type" json:"type,omitempty"`
}

func (m *ListRoutesResponse) Reset()         { *m = ListRoutesResponse{} }
func (m *ListRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRoutesResponse) ProtoMessage()    {}
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{4}
}
func (m *ListRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesResponse.Merge(m, src)
}
func (m *ListRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesResponse proto.InternalMessageInfo

func (m *ListRoutesResponse) GetRoute() *types.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *ListRoutesResponse) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NONE
}

type ListUesRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all routes have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay bool `protobuf:"varint,2,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
}

func (m *ListUesRequest) Reset()         { *m = ListUesRequest{} }
func (m *ListUesRequest) String() string { return proto.CompactTextString(m) }
func (*ListUesRequest) ProtoMessage()    {}
func (*ListUesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{5}
}
func (m *ListUesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUesRequest.Merge(m, src)
}
func (m *ListUesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListUesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUesRequest proto.InternalMessageInfo

func (m *ListUesRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListUesRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

type ListUesResponse struct {
	// Ue is the UserEquipment change on which the event occurred
	Ue *types.Ue `protobuf:"bytes,1,opt,name=ue,proto3" json:"ue,omitempty"`
	// type is a qualification of the type of change being made
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=ran.trafficsim.Type" json:"type,omitempty"`
	// update_type is a qualification of the type of UE change
	UpdateType UpdateType `protobuf:"varint,3,opt,name=update_type,json=updateType,proto3,enum=ran.trafficsim.UpdateType" json:"update_type,omitempty"`
}

func (m *ListUesResponse) Reset()         { *m = ListUesResponse{} }
func (m *ListUesResponse) String() string { return proto.CompactTextString(m) }
func (*ListUesResponse) ProtoMessage()    {}
func (*ListUesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47869854f8356ea4, []int{6}
}
func (m *ListUesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUesResponse.Merge(m, src)
}
func (m *ListUesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListUesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUesResponse proto.InternalMessageInfo

func (m *ListUesResponse) GetUe() *types.Ue {
	if m != nil {
		return m.Ue
	}
	return nil
}

func (m *ListUesResponse) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NONE
}

func (m *ListUesResponse) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_NOUPDATETYPE
}

func init() {
	proto.RegisterEnum("ran.trafficsim.Type", Type_name, Type_value)
	proto.RegisterEnum("ran.trafficsim.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterType((*MapLayoutRequest)(nil), "ran.trafficsim.MapLayoutRequest")
	proto.RegisterType((*ListTowersRequest)(nil), "ran.trafficsim.ListTowersRequest")
	proto.RegisterType((*ListTowersResponse)(nil), "ran.trafficsim.ListTowersResponse")
	proto.RegisterType((*ListRoutesRequest)(nil), "ran.trafficsim.ListRoutesRequest")
	proto.RegisterType((*ListRoutesResponse)(nil), "ran.trafficsim.ListRoutesResponse")
	proto.RegisterType((*ListUesRequest)(nil), "ran.trafficsim.ListUesRequest")
	proto.RegisterType((*ListUesResponse)(nil), "ran.trafficsim.ListUesResponse")
}

func init() { proto.RegisterFile("api/trafficsim/trafficsim.proto", fileDescriptor_47869854f8356ea4) }

var fileDescriptor_47869854f8356ea4 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x8e, 0xd2, 0x40,
	0x18, 0xc7, 0x99, 0xc2, 0x0a, 0xfb, 0x81, 0x58, 0x27, 0x1e, 0x08, 0x9a, 0xee, 0x4a, 0x3c, 0x90,
	0x4d, 0x04, 0xc4, 0x78, 0xd1, 0x13, 0xa6, 0x8d, 0x6e, 0xc2, 0xb6, 0x38, 0xb6, 0xbb, 0xf1, 0x64,
	0x0a, 0xce, 0xba, 0x35, 0x0b, 0xd3, 0xed, 0xcc, 0x64, 0xc3, 0x5b, 0xf8, 0x0c, 0x3e, 0x8d, 0xc7,
	0x3d, 0xee, 0xd1, 0xc0, 0x8b, 0x98, 0x4e, 0x81, 0x2e, 0xdd, 0x66, 0x93, 0x4d, 0xf4, 0x02, 0xd3,
	0xaf, 0xff, 0xff, 0x6f, 0xe6, 0xdf, 0x7e, 0x5f, 0x61, 0xcf, 0x0f, 0x83, 0xae, 0x88, 0xfc, 0xd3,
	0xd3, 0x60, 0xc2, 0x83, 0xe9, 0x8d, 0x65, 0x27, 0x8c, 0x98, 0x60, 0xb8, 0x1e, 0xf9, 0xb3, 0x4e,
	0x5a, 0x6d, 0xbe, 0xfd, 0x1e, 0x88, 0x33, 0x39, 0xee, 0x4c, 0xd8, 0xb4, 0xcb, 0x66, 0x8c, 0x87,
	0x11, 0xfb, 0x41, 0x27, 0xa2, 0x1b, 0xf9, 0xb3, 0x97, 0x3c, 0x98, 0xca, 0x73, 0x5f, 0xb0, 0xa8,
	0xab, 0xa8, 0xf3, 0x90, 0xf2, 0xe4, 0x37, 0x61, 0xb5, 0x30, 0xe8, 0x47, 0x7e, 0x38, 0xf4, 0xe7,
	0x4c, 0x0a, 0x42, 0x2f, 0x24, 0xe5, 0xa2, 0x75, 0x02, 0x8f, 0x87, 0x01, 0x17, 0x2e, 0xbb, 0xa4,
	0x11, 0x5f, 0x15, 0xf1, 0x33, 0xd8, 0xe5, 0x72, 0xcc, 0x27, 0x51, 0x30, 0xa6, 0x0d, 0xb4, 0x8f,
	0xda, 0x15, 0x92, 0x16, 0xf0, 0x0b, 0x78, 0x78, 0x19, 0x88, 0x33, 0x05, 0x09, 0xcf, 0xfd, 0x79,
	0x43, 0x53, 0x8a, 0xed, 0x62, 0xeb, 0x02, 0xf0, 0x4d, 0x30, 0x0f, 0xd9, 0x8c, 0x53, 0xfc, 0x0a,
	0x76, 0x44, 0x5c, 0x51, 0xd4, 0x6a, 0xff, 0x69, 0x67, 0x3b, 0x5e, 0x27, 0x39, 0xae, 0x32, 0x91,
	0x44, 0x89, 0xdb, 0x50, 0x8a, 0xab, 0x6a, 0x97, 0x7a, 0xff, 0x49, 0xd6, 0xe1, 0xce, 0x43, 0x4a,
	0x94, 0x62, 0x9d, 0x85, 0x30, 0x29, 0xe8, 0xff, 0xc8, 0xb2, 0x06, 0xa7, 0x59, 0xa2, 0xb8, 0x72,
	0x77, 0x16, 0x65, 0x22, 0x89, 0xf2, 0x1e, 0x59, 0x5c, 0xa8, 0xc7, 0x5b, 0x7a, 0xff, 0x36, 0xc8,
	0x2f, 0x04, 0x8f, 0x36, 0xd8, 0x55, 0x8c, 0x36, 0x68, 0x72, 0x9d, 0xa1, 0x91, 0x9f, 0xc1, 0xa3,
	0x44, 0x93, 0xf7, 0x38, 0x3d, 0x7e, 0x07, 0x55, 0x19, 0x7e, 0xf3, 0x05, 0xfd, 0xaa, 0x0c, 0x45,
	0x65, 0x68, 0x66, 0x0d, 0x9e, 0x92, 0x28, 0x1b, 0xc8, 0xcd, 0xfa, 0xe0, 0x0d, 0x94, 0xe2, 0x7f,
	0x5c, 0x81, 0x92, 0xed, 0xd8, 0x96, 0x5e, 0xc0, 0xbb, 0xb0, 0x33, 0x30, 0x4d, 0xcb, 0xd4, 0x11,
	0xae, 0x42, 0xd9, 0x1b, 0x99, 0x03, 0xd7, 0x32, 0x75, 0x2d, 0xbe, 0x20, 0xd6, 0x91, 0x73, 0x6c,
	0x99, 0x7a, 0xf1, 0xc0, 0x02, 0x48, 0x81, 0x58, 0x87, 0x9a, 0xed, 0x24, 0x4a, 0xf7, 0xcb, 0x28,
	0x86, 0xd4, 0xa0, 0x32, 0x72, 0x3e, 0x1f, 0xba, 0x87, 0x8e, 0xad, 0xa3, 0x18, 0xe9, 0x3a, 0x27,
	0x16, 0xd1, 0xb5, 0xf8, 0xc6, 0xc7, 0x81, 0x6d, 0x3a, 0xc7, 0x16, 0xd1, 0x8b, 0xfd, 0x6b, 0x0d,
	0xca, 0x6e, 0x72, 0x46, 0xfc, 0x09, 0x6a, 0x1f, 0xa8, 0xd8, 0xcc, 0x0c, 0xde, 0xcf, 0x26, 0xc8,
	0x8e, 0x53, 0x73, 0x2f, 0xff, 0x01, 0xa6, 0x08, 0x0f, 0x20, 0x1d, 0x0b, 0xfc, 0x3c, 0x2b, 0xbf,
	0x35, 0x8b, 0xcd, 0xd6, 0x5d, 0x92, 0xe4, 0x15, 0xf6, 0xd0, 0x1a, 0x9b, 0x74, 0x68, 0x3e, 0x76,
	0x6b, 0x2c, 0xf2, 0xb1, 0xdb, 0x0d, 0xde, 0x43, 0x78, 0x08, 0xe5, 0x55, 0xbb, 0x60, 0x23, 0xcf,
	0x90, 0xb6, 0xe7, 0xed, 0xe4, 0x99, 0x3e, 0xeb, 0xa1, 0xf7, 0x8d, 0xdf, 0x0b, 0x03, 0x5d, 0x2d,
	0x0c, 0xf4, 0x67, 0x61, 0xa0, 0x9f, 0x4b, 0xa3, 0x70, 0xb5, 0x34, 0x0a, 0xd7, 0x4b, 0xa3, 0x30,
	0x7e, 0xa0, 0x3e, 0x50, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xca, 0x67, 0x8d, 0x0f,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrafficClient is the client API for Traffic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrafficClient interface {
	GetMapLayout(ctx context.Context, in *MapLayoutRequest, opts ...grpc.CallOption) (*types.MapLayout, error)
	ListTowers(ctx context.Context, in *ListTowersRequest, opts ...grpc.CallOption) (Traffic_ListTowersClient, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (Traffic_ListRoutesClient, error)
	ListUes(ctx context.Context, in *ListUesRequest, opts ...grpc.CallOption) (Traffic_ListUesClient, error)
}

type trafficClient struct {
	cc *grpc.ClientConn
}

func NewTrafficClient(cc *grpc.ClientConn) TrafficClient {
	return &trafficClient{cc}
}

func (c *trafficClient) GetMapLayout(ctx context.Context, in *MapLayoutRequest, opts ...grpc.CallOption) (*types.MapLayout, error) {
	out := new(types.MapLayout)
	err := c.cc.Invoke(ctx, "/ran.trafficsim.Traffic/GetMapLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) ListTowers(ctx context.Context, in *ListTowersRequest, opts ...grpc.CallOption) (Traffic_ListTowersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Traffic_serviceDesc.Streams[0], "/ran.trafficsim.Traffic/ListTowers", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficListTowersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Traffic_ListTowersClient interface {
	Recv() (*ListTowersResponse, error)
	grpc.ClientStream
}

type trafficListTowersClient struct {
	grpc.ClientStream
}

func (x *trafficListTowersClient) Recv() (*ListTowersResponse, error) {
	m := new(ListTowersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trafficClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (Traffic_ListRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Traffic_serviceDesc.Streams[1], "/ran.trafficsim.Traffic/ListRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficListRoutesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Traffic_ListRoutesClient interface {
	Recv() (*ListRoutesResponse, error)
	grpc.ClientStream
}

type trafficListRoutesClient struct {
	grpc.ClientStream
}

func (x *trafficListRoutesClient) Recv() (*ListRoutesResponse, error) {
	m := new(ListRoutesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trafficClient) ListUes(ctx context.Context, in *ListUesRequest, opts ...grpc.CallOption) (Traffic_ListUesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Traffic_serviceDesc.Streams[2], "/ran.trafficsim.Traffic/ListUes", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficListUesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Traffic_ListUesClient interface {
	Recv() (*ListUesResponse, error)
	grpc.ClientStream
}

type trafficListUesClient struct {
	grpc.ClientStream
}

func (x *trafficListUesClient) Recv() (*ListUesResponse, error) {
	m := new(ListUesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrafficServer is the server API for Traffic service.
type TrafficServer interface {
	GetMapLayout(context.Context, *MapLayoutRequest) (*types.MapLayout, error)
	ListTowers(*ListTowersRequest, Traffic_ListTowersServer) error
	ListRoutes(*ListRoutesRequest, Traffic_ListRoutesServer) error
	ListUes(*ListUesRequest, Traffic_ListUesServer) error
}

// UnimplementedTrafficServer can be embedded to have forward compatible implementations.
type UnimplementedTrafficServer struct {
}

func (*UnimplementedTrafficServer) GetMapLayout(ctx context.Context, req *MapLayoutRequest) (*types.MapLayout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapLayout not implemented")
}
func (*UnimplementedTrafficServer) ListTowers(req *ListTowersRequest, srv Traffic_ListTowersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTowers not implemented")
}
func (*UnimplementedTrafficServer) ListRoutes(req *ListRoutesRequest, srv Traffic_ListRoutesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedTrafficServer) ListUes(req *ListUesRequest, srv Traffic_ListUesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUes not implemented")
}

func RegisterTrafficServer(s *grpc.Server, srv TrafficServer) {
	s.RegisterService(&_Traffic_serviceDesc, srv)
}

func _Traffic_GetMapLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).GetMapLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.trafficsim.Traffic/GetMapLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).GetMapLayout(ctx, req.(*MapLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_ListTowers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTowersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServer).ListTowers(m, &trafficListTowersServer{stream})
}

type Traffic_ListTowersServer interface {
	Send(*ListTowersResponse) error
	grpc.ServerStream
}

type trafficListTowersServer struct {
	grpc.ServerStream
}

func (x *trafficListTowersServer) Send(m *ListTowersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Traffic_ListRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRoutesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServer).ListRoutes(m, &trafficListRoutesServer{stream})
}

type Traffic_ListRoutesServer interface {
	Send(*ListRoutesResponse) error
	grpc.ServerStream
}

type trafficListRoutesServer struct {
	grpc.ServerStream
}

func (x *trafficListRoutesServer) Send(m *ListRoutesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Traffic_ListUes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServer).ListUes(m, &trafficListUesServer{stream})
}

type Traffic_ListUesServer interface {
	Send(*ListUesResponse) error
	grpc.ServerStream
}

type trafficListUesServer struct {
	grpc.ServerStream
}

func (x *trafficListUesServer) Send(m *ListUesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Traffic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ran.trafficsim.Traffic",
	HandlerType: (*TrafficServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMapLayout",
			Handler:    _Traffic_GetMapLayout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTowers",
			Handler:       _Traffic_ListTowers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRoutes",
			Handler:       _Traffic_ListRoutes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUes",
			Handler:       _Traffic_ListUes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/trafficsim/trafficsim.proto",
}

func (m *MapLayoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapLayoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapLayoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTowersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTowersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTowersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithoutReplay {
		i--
		if m.WithoutReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Subscribe {
		i--
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTowersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTowersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTowersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTrafficsim(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Tower != nil {
		{
			size, err := m.Tower.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrafficsim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithoutReplay {
		i--
		if m.WithoutReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Subscribe {
		i--
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTrafficsim(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrafficsim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListUesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithoutReplay {
		i--
		if m.WithoutReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Subscribe {
		i--
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListUesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateType != 0 {
		i = encodeVarintTrafficsim(dAtA, i, uint64(m.UpdateType))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintTrafficsim(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Ue != nil {
		{
			size, err := m.Ue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrafficsim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrafficsim(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrafficsim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MapLayoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTowersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe {
		n += 2
	}
	if m.WithoutReplay {
		n += 2
	}
	return n
}

func (m *ListTowersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tower != nil {
		l = m.Tower.Size()
		n += 1 + l + sovTrafficsim(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTrafficsim(uint64(m.Type))
	}
	return n
}

func (m *ListRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe {
		n += 2
	}
	if m.WithoutReplay {
		n += 2
	}
	return n
}

func (m *ListRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTrafficsim(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTrafficsim(uint64(m.Type))
	}
	return n
}

func (m *ListUesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe {
		n += 2
	}
	if m.WithoutReplay {
		n += 2
	}
	return n
}

func (m *ListUesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ue != nil {
		l = m.Ue.Size()
		n += 1 + l + sovTrafficsim(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTrafficsim(uint64(m.Type))
	}
	if m.UpdateType != 0 {
		n += 1 + sovTrafficsim(uint64(m.UpdateType))
	}
	return n
}

func sovTrafficsim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrafficsim(x uint64) (n int) {
	return sovTrafficsim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapLayoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapLayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapLayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTowersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTowersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTowersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutReplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTowersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTowersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTowersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficsim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tower == nil {
				m.Tower = &types.Tower{}
			}
			if err := m.Tower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutReplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficsim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Route{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutReplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficsim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ue == nil {
				m.Ue = &types.Ue{}
			}
			if err := m.Ue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrafficsim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrafficsim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrafficsim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrafficsim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrafficsim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrafficsim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrafficsim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrafficsim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrafficsim = fmt.Errorf("proto: unexpected end of group")
)
