/*
SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
*/

syntax = "proto3";

package ran.trafficsim;

import "github.com/onosproject/ran-simulator/api/types/types.proto";

message MapLayoutRequest {
}

message ListRoutesRequest {
    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all routes have been streamed to the client
    bool subscribe = 1;

    // option to request only changes that happen after the call
    bool withoutReplay = 2;
}

message ListRoutesResponse {
    // route is the route change on which the event occurred
    ran.types.Route route = 1;

    // type is a qualification of the type of change being made
    Type type = 2;
}

message ListUesRequest {
    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all routes have been streamed to the client
    bool subscribe = 1;

    // option to request only changes that happen after the call
    bool withoutReplay = 2;
}

message ListUesResponse {
    // Ue is the UserEquipment change on which the event occurred
    ran.types.Ue ue = 1;

    // type is a qualification of the type of change being made
    Type type = 2;

    // update_type is a qualification of the type of UE change
    UpdateType update_type = 3;
}

message SetNumberUEsRequest {
    uint32 number = 1;
}

message SetNumberUEsResponse {
    uint32 number = 1;
}

message ResetMetricsMsg {
}

// Traffic - provides a stream of traffic data to GUI
service Traffic {
    rpc GetMapLayout(MapLayoutRequest) returns (ran.types.MapLayout);

    rpc ListRoutes(ListRoutesRequest) returns (stream ListRoutesResponse);

    rpc ListUes(ListUesRequest) returns (stream ListUesResponse);

    rpc SetNumberUEs(SetNumberUEsRequest) returns (SetNumberUEsResponse);

    rpc ResetMetrics(ResetMetricsMsg) returns (ResetMetricsMsg);
}

// Change event type
enum Type {
    // NONE indicates this response does not represent a modification of the Change
    NONE = 0;

    // ADDED is an event which occurs when a Change is added to the topology
    ADDED = 1;

    // UPDATED is an event which occurs when a Change is updated
    UPDATED = 2;

    // REMOVED is an event which occurs when a Change is removed from the configuration
    REMOVED = 3;
}

// In the case of an update this helps qualify the update type - add items as necessary
enum UpdateType {
    NOUPDATETYPE = 0;

    // POSITION An update in position of UE only, without a change in the Tower affinity
    POSITION = 1;

    // TOWER An update in non-serving tower affinity (and also position) of UE
    TOWER = 2;

    // HANDOVER An update of the serving tower
    HANDOVER = 3;
}
