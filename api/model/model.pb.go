// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/model/model.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_onosproject_ran_simulator_api_types "github.com/onosproject/ran-simulator/api/types"
	types "github.com/onosproject/ran-simulator/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Change event type
type EventType int32

const (
	// NONE indicates this response represents a pre-existing entity
	EventType_NONE EventType = 0
	// CREATED indicates a new entity was created
	EventType_CREATED EventType = 1
	// UPDATED indicates an existing entity was updated
	EventType_UPDATED EventType = 2
	// DELETED indicates an entity was deleted
	EventType_DELETED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "CREATED",
	2: "UPDATED",
	3: "DELETED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"CREATED": 1,
	"UPDATED": 2,
	"DELETED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{0}
}

// Node messages
type CreateNodeRequest struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *CreateNodeRequest) Reset()         { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()    {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{0}
}
func (m *CreateNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeRequest.Merge(m, src)
}
func (m *CreateNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeRequest proto.InternalMessageInfo

func (m *CreateNodeRequest) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CreateNodeResponse struct {
}

func (m *CreateNodeResponse) Reset()         { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()    {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{1}
}
func (m *CreateNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeResponse.Merge(m, src)
}
func (m *CreateNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeResponse proto.InternalMessageInfo

type GetNodeRequest struct {
	EnbID github_com_onosproject_ran_simulator_api_types.EnbID `protobuf:"varint,1,opt,name=enbid,proto3,casttype=github.com/onosproject/ran-simulator/api/types.EnbID" json:"enbid,omitempty"`
}

func (m *GetNodeRequest) Reset()         { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()    {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{2}
}
func (m *GetNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeRequest.Merge(m, src)
}
func (m *GetNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeRequest proto.InternalMessageInfo

func (m *GetNodeRequest) GetEnbID() github_com_onosproject_ran_simulator_api_types.EnbID {
	if m != nil {
		return m.EnbID
	}
	return 0
}

type GetNodeResponse struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *GetNodeResponse) Reset()         { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()    {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{3}
}
func (m *GetNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeResponse.Merge(m, src)
}
func (m *GetNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeResponse proto.InternalMessageInfo

func (m *GetNodeResponse) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type UpdateNodeRequest struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *UpdateNodeRequest) Reset()         { *m = UpdateNodeRequest{} }
func (m *UpdateNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNodeRequest) ProtoMessage()    {}
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{4}
}
func (m *UpdateNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNodeRequest.Merge(m, src)
}
func (m *UpdateNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNodeRequest proto.InternalMessageInfo

func (m *UpdateNodeRequest) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type UpdateNodeResponse struct {
}

func (m *UpdateNodeResponse) Reset()         { *m = UpdateNodeResponse{} }
func (m *UpdateNodeResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateNodeResponse) ProtoMessage()    {}
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{5}
}
func (m *UpdateNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNodeResponse.Merge(m, src)
}
func (m *UpdateNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNodeResponse proto.InternalMessageInfo

type DeleteNodeRequest struct {
	EnbID github_com_onosproject_ran_simulator_api_types.EnbID `protobuf:"varint,1,opt,name=enbid,proto3,casttype=github.com/onosproject/ran-simulator/api/types.EnbID" json:"enbid,omitempty"`
}

func (m *DeleteNodeRequest) Reset()         { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()    {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{6}
}
func (m *DeleteNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeRequest.Merge(m, src)
}
func (m *DeleteNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeRequest proto.InternalMessageInfo

func (m *DeleteNodeRequest) GetEnbID() github_com_onosproject_ran_simulator_api_types.EnbID {
	if m != nil {
		return m.EnbID
	}
	return 0
}

type DeleteNodeResponse struct {
}

func (m *DeleteNodeResponse) Reset()         { *m = DeleteNodeResponse{} }
func (m *DeleteNodeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResponse) ProtoMessage()    {}
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{7}
}
func (m *DeleteNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeResponse.Merge(m, src)
}
func (m *DeleteNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeResponse proto.InternalMessageInfo

type ListNodesRequest struct {
}

func (m *ListNodesRequest) Reset()         { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()    {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{8}
}
func (m *ListNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesRequest.Merge(m, src)
}
func (m *ListNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesRequest proto.InternalMessageInfo

type ListNodesResponse struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *ListNodesResponse) Reset()         { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()    {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{9}
}
func (m *ListNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodesResponse.Merge(m, src)
}
func (m *ListNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodesResponse proto.InternalMessageInfo

func (m *ListNodesResponse) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type WatchNodesRequest struct {
	NoReplay    bool `protobuf:"varint,1,opt,name=no_replay,json=noReplay,proto3" json:"no_replay,omitempty"`
	NoSubscribe bool `protobuf:"varint,2,opt,name=no_subscribe,json=noSubscribe,proto3" json:"no_subscribe,omitempty"`
}

func (m *WatchNodesRequest) Reset()         { *m = WatchNodesRequest{} }
func (m *WatchNodesRequest) String() string { return proto.CompactTextString(m) }
func (*WatchNodesRequest) ProtoMessage()    {}
func (*WatchNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{10}
}
func (m *WatchNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchNodesRequest.Merge(m, src)
}
func (m *WatchNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchNodesRequest proto.InternalMessageInfo

func (m *WatchNodesRequest) GetNoReplay() bool {
	if m != nil {
		return m.NoReplay
	}
	return false
}

func (m *WatchNodesRequest) GetNoSubscribe() bool {
	if m != nil {
		return m.NoSubscribe
	}
	return false
}

type WatchNodesResponse struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Type EventType   `protobuf:"varint,2,opt,name=type,proto3,enum=ran.model.EventType" json:"type,omitempty"`
}

func (m *WatchNodesResponse) Reset()         { *m = WatchNodesResponse{} }
func (m *WatchNodesResponse) String() string { return proto.CompactTextString(m) }
func (*WatchNodesResponse) ProtoMessage()    {}
func (*WatchNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{11}
}
func (m *WatchNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchNodesResponse.Merge(m, src)
}
func (m *WatchNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchNodesResponse proto.InternalMessageInfo

func (m *WatchNodesResponse) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *WatchNodesResponse) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

type AgentControlRequest struct {
	EnbID   github_com_onosproject_ran_simulator_api_types.EnbID `protobuf:"varint,1,opt,name=enbid,proto3,casttype=github.com/onosproject/ran-simulator/api/types.EnbID" json:"enbid,omitempty"`
	Command string                                               `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Args    []string                                             `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *AgentControlRequest) Reset()         { *m = AgentControlRequest{} }
func (m *AgentControlRequest) String() string { return proto.CompactTextString(m) }
func (*AgentControlRequest) ProtoMessage()    {}
func (*AgentControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{12}
}
func (m *AgentControlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentControlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentControlRequest.Merge(m, src)
}
func (m *AgentControlRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentControlRequest proto.InternalMessageInfo

func (m *AgentControlRequest) GetEnbID() github_com_onosproject_ran_simulator_api_types.EnbID {
	if m != nil {
		return m.EnbID
	}
	return 0
}

func (m *AgentControlRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *AgentControlRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type AgentControlResponse struct {
	Node *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *AgentControlResponse) Reset()         { *m = AgentControlResponse{} }
func (m *AgentControlResponse) String() string { return proto.CompactTextString(m) }
func (*AgentControlResponse) ProtoMessage()    {}
func (*AgentControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{13}
}
func (m *AgentControlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentControlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentControlResponse.Merge(m, src)
}
func (m *AgentControlResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentControlResponse proto.InternalMessageInfo

func (m *AgentControlResponse) GetNode() *types.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CreateCellRequest struct {
	Cell *types.Cell `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
}

func (m *CreateCellRequest) Reset()         { *m = CreateCellRequest{} }
func (m *CreateCellRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCellRequest) ProtoMessage()    {}
func (*CreateCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{14}
}
func (m *CreateCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCellRequest.Merge(m, src)
}
func (m *CreateCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCellRequest proto.InternalMessageInfo

func (m *CreateCellRequest) GetCell() *types.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type CreateCellResponse struct {
}

func (m *CreateCellResponse) Reset()         { *m = CreateCellResponse{} }
func (m *CreateCellResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCellResponse) ProtoMessage()    {}
func (*CreateCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{15}
}
func (m *CreateCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCellResponse.Merge(m, src)
}
func (m *CreateCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCellResponse proto.InternalMessageInfo

type GetCellRequest struct {
	ECGI github_com_onosproject_ran_simulator_api_types.ECGI `protobuf:"varint,1,opt,name=ecgi,proto3,casttype=github.com/onosproject/ran-simulator/api/types.ECGI" json:"ecgi,omitempty"`
}

func (m *GetCellRequest) Reset()         { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()    {}
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{16}
}
func (m *GetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellRequest.Merge(m, src)
}
func (m *GetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellRequest proto.InternalMessageInfo

func (m *GetCellRequest) GetECGI() github_com_onosproject_ran_simulator_api_types.ECGI {
	if m != nil {
		return m.ECGI
	}
	return 0
}

type GetCellResponse struct {
	Cell *types.Cell `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
}

func (m *GetCellResponse) Reset()         { *m = GetCellResponse{} }
func (m *GetCellResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellResponse) ProtoMessage()    {}
func (*GetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{17}
}
func (m *GetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellResponse.Merge(m, src)
}
func (m *GetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellResponse proto.InternalMessageInfo

func (m *GetCellResponse) GetCell() *types.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type UpdateCellRequest struct {
	Cell *types.Cell `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
}

func (m *UpdateCellRequest) Reset()         { *m = UpdateCellRequest{} }
func (m *UpdateCellRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCellRequest) ProtoMessage()    {}
func (*UpdateCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{18}
}
func (m *UpdateCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCellRequest.Merge(m, src)
}
func (m *UpdateCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCellRequest proto.InternalMessageInfo

func (m *UpdateCellRequest) GetCell() *types.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type UpdateCellResponse struct {
}

func (m *UpdateCellResponse) Reset()         { *m = UpdateCellResponse{} }
func (m *UpdateCellResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCellResponse) ProtoMessage()    {}
func (*UpdateCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{19}
}
func (m *UpdateCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCellResponse.Merge(m, src)
}
func (m *UpdateCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCellResponse proto.InternalMessageInfo

type DeleteCellRequest struct {
	ECGI github_com_onosproject_ran_simulator_api_types.ECGI `protobuf:"varint,1,opt,name=enbid,proto3,casttype=github.com/onosproject/ran-simulator/api/types.ECGI" json:"enbid,omitempty"`
}

func (m *DeleteCellRequest) Reset()         { *m = DeleteCellRequest{} }
func (m *DeleteCellRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCellRequest) ProtoMessage()    {}
func (*DeleteCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{20}
}
func (m *DeleteCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellRequest.Merge(m, src)
}
func (m *DeleteCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellRequest proto.InternalMessageInfo

func (m *DeleteCellRequest) GetECGI() github_com_onosproject_ran_simulator_api_types.ECGI {
	if m != nil {
		return m.ECGI
	}
	return 0
}

type DeleteCellResponse struct {
}

func (m *DeleteCellResponse) Reset()         { *m = DeleteCellResponse{} }
func (m *DeleteCellResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCellResponse) ProtoMessage()    {}
func (*DeleteCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{21}
}
func (m *DeleteCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCellResponse.Merge(m, src)
}
func (m *DeleteCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCellResponse proto.InternalMessageInfo

type WatchCellsRequest struct {
	NoReplay    bool `protobuf:"varint,1,opt,name=no_replay,json=noReplay,proto3" json:"no_replay,omitempty"`
	NoSubscribe bool `protobuf:"varint,2,opt,name=no_subscribe,json=noSubscribe,proto3" json:"no_subscribe,omitempty"`
}

func (m *WatchCellsRequest) Reset()         { *m = WatchCellsRequest{} }
func (m *WatchCellsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchCellsRequest) ProtoMessage()    {}
func (*WatchCellsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{22}
}
func (m *WatchCellsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchCellsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchCellsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchCellsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCellsRequest.Merge(m, src)
}
func (m *WatchCellsRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchCellsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCellsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCellsRequest proto.InternalMessageInfo

func (m *WatchCellsRequest) GetNoReplay() bool {
	if m != nil {
		return m.NoReplay
	}
	return false
}

func (m *WatchCellsRequest) GetNoSubscribe() bool {
	if m != nil {
		return m.NoSubscribe
	}
	return false
}

type WatchCellsResponse struct {
	Cell *types.Cell `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
	Type EventType   `protobuf:"varint,2,opt,name=type,proto3,enum=ran.model.EventType" json:"type,omitempty"`
}

func (m *WatchCellsResponse) Reset()         { *m = WatchCellsResponse{} }
func (m *WatchCellsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchCellsResponse) ProtoMessage()    {}
func (*WatchCellsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{23}
}
func (m *WatchCellsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchCellsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchCellsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchCellsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCellsResponse.Merge(m, src)
}
func (m *WatchCellsResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchCellsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCellsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCellsResponse proto.InternalMessageInfo

func (m *WatchCellsResponse) GetCell() *types.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *WatchCellsResponse) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

type ListCellsRequest struct {
}

func (m *ListCellsRequest) Reset()         { *m = ListCellsRequest{} }
func (m *ListCellsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCellsRequest) ProtoMessage()    {}
func (*ListCellsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{24}
}
func (m *ListCellsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCellsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCellsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCellsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCellsRequest.Merge(m, src)
}
func (m *ListCellsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCellsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCellsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCellsRequest proto.InternalMessageInfo

type ListCellsResponse struct {
	Cell *types.Cell `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
}

func (m *ListCellsResponse) Reset()         { *m = ListCellsResponse{} }
func (m *ListCellsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCellsResponse) ProtoMessage()    {}
func (*ListCellsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81eaad4ae10285e6, []int{25}
}
func (m *ListCellsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCellsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCellsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCellsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCellsResponse.Merge(m, src)
}
func (m *ListCellsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCellsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCellsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCellsResponse proto.InternalMessageInfo

func (m *ListCellsResponse) GetCell() *types.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func init() {
	proto.RegisterEnum("ran.model.EventType", EventType_name, EventType_value)
	proto.RegisterType((*CreateNodeRequest)(nil), "ran.model.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "ran.model.CreateNodeResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "ran.model.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "ran.model.GetNodeResponse")
	proto.RegisterType((*UpdateNodeRequest)(nil), "ran.model.UpdateNodeRequest")
	proto.RegisterType((*UpdateNodeResponse)(nil), "ran.model.UpdateNodeResponse")
	proto.RegisterType((*DeleteNodeRequest)(nil), "ran.model.DeleteNodeRequest")
	proto.RegisterType((*DeleteNodeResponse)(nil), "ran.model.DeleteNodeResponse")
	proto.RegisterType((*ListNodesRequest)(nil), "ran.model.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "ran.model.ListNodesResponse")
	proto.RegisterType((*WatchNodesRequest)(nil), "ran.model.WatchNodesRequest")
	proto.RegisterType((*WatchNodesResponse)(nil), "ran.model.WatchNodesResponse")
	proto.RegisterType((*AgentControlRequest)(nil), "ran.model.AgentControlRequest")
	proto.RegisterType((*AgentControlResponse)(nil), "ran.model.AgentControlResponse")
	proto.RegisterType((*CreateCellRequest)(nil), "ran.model.CreateCellRequest")
	proto.RegisterType((*CreateCellResponse)(nil), "ran.model.CreateCellResponse")
	proto.RegisterType((*GetCellRequest)(nil), "ran.model.GetCellRequest")
	proto.RegisterType((*GetCellResponse)(nil), "ran.model.GetCellResponse")
	proto.RegisterType((*UpdateCellRequest)(nil), "ran.model.UpdateCellRequest")
	proto.RegisterType((*UpdateCellResponse)(nil), "ran.model.UpdateCellResponse")
	proto.RegisterType((*DeleteCellRequest)(nil), "ran.model.DeleteCellRequest")
	proto.RegisterType((*DeleteCellResponse)(nil), "ran.model.DeleteCellResponse")
	proto.RegisterType((*WatchCellsRequest)(nil), "ran.model.WatchCellsRequest")
	proto.RegisterType((*WatchCellsResponse)(nil), "ran.model.WatchCellsResponse")
	proto.RegisterType((*ListCellsRequest)(nil), "ran.model.ListCellsRequest")
	proto.RegisterType((*ListCellsResponse)(nil), "ran.model.ListCellsResponse")
}

func init() { proto.RegisterFile("api/model/model.proto", fileDescriptor_81eaad4ae10285e6) }

var fileDescriptor_81eaad4ae10285e6 = []byte{
	// 811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x49, 0x78, 0xe0, 0x0b, 0x0f, 0xc8, 0xbc, 0x3c, 0x29, 0x35, 0x34, 0xa1, 0xe9, 0x06,
	0x55, 0x6a, 0x52, 0x85, 0xaa, 0x42, 0x6d, 0xa5, 0x16, 0x12, 0x8b, 0x46, 0xa5, 0x50, 0x19, 0x10,
	0x4b, 0xe4, 0x24, 0xa3, 0x60, 0xe4, 0xcc, 0xb8, 0xb6, 0x53, 0x89, 0xbf, 0xe8, 0xaa, 0xab, 0xfe,
	0x4e, 0xa5, 0x2e, 0x59, 0x76, 0x15, 0x55, 0xe1, 0x2f, 0x58, 0x55, 0x33, 0x76, 0x92, 0x19, 0xdb,
	0x48, 0x98, 0x96, 0x0d, 0xca, 0xcc, 0x9d, 0x7b, 0xe6, 0xdc, 0xf1, 0x39, 0xf7, 0x02, 0xff, 0x9b,
	0x8e, 0x55, 0xeb, 0xd3, 0x2e, 0xb6, 0x83, 0xbf, 0x55, 0xc7, 0xa5, 0x3e, 0x45, 0xaa, 0x6b, 0x92,
	0x2a, 0xdf, 0xd0, 0x0a, 0x3d, 0xda, 0xa3, 0x7c, 0xb7, 0xc6, 0x7e, 0x05, 0x07, 0xb4, 0x97, 0x3d,
	0xcb, 0x3f, 0x1b, 0xb4, 0xab, 0x1d, 0xda, 0xaf, 0x51, 0x42, 0x3d, 0xc7, 0xa5, 0xe7, 0xb8, 0xe3,
	0xd7, 0x5c, 0x93, 0x3c, 0xf5, 0xac, 0xfe, 0xc0, 0x36, 0x7d, 0xea, 0xd6, 0x18, 0xb8, 0x7f, 0xe1,
	0x60, 0x2f, 0xf8, 0x1b, 0xe4, 0x56, 0xb6, 0x20, 0xdf, 0x70, 0xb1, 0xe9, 0xe3, 0x7d, 0xda, 0xc5,
	0x06, 0xfe, 0x34, 0xc0, 0x9e, 0x8f, 0x1e, 0x43, 0x8e, 0xd0, 0x2e, 0x2e, 0x2a, 0xeb, 0xca, 0xc6,
	0x42, 0x7d, 0xb9, 0xca, 0x08, 0x04, 0x49, 0xfc, 0x14, 0x0f, 0x56, 0x0a, 0x80, 0xc4, 0x4c, 0xcf,
	0xa1, 0xc4, 0xc3, 0x15, 0x0b, 0x96, 0x76, 0xb1, 0x2f, 0x82, 0x9d, 0xc0, 0x2c, 0x26, 0x6d, 0xab,
	0xcb, 0xd1, 0xfe, 0xdd, 0xd9, 0x1e, 0x0d, 0xcb, 0xb3, 0x3a, 0x69, 0xb7, 0x9a, 0xd7, 0xc3, 0xf2,
	0xf3, 0x74, 0xcc, 0xab, 0x3c, 0xcf, 0x08, 0xf0, 0x2a, 0x2f, 0x60, 0x79, 0x72, 0x55, 0x70, 0xfb,
	0xed, 0x88, 0x6f, 0x41, 0xfe, 0xd8, 0xe9, 0xde, 0xb1, 0x64, 0x31, 0x33, 0x2c, 0xd9, 0x86, 0x7c,
	0x13, 0xdb, 0x58, 0xc6, 0xbb, 0xb7, 0xaa, 0x0b, 0x80, 0xc4, 0xdb, 0x42, 0x0e, 0x08, 0x56, 0xf6,
	0x2c, 0x8f, 0x3f, 0x86, 0x17, 0x52, 0x60, 0x75, 0x0a, 0x7b, 0x69, 0x5e, 0xe8, 0x10, 0xf2, 0x27,
	0xa6, 0xdf, 0x39, 0x13, 0xe1, 0xd0, 0x2a, 0xa8, 0x84, 0x9e, 0xba, 0xd8, 0xb1, 0xcd, 0x0b, 0x9e,
	0x3e, 0x6f, 0xcc, 0x13, 0x6a, 0xf0, 0x35, 0x7a, 0x04, 0x8b, 0x84, 0x9e, 0x7a, 0x83, 0xb6, 0xd7,
	0x71, 0xad, 0x36, 0x2e, 0xce, 0xf0, 0xf8, 0x02, 0xa1, 0x87, 0xe3, 0xad, 0x4a, 0x07, 0x90, 0x08,
	0x9a, 0x82, 0x0f, 0xda, 0x80, 0x1c, 0xdb, 0xe3, 0xa8, 0x4b, 0xf5, 0x42, 0x75, 0x62, 0x88, 0xaa,
	0xfe, 0x19, 0x13, 0xff, 0xe8, 0xc2, 0xc1, 0x06, 0x3f, 0x51, 0xf9, 0xa6, 0xc0, 0x7f, 0xdb, 0x3d,
	0x4c, 0xfc, 0x06, 0x25, 0xbe, 0x4b, 0xed, 0xfb, 0xfe, 0x1c, 0xa8, 0x08, 0x73, 0x1d, 0xda, 0xef,
	0x9b, 0xa4, 0xcb, 0xd9, 0xa9, 0xc6, 0x78, 0x89, 0x10, 0xe4, 0x4c, 0xb7, 0xe7, 0x15, 0xb3, 0xeb,
	0xd9, 0x0d, 0xd5, 0xe0, 0xbf, 0x2b, 0xaf, 0xa0, 0x20, 0xb3, 0x4b, 0xa9, 0xdb, 0xc0, 0x70, 0x0d,
	0x6c, 0xdb, 0x82, 0x6e, 0xd9, 0x32, 0x21, 0x93, 0x9f, 0xe2, 0xc1, 0xa9, 0x55, 0x83, 0xcc, 0x50,
	0x33, 0x98, 0x5b, 0x55, 0x04, 0x3b, 0x84, 0x1c, 0xee, 0xf4, 0xac, 0xf0, 0x91, 0xde, 0x8c, 0x86,
	0xe5, 0x9c, 0xde, 0xd8, 0x6d, 0x5d, 0x0f, 0xcb, 0x9b, 0x69, 0xdf, 0xa8, 0xb1, 0xdb, 0x32, 0x38,
	0x58, 0x68, 0x53, 0xf1, 0xe6, 0xdb, 0x91, 0x9e, 0xd8, 0xf4, 0x2e, 0xe5, 0x8a, 0x99, 0x61, 0xb9,
	0xe7, 0x63, 0x9b, 0x8a, 0x78, 0xc7, 0xb2, 0x2e, 0xfe, 0xb8, 0xe4, 0xa8, 0x49, 0x25, 0x06, 0x63,
	0x5b, 0xb1, 0xcd, 0xbf, 0x6e, 0xab, 0x10, 0x34, 0xc5, 0x0b, 0xa7, 0xb0, 0x55, 0xd8, 0x5e, 0x44,
	0xe2, 0xe3, 0xf6, 0x92, 0xfe, 0xde, 0x27, 0xaf, 0x41, 0x9d, 0x5c, 0x80, 0xe6, 0x21, 0xb7, 0x7f,
	0xb0, 0xaf, 0xaf, 0x64, 0xd0, 0x02, 0xcc, 0x35, 0x0c, 0x7d, 0xfb, 0x48, 0x6f, 0xae, 0x28, 0x6c,
	0x71, 0xfc, 0xb1, 0xc9, 0x17, 0x33, 0x6c, 0xd1, 0xd4, 0xf7, 0x74, 0xb6, 0xc8, 0xd6, 0xbf, 0xe6,
	0x40, 0x65, 0xae, 0xf8, 0xc0, 0x98, 0xa2, 0x16, 0xc0, 0x74, 0x0a, 0xa1, 0x35, 0xa1, 0x86, 0xd8,
	0x58, 0xd3, 0x1e, 0xde, 0x10, 0x0d, 0xb9, 0xbf, 0x85, 0xb9, 0x70, 0x9e, 0xa0, 0x07, 0xc2, 0x49,
	0x79, 0x9c, 0x69, 0x5a, 0x52, 0x28, 0x44, 0x68, 0x01, 0x4c, 0xe7, 0x83, 0x44, 0x26, 0x36, 0x70,
	0x24, 0x32, 0xf1, 0xa1, 0xc2, 0xa0, 0xa6, 0x6d, 0x5e, 0x82, 0x8a, 0xcd, 0x1a, 0x09, 0x2a, 0x3e,
	0x1b, 0xd0, 0x7b, 0x80, 0x69, 0xe3, 0x95, 0xa0, 0x62, 0x4d, 0x5e, 0x82, 0x8a, 0x77, 0xeb, 0x67,
	0x0a, 0x7a, 0x07, 0xea, 0x64, 0xa8, 0xa0, 0x55, 0xe1, 0x74, 0x74, 0xfc, 0x68, 0x6b, 0xc9, 0xc1,
	0x09, 0xd2, 0x01, 0x2c, 0x8a, 0xbd, 0x10, 0x95, 0x84, 0xf3, 0x09, 0x2d, 0x5c, 0x2b, 0xdf, 0x18,
	0x0f, 0x20, 0xeb, 0xdf, 0xb3, 0xa0, 0x32, 0x7d, 0x45, 0x84, 0xc1, 0xa5, 0x1e, 0x17, 0x86, 0xd0,
	0x05, 0x12, 0x84, 0x21, 0xb5, 0xab, 0xc9, 0xb7, 0x88, 0x41, 0xc5, 0x1a, 0x4a, 0xc2, 0xb7, 0x88,
	0x42, 0x4d, 0x5b, 0x53, 0x82, 0x42, 0x6e, 0x82, 0x8a, 0xf7, 0xb3, 0x50, 0xae, 0x1c, 0x27, 0x22,
	0x57, 0x11, 0x44, 0x4b, 0x0a, 0x45, 0x84, 0xc1, 0x2d, 0x1c, 0x17, 0x86, 0xe8, 0xf6, 0xb8, 0x30,
	0x24, 0xdf, 0x4f, 0x85, 0x11, 0x60, 0x45, 0x85, 0x21, 0x41, 0xad, 0x25, 0x07, 0xc7, 0x48, 0x3b,
	0xc5, 0x1f, 0xa3, 0x92, 0x72, 0x39, 0x2a, 0x29, 0xbf, 0x46, 0x25, 0xe5, 0xcb, 0x55, 0x29, 0x73,
	0x79, 0x55, 0xca, 0xfc, 0xbc, 0x2a, 0x65, 0xda, 0xff, 0xf0, 0xff, 0x59, 0x37, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x68, 0x0b, 0xae, 0xf1, 0x29, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeModelClient is the client API for NodeModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeModelClient interface {
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	WatchNodes(ctx context.Context, in *WatchNodesRequest, opts ...grpc.CallOption) (NodeModel_WatchNodesClient, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (NodeModel_ListNodesClient, error)
	AgentControl(ctx context.Context, in *AgentControlRequest, opts ...grpc.CallOption) (*AgentControlResponse, error)
}

type nodeModelClient struct {
	cc *grpc.ClientConn
}

func NewNodeModelClient(cc *grpc.ClientConn) NodeModelClient {
	return &nodeModelClient{cc}
}

func (c *nodeModelClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, "/ran.model.NodeModel/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeModelClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/ran.model.NodeModel/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeModelClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/ran.model.NodeModel/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeModelClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, "/ran.model.NodeModel/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeModelClient) WatchNodes(ctx context.Context, in *WatchNodesRequest, opts ...grpc.CallOption) (NodeModel_WatchNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeModel_serviceDesc.Streams[0], "/ran.model.NodeModel/WatchNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeModelWatchNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeModel_WatchNodesClient interface {
	Recv() (*WatchNodesResponse, error)
	grpc.ClientStream
}

type nodeModelWatchNodesClient struct {
	grpc.ClientStream
}

func (x *nodeModelWatchNodesClient) Recv() (*WatchNodesResponse, error) {
	m := new(WatchNodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeModelClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (NodeModel_ListNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeModel_serviceDesc.Streams[1], "/ran.model.NodeModel/ListNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeModelListNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeModel_ListNodesClient interface {
	Recv() (*ListNodesResponse, error)
	grpc.ClientStream
}

type nodeModelListNodesClient struct {
	grpc.ClientStream
}

func (x *nodeModelListNodesClient) Recv() (*ListNodesResponse, error) {
	m := new(ListNodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeModelClient) AgentControl(ctx context.Context, in *AgentControlRequest, opts ...grpc.CallOption) (*AgentControlResponse, error) {
	out := new(AgentControlResponse)
	err := c.cc.Invoke(ctx, "/ran.model.NodeModel/AgentControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeModelServer is the server API for NodeModel service.
type NodeModelServer interface {
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	WatchNodes(*WatchNodesRequest, NodeModel_WatchNodesServer) error
	ListNodes(*ListNodesRequest, NodeModel_ListNodesServer) error
	AgentControl(context.Context, *AgentControlRequest) (*AgentControlResponse, error)
}

// UnimplementedNodeModelServer can be embedded to have forward compatible implementations.
type UnimplementedNodeModelServer struct {
}

func (*UnimplementedNodeModelServer) CreateNode(ctx context.Context, req *CreateNodeRequest) (*CreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (*UnimplementedNodeModelServer) GetNode(ctx context.Context, req *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedNodeModelServer) UpdateNode(ctx context.Context, req *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (*UnimplementedNodeModelServer) DeleteNode(ctx context.Context, req *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedNodeModelServer) WatchNodes(req *WatchNodesRequest, srv NodeModel_WatchNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchNodes not implemented")
}
func (*UnimplementedNodeModelServer) ListNodes(req *ListNodesRequest, srv NodeModel_ListNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedNodeModelServer) AgentControl(ctx context.Context, req *AgentControlRequest) (*AgentControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentControl not implemented")
}

func RegisterNodeModelServer(s *grpc.Server, srv NodeModelServer) {
	s.RegisterService(&_NodeModel_serviceDesc, srv)
}

func _NodeModel_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeModelServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.NodeModel/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeModelServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeModel_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeModelServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.NodeModel/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeModelServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeModel_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeModelServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.NodeModel/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeModelServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeModel_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeModelServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.NodeModel/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeModelServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeModel_WatchNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeModelServer).WatchNodes(m, &nodeModelWatchNodesServer{stream})
}

type NodeModel_WatchNodesServer interface {
	Send(*WatchNodesResponse) error
	grpc.ServerStream
}

type nodeModelWatchNodesServer struct {
	grpc.ServerStream
}

func (x *nodeModelWatchNodesServer) Send(m *WatchNodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeModel_ListNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeModelServer).ListNodes(m, &nodeModelListNodesServer{stream})
}

type NodeModel_ListNodesServer interface {
	Send(*ListNodesResponse) error
	grpc.ServerStream
}

type nodeModelListNodesServer struct {
	grpc.ServerStream
}

func (x *nodeModelListNodesServer) Send(m *ListNodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeModel_AgentControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeModelServer).AgentControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.NodeModel/AgentControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeModelServer).AgentControl(ctx, req.(*AgentControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeModel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ran.model.NodeModel",
	HandlerType: (*NodeModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _NodeModel_CreateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _NodeModel_GetNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _NodeModel_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeModel_DeleteNode_Handler,
		},
		{
			MethodName: "AgentControl",
			Handler:    _NodeModel_AgentControl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNodes",
			Handler:       _NodeModel_WatchNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNodes",
			Handler:       _NodeModel_ListNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/model/model.proto",
}

// CellModelClient is the client API for CellModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CellModelClient interface {
	CreateCell(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error)
	DeleteCell(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error)
	UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error)
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	WatchCells(ctx context.Context, in *WatchCellsRequest, opts ...grpc.CallOption) (CellModel_WatchCellsClient, error)
	ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (CellModel_ListCellsClient, error)
}

type cellModelClient struct {
	cc *grpc.ClientConn
}

func NewCellModelClient(cc *grpc.ClientConn) CellModelClient {
	return &cellModelClient{cc}
}

func (c *cellModelClient) CreateCell(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error) {
	out := new(CreateCellResponse)
	err := c.cc.Invoke(ctx, "/ran.model.CellModel/CreateCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellModelClient) DeleteCell(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error) {
	out := new(DeleteCellResponse)
	err := c.cc.Invoke(ctx, "/ran.model.CellModel/DeleteCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellModelClient) UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error) {
	out := new(UpdateCellResponse)
	err := c.cc.Invoke(ctx, "/ran.model.CellModel/UpdateCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellModelClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, "/ran.model.CellModel/GetCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellModelClient) WatchCells(ctx context.Context, in *WatchCellsRequest, opts ...grpc.CallOption) (CellModel_WatchCellsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CellModel_serviceDesc.Streams[0], "/ran.model.CellModel/WatchCells", opts...)
	if err != nil {
		return nil, err
	}
	x := &cellModelWatchCellsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CellModel_WatchCellsClient interface {
	Recv() (*WatchCellsResponse, error)
	grpc.ClientStream
}

type cellModelWatchCellsClient struct {
	grpc.ClientStream
}

func (x *cellModelWatchCellsClient) Recv() (*WatchCellsResponse, error) {
	m := new(WatchCellsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cellModelClient) ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (CellModel_ListCellsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CellModel_serviceDesc.Streams[1], "/ran.model.CellModel/ListCells", opts...)
	if err != nil {
		return nil, err
	}
	x := &cellModelListCellsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CellModel_ListCellsClient interface {
	Recv() (*ListCellsResponse, error)
	grpc.ClientStream
}

type cellModelListCellsClient struct {
	grpc.ClientStream
}

func (x *cellModelListCellsClient) Recv() (*ListCellsResponse, error) {
	m := new(ListCellsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CellModelServer is the server API for CellModel service.
type CellModelServer interface {
	CreateCell(context.Context, *CreateCellRequest) (*CreateCellResponse, error)
	DeleteCell(context.Context, *DeleteCellRequest) (*DeleteCellResponse, error)
	UpdateCell(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error)
	GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error)
	WatchCells(*WatchCellsRequest, CellModel_WatchCellsServer) error
	ListCells(*ListCellsRequest, CellModel_ListCellsServer) error
}

// UnimplementedCellModelServer can be embedded to have forward compatible implementations.
type UnimplementedCellModelServer struct {
}

func (*UnimplementedCellModelServer) CreateCell(ctx context.Context, req *CreateCellRequest) (*CreateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCell not implemented")
}
func (*UnimplementedCellModelServer) DeleteCell(ctx context.Context, req *DeleteCellRequest) (*DeleteCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCell not implemented")
}
func (*UnimplementedCellModelServer) UpdateCell(ctx context.Context, req *UpdateCellRequest) (*UpdateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCell not implemented")
}
func (*UnimplementedCellModelServer) GetCell(ctx context.Context, req *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (*UnimplementedCellModelServer) WatchCells(req *WatchCellsRequest, srv CellModel_WatchCellsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchCells not implemented")
}
func (*UnimplementedCellModelServer) ListCells(req *ListCellsRequest, srv CellModel_ListCellsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCells not implemented")
}

func RegisterCellModelServer(s *grpc.Server, srv CellModelServer) {
	s.RegisterService(&_CellModel_serviceDesc, srv)
}

func _CellModel_CreateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellModelServer).CreateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.CellModel/CreateCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellModelServer).CreateCell(ctx, req.(*CreateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellModel_DeleteCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellModelServer).DeleteCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.CellModel/DeleteCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellModelServer).DeleteCell(ctx, req.(*DeleteCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellModel_UpdateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellModelServer).UpdateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.CellModel/UpdateCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellModelServer).UpdateCell(ctx, req.(*UpdateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellModel_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellModelServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.model.CellModel/GetCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellModelServer).GetCell(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellModel_WatchCells_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCellsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CellModelServer).WatchCells(m, &cellModelWatchCellsServer{stream})
}

type CellModel_WatchCellsServer interface {
	Send(*WatchCellsResponse) error
	grpc.ServerStream
}

type cellModelWatchCellsServer struct {
	grpc.ServerStream
}

func (x *cellModelWatchCellsServer) Send(m *WatchCellsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CellModel_ListCells_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCellsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CellModelServer).ListCells(m, &cellModelListCellsServer{stream})
}

type CellModel_ListCellsServer interface {
	Send(*ListCellsResponse) error
	grpc.ServerStream
}

type cellModelListCellsServer struct {
	grpc.ServerStream
}

func (x *cellModelListCellsServer) Send(m *ListCellsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CellModel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ran.model.CellModel",
	HandlerType: (*CellModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCell",
			Handler:    _CellModel_CreateCell_Handler,
		},
		{
			MethodName: "DeleteCell",
			Handler:    _CellModel_DeleteCell_Handler,
		},
		{
			MethodName: "UpdateCell",
			Handler:    _CellModel_UpdateCell_Handler,
		},
		{
			MethodName: "GetCell",
			Handler:    _CellModel_GetCell_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchCells",
			Handler:       _CellModel_WatchCells_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCells",
			Handler:       _CellModel_ListCells_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/model/model.proto",
}

func (m *CreateNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnbID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.EnbID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnbID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.EnbID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoSubscribe {
		i--
		if m.NoSubscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NoReplay {
		i--
		if m.NoReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentControlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentControlRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentControlRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintModel(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnbID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.EnbID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgentControlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentControlResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentControlResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ECGI != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ECGI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ECGI != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ECGI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WatchCellsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchCellsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchCellsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoSubscribe {
		i--
		if m.NoSubscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NoReplay {
		i--
		if m.NoReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchCellsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchCellsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchCellsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCellsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCellsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCellsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListCellsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCellsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCellsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *CreateNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnbID != 0 {
		n += 1 + sovModel(uint64(m.EnbID))
	}
	return n
}

func (m *GetNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *UpdateNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *UpdateNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnbID != 0 {
		n += 1 + sovModel(uint64(m.EnbID))
	}
	return n
}

func (m *DeleteNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *WatchNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoReplay {
		n += 2
	}
	if m.NoSubscribe {
		n += 2
	}
	return n
}

func (m *WatchNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	return n
}

func (m *AgentControlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnbID != 0 {
		n += 1 + sovModel(uint64(m.EnbID))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *AgentControlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *CreateCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *CreateCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ECGI != 0 {
		n += 1 + sovModel(uint64(m.ECGI))
	}
	return n
}

func (m *GetCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *UpdateCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *UpdateCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ECGI != 0 {
		n += 1 + sovModel(uint64(m.ECGI))
	}
	return n
}

func (m *DeleteCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WatchCellsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoReplay {
		n += 2
	}
	if m.NoSubscribe {
		n += 2
	}
	return n
}

func (m *WatchCellsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	return n
}

func (m *ListCellsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListCellsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnbID", wireType)
			}
			m.EnbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnbID |= github_com_onosproject_ran_simulator_api_types.EnbID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnbID", wireType)
			}
			m.EnbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnbID |= github_com_onosproject_ran_simulator_api_types.EnbID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoReplay = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSubscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSubscribe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentControlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentControlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentControlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnbID", wireType)
			}
			m.EnbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnbID |= github_com_onosproject_ran_simulator_api_types.EnbID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentControlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentControlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentControlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &types.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ECGI", wireType)
			}
			m.ECGI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ECGI |= github_com_onosproject_ran_simulator_api_types.ECGI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &types.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &types.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ECGI", wireType)
			}
			m.ECGI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ECGI |= github_com_onosproject_ran_simulator_api_types.ECGI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchCellsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchCellsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchCellsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoReplay = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSubscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSubscribe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchCellsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchCellsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchCellsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &types.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCellsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCellsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCellsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCellsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCellsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCellsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &types.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)
