// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

package kpm

import (
	"context"
	"github.com/onosproject/ran-simulator/pkg/servicemodel/registry"

	"github.com/onosproject/ran-simulator/pkg/servicemodel/utils"

	"github.com/onosproject/onos-e2t/api/e2ap/v1beta1/e2apies"
	"github.com/onosproject/onos-e2t/api/e2ap/v1beta1/e2appducontents"
	"github.com/onosproject/onos-e2t/pkg/southbound/e2ap/types"
	"github.com/onosproject/ran-simulator/pkg/servicemodel"
)

var _ servicemodel.ServiceModel = &ServiceModel{}

// ServiceModel kpm service model struct
type ServiceModel struct {
}

// GetConfig returns service model config information
func GetConfig() registry.ServiceModelConfig {
	kpmSm := registry.ServiceModelConfig{
		ID:           registry.Kpm,
		ServiceModel: &ServiceModel{},
		Revision:     1,
	}

	// TODO: Generate ASN1 bytes on the fly - can only be done through plugin
	kpmSm.Description = ranFuncDescBytes

	return kpmSm
}

// RICControl implements control handler for kpm service model
func (sm *ServiceModel) RICControl(ctx context.Context, request *e2appducontents.RiccontrolRequest) (response *e2appducontents.RiccontrolAcknowledge, failure *e2appducontents.RiccontrolFailure, err error) {
	panic("implement me")

}

// RICSubscription implements subscription handler for kpm service model
func (sm *ServiceModel) RICSubscription(ctx context.Context, request *e2appducontents.RicsubscriptionRequest) (response *e2appducontents.RicsubscriptionResponse, failure *e2appducontents.RicsubscriptionFailure, err error) {

	var ricActionsAccepted []*types.RicActionID
	var ricActionsNotAdmitted map[types.RicActionID]*e2apies.Cause
	actionList := request.ProtocolIes.E2ApProtocolIes30.Value.RicActionToBeSetupList.Value

	reqID := request.ProtocolIes.E2ApProtocolIes29.Value.RicRequestorId
	ranFuncID := request.ProtocolIes.E2ApProtocolIes5.Value.Value
	ricInstanceID := request.ProtocolIes.E2ApProtocolIes29.Value.RicInstanceId

	for _, action := range actionList {
		actionID := types.RicActionID(action.Value.RicActionId.Value)
		actionType := action.Value.RicActionType
		if actionType == e2apies.RicactionType_RICACTION_TYPE_REPORT {
			ricActionsAccepted = append(ricActionsAccepted, &actionID)
		}
		// TODO handle not admitted actions
	}
	subscription, _ := utils.NewSubscription(
		utils.WithRequestID(reqID),
		utils.WithRanFuncID(ranFuncID),
		utils.WithRicInstanceID(ricInstanceID),
		utils.WithActionsAccepted(ricActionsAccepted),
		utils.WithActionsNotAdmitted(ricActionsNotAdmitted))

	// At least one required action must be accepted otherwise sends a subscription failure response
	if len(ricActionsAccepted) == 0 {
		subscriptionFailure := utils.CreateSubscriptionFailure(subscription)
		return nil, subscriptionFailure, nil
	}

	// TODO handle event trigger definitions

	subscriptionResponse := utils.CreateSubscriptionResponse(subscription)
	return subscriptionResponse, nil, nil

}

// RICSubscriptionDelete implements subscription delete handler for kpm service model
func (sm *ServiceModel) RICSubscriptionDelete(ctx context.Context, request *e2appducontents.RicsubscriptionDeleteRequest) (response *e2appducontents.RicsubscriptionDeleteResponse, failure *e2appducontents.RicsubscriptionDeleteFailure, err error) {
	panic("implement me")
}

var ranFuncDescBytes = []byte{
	0x20, 0xC0, 0x4F, 0x52, 0x41, 0x4E, 0x2D, 0x45, 0x32, 0x53, 0x4D, 0x2D, 0x4B, 0x50, 0x4D, 0x00, 0x00, 0x05, 0x4F, 0x49,
	0x44, 0x31, 0x32, 0x33, 0x05, 0x00, 0x4B, 0x50, 0x4D, 0x20, 0x6D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x08, 0x93, 0x49,
	0xF4, 0x77, 0xF9, 0xE1, 0xAF, 0x00, 0x60, 0x00, 0x01, 0x01, 0x07, 0x00, 0x50, 0x65, 0x72, 0x69, 0x6F, 0x64, 0x69, 0x63,
	0x20, 0x72, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x01, 0x05, 0x14, 0x01, 0x01, 0x1D, 0x00, 0x4F, 0x2D, 0x44, 0x55, 0x20, 0x4D,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72,
	0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x35, 0x47, 0x43, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D, 0x65, 0x6E, 0x74, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x02,
	0x1D, 0x00, 0x4F, 0x2D, 0x44, 0x55, 0x20, 0x4D, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x43,
	0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x50, 0x43,
	0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D, 0x65, 0x6E,
	0x74, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x03, 0x1E, 0x80, 0x4F, 0x2D, 0x43, 0x55, 0x2D, 0x43, 0x50, 0x20, 0x4D, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20,
	0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x35, 0x47, 0x43, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D, 0x65, 0x6E, 0x74, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x04, 0x1E,
	0x80, 0x4F, 0x2D, 0x43, 0x55, 0x2D, 0x43, 0x50, 0x20, 0x4D, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74,
	0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45,
	0x50, 0x43, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D,
	0x65, 0x6E, 0x74, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x05, 0x1E, 0x80, 0x4F, 0x2D, 0x43, 0x55, 0x2D, 0x55, 0x50, 0x20,
	0x4D, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65,
	0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x35, 0x47, 0x43, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D, 0x65, 0x6E, 0x74, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01,
	0x06, 0x1E, 0x80, 0x4F, 0x2D, 0x43, 0x55, 0x2D, 0x55, 0x50, 0x20, 0x4D, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6D, 0x65,
	0x6E, 0x74, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x45, 0x50, 0x43, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6C, 0x6F,
	0x79, 0x6D, 0x65, 0x6E, 0x74, 0x01, 0x01, 0x01, 0x01}
