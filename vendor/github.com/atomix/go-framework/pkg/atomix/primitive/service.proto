/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.service;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

// Service session
message SessionSnapshot {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    uint64 command_sequence = 4;
    repeated SessionServiceSnapshot services = 7;
}

// Session service snapshot
message SessionServiceSnapshot {
    ServiceId service_id = 1 [(gogoproto.nullable) = false];
    repeated SessionStreamSnapshot streams = 2;
}

// Service session stream
message SessionStreamSnapshot {
    uint64 stream_id = 1;
    string type = 2;
    uint64 sequence_number = 3;
    uint64 last_completed = 4;
}

message ServiceId {
    ServiceType type = 1;
    string name = 2;
    string namespace = 3;
}

enum ServiceType {
    UNKNOWN_SERVICE = 0;
    COUNTER = 1;
    ELECTION = 2;
    INDEXED_MAP = 3;
    LEADER_LATCH = 4;
    LIST = 5;
    LOCK = 6;
    LOG = 7;
    MAP = 8;
    SET = 9;
    VALUE = 10;
}

message SessionRequest {
    oneof request {
        OpenSessionRequest open_session = 1;
        KeepAliveRequest keep_alive = 2;
        CloseSessionRequest close_session = 3;
        SessionCommandRequest command = 4;
        SessionQueryRequest query = 5;
    }
}

message SessionResponse {
    oneof response {
        OpenSessionResponse open_session = 1;
        KeepAliveResponse keep_alive = 2;
        CloseSessionResponse close_session = 3;
        SessionCommandResponse command = 4;
        SessionQueryResponse query = 5;
    }
}

message OpenSessionRequest {
    google.protobuf.Duration timeout = 1 [(gogoproto.stdduration) = true];
}

message OpenSessionResponse {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
}

message KeepAliveRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
    uint64 command_sequence = 2;
    map<uint64, uint64> streams = 3;
}

message KeepAliveResponse {
}

message CloseSessionRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
}

message CloseSessionResponse {

}

message SessionCommandRequest {
    SessionCommandContext context = 1;
    ServiceCommandRequest command = 2;
}

message SessionCommandResponse {
    SessionResponseContext context = 1;
    ServiceCommandResponse response = 2;
}

message SessionQueryRequest {
    SessionQueryContext context = 1;
    ServiceQueryRequest query = 2;
}

message SessionQueryResponse {
    SessionResponseContext context = 1;
    ServiceQueryResponse response = 2;
}

message ServiceCommandRequest {
    ServiceId service = 1;
    oneof request {
        ServiceOperationRequest operation = 2;
        ServiceCreateRequest create = 3;
        ServiceCloseRequest close = 4;
        ServiceDeleteRequest delete = 5;
    }
}

message ServiceCommandResponse {
    oneof response {
        ServiceOperationResponse operation = 1;
        ServiceCreateResponse create = 2;
        ServiceCloseResponse close = 3;
        ServiceDeleteResponse delete = 4;
    }
}

message ServiceQueryRequest {
    ServiceId service = 1;
    oneof request {
        ServiceOperationRequest operation = 2;
        ServiceMetadataRequest metadata = 3;
    }
}

message ServiceQueryResponse {
    oneof response {
        ServiceOperationResponse operation = 2;
        ServiceMetadataResponse metadata = 3;
    }
}

message ServiceOperationRequest {
    string method = 1;
    bytes value = 2;
}

message ServiceOperationResponse {
    bytes result = 1;
}

message ServiceCreateRequest {

}

message ServiceCreateResponse {

}

message ServiceCloseRequest {

}

message ServiceCloseResponse {

}

message ServiceDeleteRequest {

}

message ServiceDeleteResponse {

}

message ServiceMetadataRequest {
    ServiceType type = 1;
    string namespace = 2;
}

message ServiceMetadataResponse {
    repeated ServiceId services = 1;
}

message SessionCommandContext {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
    uint64 sequence_number = 2;
}

message SessionQueryContext {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
    uint64 last_sequence_number = 2;
    uint64 last_index = 3;
}

message SessionResponseContext {
    uint64 stream_id = 1 [(gogoproto.customname) = "StreamID"];
    uint64 index = 2;
    uint64 sequence = 3;
    SessionResponseType type = 4;
    SessionResponseStatus status = 5;
    string message = 6;
}

enum SessionResponseType {
    RESPONSE = 0;
    OPEN_STREAM = 1;
    CLOSE_STREAM = 2;
}

enum SessionResponseStatus {
    OK = 0;
    ERROR = 1;
    NOT_LEADER = 2;
    UNKNOWN = 3;
    CANCELED = 4;
    NOT_FOUND = 5;
    ALREADY_EXISTS = 6;
    UNAUTHORIZED = 7;
    FORBIDDEN = 8;
    CONFLICT = 9;
    INVALID = 10;
    UNAVAILABLE = 11;
    NOT_SUPPORTED = 12;
    TIMEOUT = 13;
    INTERNAL = 14;
}
