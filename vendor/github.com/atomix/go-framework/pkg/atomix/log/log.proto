/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.log.service;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

// Log snapshot
message LogSnapshot {
    uint64 index = 1;
    repeated LogEntryValue entries = 2;
}


// Log entry value
message LogEntryValue {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}

message ContainsIndexRequest {
    uint64 index = 1;
}

message ContainsIndexResponse {
    bool contains_index = 1;
}

message SizeRequest {

}

message SizeResponse {
    int32 size = 1;
}

message IndexRequest {

}

message IndexResponse {
    uint64 key = 1;
}


message AppendRequest {
    uint64 index = 1;
    bytes value = 2;
    bool if_empty = 3;
}

message AppendResponse {
    UpdateStatus status = 1;
    uint64 index = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}

message GetRequest {
    uint64 index = 1;
}

message GetResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}
message FirstEntryRequest {
}

message FirstEntryResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message LastEntryRequest {
}

message LastEntryResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message PrevEntryRequest {
    uint64 index = 1;
}

message PrevEntryResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}
message NextEntryRequest {
    uint64 index = 1;
}

message NextEntryResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}

message RemoveRequest {
    uint64 index = 1;
    bytes value = 2;
}

message RemoveResponse {
    UpdateStatus status = 1;
    uint64 index = 2;
    bytes previous_value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}
message ClearRequest {
}

message ClearResponse {
}

message ListenRequest {
    bool replay = 1;
    string key = 2;
    uint64 index = 3;
}

message ListenResponse {
    Type type = 1;
    uint64 index = 2;
    string key = 3;
    bytes value = 4;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    int64 stream_id = 6;

    enum Type {
        NONE = 0;
        APPENDED = 1;
        REMOVED = 3;
    }
}

message EntriesRequest {

}

message EntriesResponse {
    uint64 index = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}


// Listener is a log listener
message Listener {
    uint64 session_id = 1;
    uint64 stream_id = 2;
    uint64 index = 4;
}

message UnlistenRequest {
    uint64 stream_id = 1;
}

message UnlistenResponse {
}

enum UpdateStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}
