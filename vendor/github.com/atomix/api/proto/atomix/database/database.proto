/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.database;

import "gogoproto/gogo.proto";

// Database identifier
message DatabaseId {
    // name is the name of the database
    string name = 1;

    // namespace is the namespace to which the database belongs
    string namespace = 2;
}

// Database configuration
message Database {
    // id is the database identifier
    DatabaseId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

    // partitions is a list of partitions in the cluster
    repeated Partition partitions = 2 [(gogoproto.nullable) = false];
}

// Database configuration
message DatabaseConfig {
    // nodes is a list of database replicas
    repeated ReplicaConfig replicas = 1 [(gogoproto.nullable) = false];

    // partitions is a list of partitions owned by the replicas
    repeated PartitionId partitions = 2 [(gogoproto.nullable) = false];
}

// Replica configuration
message ReplicaConfig {
    // id is the unique member identifier
    string id = 1 [(gogoproto.customname) = "ID"];

    // host is the member host
    string host = 2;

    // api_port is the port to use for the client API
    int32 api_port = 3 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];

    // protocol_port is the port to use for intra-cluster communication
    int32 protocol_port = 4 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition identifier
message PartitionId {
    int32 partition = 1;
}

// Partition info
message Partition {
    PartitionId partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.nullable) = false];
    repeated PartitionEndpoint endpoints = 2 [(gogoproto.nullable) = false];
}

// Partition endpoint
message PartitionEndpoint {
    string host = 1;
    int32 port = 2;
}

// Gets a database in a namespace
message GetDatabaseRequest {
    DatabaseId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
}

// Returns a database in a namespace
message GetDatabaseResponse {
    Database database = 1;
}

// Gets a list of databases in a namespace
message GetDatabasesRequest {
    string namespace = 1;
}

// Returns a list of databases in a namespace
message GetDatabasesResponse {
    repeated Database databases = 1 [(gogoproto.nullable) = false];
}

// Atomix database service
service DatabaseService {
    // GetDatabase gets a database controlled by the controller
    rpc GetDatabase (GetDatabaseRequest) returns (GetDatabaseResponse);

    // GetDatabases gets a list of databases controlled by the controller
    rpc GetDatabases (GetDatabasesRequest) returns (GetDatabasesResponse);
}
