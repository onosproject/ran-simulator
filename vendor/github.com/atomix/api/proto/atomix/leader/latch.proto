syntax = "proto3";

import "atomix/headers/headers.proto";
import "gogoproto/gogo.proto";

package atomix.leader;

message CreateRequest {
    atomix.headers.RequestHeader header = 1;
}

message CreateResponse {
    atomix.headers.ResponseHeader header = 1;
}

message CloseRequest {
    atomix.headers.RequestHeader header = 1;
    bool delete = 2;
}

message CloseResponse {
    atomix.headers.ResponseHeader header = 1;
}

message LatchRequest {
    atomix.headers.RequestHeader header = 1;
    string participant_id = 2 [(gogoproto.customname) = "ParticipantID"];
}

message LatchResponse {
    atomix.headers.ResponseHeader header = 1;
    Latch latch = 2;
}

message GetRequest {
    atomix.headers.RequestHeader header = 1;
}

message GetResponse {
    atomix.headers.ResponseHeader header = 1;
    Latch latch = 2;
}

message EventRequest {
    atomix.headers.RequestHeader header = 1;
}

message EventResponse {
    atomix.headers.ResponseHeader header = 1;
    Type type = 2;
    Latch latch = 3;

    enum Type {
        CHANGED = 0;
    }
}

message Latch {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    string leader = 2;
    repeated string participants = 3;
}

// Leader latch service
service LeaderLatchService {

    // Create creates a leader latch
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a leader latch
    rpc Close (CloseRequest) returns (CloseResponse);

    // Latch attempts to acquire the leader latch
    rpc Latch (LatchRequest) returns (LatchResponse);

    // Get gets the current leader
    rpc Get (GetRequest) returns (GetResponse);

    // Events listens for leader change events
    rpc Events (EventRequest) returns (stream EventResponse);

}