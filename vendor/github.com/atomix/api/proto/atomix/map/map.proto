syntax = "proto3";

package atomix.map;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "atomix/headers/headers.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.headers.RequestHeader header = 1;
}

message CreateResponse {
    atomix.headers.ResponseHeader header = 1;
}

message CloseRequest {
    atomix.headers.RequestHeader header = 1;
    bool delete = 2;
}

message CloseResponse {
    atomix.headers.ResponseHeader header = 1;
}

message ExistsRequest {
    atomix.headers.RequestHeader header = 1;
    string key = 2;
}

message ExistsResponse {
    atomix.headers.ResponseHeader header = 1;
    bool contains_key = 2;
}

message SizeRequest {
    atomix.headers.RequestHeader header = 1;
}

message SizeResponse {
    atomix.headers.ResponseHeader header = 1;
    uint32 size = 2;
}

message PutRequest {
    atomix.headers.RequestHeader header = 1;
    string key = 2;
    bytes value = 3;
    uint64 version = 4;
    bool if_empty = 6;
    google.protobuf.Duration ttl = 5 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

message PutResponse {
    atomix.headers.ResponseHeader header = 1;
    ResponseStatus status = 2;
    google.protobuf.Timestamp created = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    bytes previous_value = 5;
    uint64 previous_version = 6;
}

message ReplaceRequest {
    atomix.headers.RequestHeader header = 1;
    string key = 2;
    bytes previous_value = 3;
    uint64 previous_version = 4;
    bytes new_value = 5;
    google.protobuf.Duration ttl = 6 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

message ReplaceResponse {
    atomix.headers.ResponseHeader header = 1;
    ResponseStatus status = 2;
    google.protobuf.Timestamp created = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    bytes previous_value = 5;
    uint64 previous_version = 6;
}

message GetRequest {
    atomix.headers.RequestHeader header = 1;
    string key = 2;
}

message GetResponse {
    atomix.headers.ResponseHeader header = 1;
    bytes value = 2;
    uint64 version = 3;
    google.protobuf.Timestamp created = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveRequest {
    atomix.headers.RequestHeader header = 1;
    string key = 2;
    bytes value = 3;
    uint64 version = 4;
    google.protobuf.Timestamp created = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.headers.ResponseHeader header = 1;
    ResponseStatus status = 2;
    bytes previous_value = 3;
    uint64 previous_version = 4;
}

message ClearRequest {
    atomix.headers.RequestHeader header = 1;
}

message ClearResponse {
    atomix.headers.ResponseHeader header = 1;
}

message EntriesRequest {
    atomix.headers.RequestHeader header = 1;
}

message EntriesResponse {
    atomix.headers.ResponseHeader header = 1;
    string key = 2;
    bytes value = 3;
    uint64 version = 4;
    google.protobuf.Timestamp created = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message EventRequest {
    atomix.headers.RequestHeader header = 1;
    bool replay = 2;
    string key = 3;
}

message EventResponse {
    atomix.headers.ResponseHeader header = 1;
    Type type = 2;
    string key = 3;
    bytes value = 4;
    uint64 version = 5;
    google.protobuf.Timestamp created = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        INSERTED = 1;
        UPDATED = 2;
        REMOVED = 3;
    }
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}

// MapService implements a distributed map
service MapService {

    // Create creates an indexed map
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes an indexed map
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse);

    // Exists checks whether a key exists in the map
    rpc Exists (ExistsRequest) returns (ExistsResponse);

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse);

    // Replace performs a check-and-set operation on an entry in the map
    rpc Replace (ReplaceRequest) returns (ReplaceResponse);

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse);

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

}
