/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive;

import "atomix/database/database.proto";
import "atomix/primitive/primitive.proto";
import "gogoproto/gogo.proto";

// CreatePrimitiveRequest is a request to create a primitive
message CreatePrimitiveRequest {
    atomix.database.DatabaseId database = 1 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveId primitive = 2 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveType type = 3;
}

// CreatePrimitiveResponse is a response for creating a primitive
message CreatePrimitiveResponse {
    PrimitiveMetadata primitive = 1 [(gogoproto.nullable) = false];
}

// GetPrimitiveRequest is a request for primitive metadata
message GetPrimitiveRequest {
    atomix.database.DatabaseId database = 1 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveId primitive = 2 [(gogoproto.nullable) = false];
}

// GetPrimitiveResponse is a response containing primitive metadata
message GetPrimitiveResponse {
    PrimitiveMetadata primitive = 1 [(gogoproto.nullable) = false];
}

// GetPrimitivesRequest is a request for primitive metadata
message GetPrimitivesRequest {
    atomix.database.DatabaseId database = 1;
    atomix.primitive.PrimitiveId primitive = 2;
    atomix.primitive.PrimitiveType type = 3 [(gogoproto.nullable) = true];
}

// GetPrimitivesResponse is a response containing primitive metadata
message GetPrimitivesResponse {
    repeated PrimitiveMetadata primitives = 1 [(gogoproto.nullable) = false];
}

// PrimitiveMetadata indicates the type and name of a primitive
message PrimitiveMetadata {
    atomix.database.DatabaseId database = 1 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveId primitive = 2 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveType type = 3;
}

// DeletePrimitiveRequest is a request to delete a primitive
message DeletePrimitiveRequest {
    atomix.database.DatabaseId database = 1 [(gogoproto.nullable) = false];
    atomix.primitive.PrimitiveId primitive = 2 [(gogoproto.nullable) = false];
}

// DeletePrimitiveResponse is a response for deleting a primitive
message DeletePrimitiveResponse {
    PrimitiveMetadata primitive = 1 [(gogoproto.nullable) = false];
}

// PrimitiveService is a service for providing partition/primitive metadata
service PrimitiveService {
    // CreatePrimitive creates a new primitive
    rpc CreatePrimitive (CreatePrimitiveRequest) returns (CreatePrimitiveResponse);

    // GetPrimitive returns a primitive in the system
    rpc GetPrimitive (GetPrimitiveRequest) returns (GetPrimitiveResponse);

    // GetPrimitives returns a list of primitives in the system
    rpc GetPrimitives (GetPrimitivesRequest) returns (GetPrimitivesResponse);

    // DeletePrimitive deletes a primitive
    rpc DeletePrimitive (DeletePrimitiveRequest) returns (DeletePrimitiveResponse);
}
