syntax = "proto3";

import "atomix/headers/headers.proto";

package atomix.counter;

message CreateRequest {
    atomix.headers.RequestHeader header = 1;
}

message CreateResponse {
    atomix.headers.ResponseHeader header = 1;
}

message CloseRequest {
    atomix.headers.RequestHeader header = 1;
    bool delete = 2;
}

message CloseResponse {
    atomix.headers.ResponseHeader header = 1;
}

message IncrementRequest {
    atomix.headers.RequestHeader header = 1;
    int64 delta = 2;
}

message IncrementResponse {
    atomix.headers.ResponseHeader header = 1;
    int64 previous_value = 2;
    int64 next_value = 3;
}

message DecrementRequest {
    atomix.headers.RequestHeader header = 1;
    int64 delta = 2;
}

message DecrementResponse {
    atomix.headers.ResponseHeader header = 1;
    int64 previous_value = 2;
    int64 next_value = 3;
}

message GetRequest {
    atomix.headers.RequestHeader header = 1;
}

message GetResponse {
    atomix.headers.ResponseHeader header = 1;
    int64 value = 2;
}

message SetRequest {
    atomix.headers.RequestHeader header = 1;
    int64 value = 2;
}

message SetResponse {
    atomix.headers.ResponseHeader header = 1;
    int64 previous_value = 2;
}

message CheckAndSetRequest {
    atomix.headers.RequestHeader header = 1;
    int64 expect = 2;
    int64 update = 3;
}

message CheckAndSetResponse {
    atomix.headers.ResponseHeader header = 1;
    bool succeeded = 2;
}

// CounterService implements a distributed counter
service CounterService {
    // Create creates a counter
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes the counter
    rpc Close (CloseRequest) returns (CloseResponse);

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse);

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse);

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse);

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse);

    // CheckAndSet performs a check-and-set operation on the counter value
    rpc CheckAndSet (CheckAndSetRequest) returns (CheckAndSetResponse);
}