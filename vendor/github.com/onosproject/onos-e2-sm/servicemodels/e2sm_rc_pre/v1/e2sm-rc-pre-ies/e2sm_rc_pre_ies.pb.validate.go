// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_rc_pre/v1/e2sm_rc_pre_ies.proto

package e2smrcpreies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_sm_rc_pre_ies_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Eutracgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Eutracgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracgiValidationError is the validation error returned by
// Eutracgi.Validate if the designated constraints aren't met.
type EutracgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracgiValidationError) ErrorName() string { return "EutracgiValidationError" }

// Error satisfies the builtin error interface
func (e EutracgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracgiValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Nrcgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on CellGlobalId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CellGlobalId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.CellGlobalId.(type) {

	case *CellGlobalId_NrCgi:

		if v, ok := interface{}(m.GetNrCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "NrCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellGlobalId_EUtraCgi:

		if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CellGlobalIdValidationError is the validation error returned by
// CellGlobalId.Validate if the designated constraints aren't met.
type CellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellGlobalIdValidationError) ErrorName() string { return "CellGlobalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellGlobalIdValidationError{}

// Validate checks the field values on Earfcn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Earfcn) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 262143 {
		return EarfcnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 262143]",
		}
	}

	return nil
}

// EarfcnValidationError is the validation error returned by Earfcn.Validate if
// the designated constraints aren't met.
type EarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EarfcnValidationError) ErrorName() string { return "EarfcnValidationError" }

// Error satisfies the builtin error interface
func (e EarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EarfcnValidationError{}

// Validate checks the field values on Pci with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Pci) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 503 {
		return PciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 503]",
		}
	}

	return nil
}

// PciValidationError is the validation error returned by Pci.Validate if the
// designated constraints aren't met.
type PciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PciValidationError) ErrorName() string { return "PciValidationError" }

// Error satisfies the builtin error interface
func (e PciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PciValidationError{}

// Validate checks the field values on PciRange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PciRange) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLowerPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PciRangeValidationError{
				field:  "LowerPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpperPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PciRangeValidationError{
				field:  "UpperPci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PciRangeValidationError is the validation error returned by
// PciRange.Validate if the designated constraints aren't met.
type PciRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PciRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PciRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PciRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PciRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PciRangeValidationError) ErrorName() string { return "PciRangeValidationError" }

// Error satisfies the builtin error interface
func (e PciRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPciRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PciRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PciRangeValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofMessageProtocolTests) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 15 {
		return MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
	}

	return nil
}

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxofRicstyles) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxPlmn) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 12 {
		return MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
	}

	return nil
}

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on MaxNr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxNr) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 4096 {
		return MaxNrValidationError{
			field:  "Value",
			reason: "value must equal 4096",
		}
	}

	return nil
}

// MaxNrValidationError is the validation error returned by MaxNr.Validate if
// the designated constraints aren't met.
type MaxNrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxNrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxNrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxNrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxNrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxNrValidationError) ErrorName() string { return "MaxNrValidationError" }

// Error satisfies the builtin error interface
func (e MaxNrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxNr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxNrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxNrValidationError{}

// Validate checks the field values on MaxEarfcn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxEarfcn) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 262143 {
		return MaxEarfcnValidationError{
			field:  "Value",
			reason: "value must equal 262143",
		}
	}

	return nil
}

// MaxEarfcnValidationError is the validation error returned by
// MaxEarfcn.Validate if the designated constraints aren't met.
type MaxEarfcnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxEarfcnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxEarfcnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxEarfcnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxEarfcnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxEarfcnValidationError) ErrorName() string { return "MaxEarfcnValidationError" }

// Error satisfies the builtin error interface
func (e MaxEarfcnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxEarfcn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxEarfcnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxEarfcnValidationError{}

// Validate checks the field values on MaxPci with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxPci) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 503 {
		return MaxPciValidationError{
			field:  "Value",
			reason: "value must equal 503",
		}
	}

	return nil
}

// MaxPciValidationError is the validation error returned by MaxPci.Validate if
// the designated constraints aren't met.
type MaxPciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPciValidationError) ErrorName() string { return "MaxPciValidationError" }

// Error satisfies the builtin error interface
func (e MaxPciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPciValidationError{}

// Validate checks the field values on MaxPciRange with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxPciRange) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 100 {
		return MaxPciRangeValidationError{
			field:  "Value",
			reason: "value must equal 100",
		}
	}

	return nil
}

// MaxPciRangeValidationError is the validation error returned by
// MaxPciRange.Validate if the designated constraints aren't met.
type MaxPciRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPciRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPciRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPciRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPciRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPciRangeValidationError) ErrorName() string { return "MaxPciRangeValidationError" }

// Error satisfies the builtin error interface
func (e MaxPciRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPciRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPciRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPciRangeValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicFormatType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on E2SmRcPreEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreEventTriggerDefinition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmRcPreEventTriggerDefinition.(type) {

	case *E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1:

		if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreEventTriggerDefinitionValidationError is the validation error
// returned by E2SmRcPreEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmRcPreEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmRcPreEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmRcPreEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SmRcPreEventTriggerDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPolicyTestList()); l < 1 || l > 15 {
		return E2SmRcPreEventTriggerDefinitionFormat1ValidationError{
			field:  "PolicyTestList",
			reason: "value must contain between 1 and 15 items, inclusive",
		}
	}

	for idx, item := range m.GetPolicyTestList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreEventTriggerDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("PolicyTestList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreEventTriggerDefinitionFormat1ValidationError is the validation
// error returned by E2SmRcPreEventTriggerDefinitionFormat1.Validate if the
// designated constraints aren't met.
type E2SmRcPreEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on TriggerConditionIeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TriggerConditionIeItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportPeriodIe

	return nil
}

// TriggerConditionIeItemValidationError is the validation error returned by
// TriggerConditionIeItem.Validate if the designated constraints aren't met.
type TriggerConditionIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerConditionIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerConditionIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerConditionIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerConditionIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerConditionIeItemValidationError) ErrorName() string {
	return "TriggerConditionIeItemValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerConditionIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerConditionIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerConditionIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerConditionIeItemValidationError{}

// Validate checks the field values on E2SmRcPreActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreActionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmRcPreActionDefinitionValidationError is the validation error returned by
// E2SmRcPreActionDefinition.Validate if the designated constraints aren't met.
type E2SmRcPreActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreActionDefinitionValidationError) ErrorName() string {
	return "E2SmRcPreActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreActionDefinitionValidationError{}

// Validate checks the field values on E2SmRcPreIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreIndicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmRcPreIndicationHeader.(type) {

	case *E2SmRcPreIndicationHeader_IndicationHeaderFormat1:

		if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreIndicationHeaderValidationError is the validation error returned by
// E2SmRcPreIndicationHeader.Validate if the designated constraints aren't met.
type E2SmRcPreIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationHeaderValidationError) ErrorName() string {
	return "E2SmRcPreIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationHeaderValidationError{}

// Validate checks the field values on E2SmRcPreIndicationHeaderFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *E2SmRcPreIndicationHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationHeaderFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmRcPreIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmRcPreIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmRcPreIndicationMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreIndicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmRcPreIndicationMessage.(type) {

	case *E2SmRcPreIndicationMessage_RicStyleType:

		if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmRcPreIndicationMessage_IndicationMessageFormat1:

		if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreIndicationMessageValidationError is the validation error returned
// by E2SmRcPreIndicationMessage.Validate if the designated constraints aren't met.
type E2SmRcPreIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationMessageValidationError) ErrorName() string {
	return "E2SmRcPreIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationMessageValidationError{}

// Validate checks the field values on E2SmRcPreIndicationMessageFormat1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *E2SmRcPreIndicationMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationMessageFormat1ValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDlEarfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationMessageFormat1ValidationError{
				field:  "DlEarfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CellSize

	if l := len(m.GetPciPool()); l < 1 || l > 100 {
		return E2SmRcPreIndicationMessageFormat1ValidationError{
			field:  "PciPool",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	for idx, item := range m.GetPciPool() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("PciPool[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreIndicationMessageFormat1ValidationError{
				field:  "Pci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetNeighbors()); l < 1 || l > 4096 {
		return E2SmRcPreIndicationMessageFormat1ValidationError{
			field:  "Neighbors",
			reason: "value must contain between 1 and 4096 items, inclusive",
		}
	}

	for idx, item := range m.GetNeighbors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("Neighbors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmRcPreIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmRcPreIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmRcPreIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreIndicationMessageFormat1ValidationError{}

// Validate checks the field values on Nrt with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Nrt) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NrIndex

	if v, ok := interface{}(m.GetCgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "Cgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDlEarfcn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "DlEarfcn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CellSize

	if v, ok := interface{}(m.GetPci()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrtValidationError{
				field:  "Pci",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrtValidationError is the validation error returned by Nrt.Validate if the
// designated constraints aren't met.
type NrtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrtValidationError) ErrorName() string { return "NrtValidationError" }

// Error satisfies the builtin error interface
func (e NrtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrtValidationError{}

// Validate checks the field values on E2SmRcPreRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreRanfunctionDescription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2SmRcPreRanfunctionItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmRcPreRanfunctionDescriptionValidationError{
				field:  "E2SmRcPreRanfunctionItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmRcPreRanfunctionDescriptionValidationError is the validation error
// returned by E2SmRcPreRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmRcPreRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmRcPreRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmRcPreRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmRcPreRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreRanfunctionDescriptionValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	// no validation rules for RanFunctionInstance

	return nil
}

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicEventTriggerStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicReportStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlmnIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 3 {
		return PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EutracellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NrcellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BitString) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	if m.GetLen() > 64 {
		return BitStringValidationError{
			field:  "Len",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}

// Validate checks the field values on
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError
// is the validation error returned by
// E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.Validate if the
// designated constraints aren't met.
type E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) ErrorName() string {
	return "E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001ValidationError{}
