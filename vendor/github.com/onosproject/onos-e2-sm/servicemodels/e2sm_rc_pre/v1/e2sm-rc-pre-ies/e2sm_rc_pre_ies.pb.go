// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: e2sm_rc_pre/v1/e2sm_rc_pre_ies.proto

package e2smrcpreies

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enumerated from e2sm-rc-pre-v1.asn1:49
// {Cell-Size}
type CellSize int32

const (
	CellSize_CELL_SIZE_FEMTO         CellSize = 0
	CellSize_CELL_SIZE_ENTERPRISE    CellSize = 1
	CellSize_CELL_SIZE_OUTDOOR_SMALL CellSize = 2
	CellSize_CELL_SIZE_MACRO         CellSize = 3
)

// Enum value maps for CellSize.
var (
	CellSize_name = map[int32]string{
		0: "CELL_SIZE_FEMTO",
		1: "CELL_SIZE_ENTERPRISE",
		2: "CELL_SIZE_OUTDOOR_SMALL",
		3: "CELL_SIZE_MACRO",
	}
	CellSize_value = map[string]int32{
		"CELL_SIZE_FEMTO":         0,
		"CELL_SIZE_ENTERPRISE":    1,
		"CELL_SIZE_OUTDOOR_SMALL": 2,
		"CELL_SIZE_MACRO":         3,
	}
)

func (x CellSize) Enum() *CellSize {
	p := new(CellSize)
	*p = x
	return p
}

func (x CellSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellSize) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[0].Descriptor()
}

func (CellSize) Type() protoreflect.EnumType {
	return &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[0]
}

func (x CellSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellSize.Descriptor instead.
func (CellSize) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{0}
}

// enumerated from e2sm-rc-pre-v1.asn1:105
// {RANparameter-Type}
type RanparameterType int32

const (
	RanparameterType_RANPARAMETER_TYPE_INTEGER          RanparameterType = 0
	RanparameterType_RANPARAMETER_TYPE_ENUMERATED       RanparameterType = 1
	RanparameterType_RANPARAMETER_TYPE_BOOLEAN          RanparameterType = 2
	RanparameterType_RANPARAMETER_TYPE_BIT_STRING       RanparameterType = 3
	RanparameterType_RANPARAMETER_TYPE_OCTET_STRING     RanparameterType = 4
	RanparameterType_RANPARAMETER_TYPE_PRINTABLE_STRING RanparameterType = 5
)

// Enum value maps for RanparameterType.
var (
	RanparameterType_name = map[int32]string{
		0: "RANPARAMETER_TYPE_INTEGER",
		1: "RANPARAMETER_TYPE_ENUMERATED",
		2: "RANPARAMETER_TYPE_BOOLEAN",
		3: "RANPARAMETER_TYPE_BIT_STRING",
		4: "RANPARAMETER_TYPE_OCTET_STRING",
		5: "RANPARAMETER_TYPE_PRINTABLE_STRING",
	}
	RanparameterType_value = map[string]int32{
		"RANPARAMETER_TYPE_INTEGER":          0,
		"RANPARAMETER_TYPE_ENUMERATED":       1,
		"RANPARAMETER_TYPE_BOOLEAN":          2,
		"RANPARAMETER_TYPE_BIT_STRING":       3,
		"RANPARAMETER_TYPE_OCTET_STRING":     4,
		"RANPARAMETER_TYPE_PRINTABLE_STRING": 5,
	}
)

func (x RanparameterType) Enum() *RanparameterType {
	p := new(RanparameterType)
	*p = x
	return p
}

func (x RanparameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RanparameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[1].Descriptor()
}

func (RanparameterType) Type() protoreflect.EnumType {
	return &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[1]
}

func (x RanparameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RanparameterType.Descriptor instead.
func (RanparameterType) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{1}
}

// enumerated from e2sm-rc-pre-v1.asn1:115
// {RC-PRE-Trigger-Type}
type RcPreTriggerType int32

const (
	RcPreTriggerType_RC_PRE_TRIGGER_TYPE_UPON_CHANGE RcPreTriggerType = 0
	RcPreTriggerType_RC_PRE_TRIGGER_TYPE_PERIODIC    RcPreTriggerType = 1
)

// Enum value maps for RcPreTriggerType.
var (
	RcPreTriggerType_name = map[int32]string{
		0: "RC_PRE_TRIGGER_TYPE_UPON_CHANGE",
		1: "RC_PRE_TRIGGER_TYPE_PERIODIC",
	}
	RcPreTriggerType_value = map[string]int32{
		"RC_PRE_TRIGGER_TYPE_UPON_CHANGE": 0,
		"RC_PRE_TRIGGER_TYPE_PERIODIC":    1,
	}
)

func (x RcPreTriggerType) Enum() *RcPreTriggerType {
	p := new(RcPreTriggerType)
	*p = x
	return p
}

func (x RcPreTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RcPreTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[2].Descriptor()
}

func (RcPreTriggerType) Type() protoreflect.EnumType {
	return &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[2]
}

func (x RcPreTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RcPreTriggerType.Descriptor instead.
func (RcPreTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{2}
}

// enumerated from e2sm-rc-pre-v1.asn1:211
// {RC-PRE-Command}
type RcPreCommand int32

const (
	RcPreCommand_RC_PRE_COMMAND_SET_PARAMETERS RcPreCommand = 0
)

// Enum value maps for RcPreCommand.
var (
	RcPreCommand_name = map[int32]string{
		0: "RC_PRE_COMMAND_SET_PARAMETERS",
	}
	RcPreCommand_value = map[string]int32{
		"RC_PRE_COMMAND_SET_PARAMETERS": 0,
	}
)

func (x RcPreCommand) Enum() *RcPreCommand {
	p := new(RcPreCommand)
	*p = x
	return p
}

func (x RcPreCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RcPreCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[3].Descriptor()
}

func (RcPreCommand) Type() protoreflect.EnumType {
	return &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes[3]
}

func (x RcPreCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RcPreCommand.Descriptor instead.
func (RcPreCommand) EnumDescriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{3}
}

// sequence from e2sm-rc-pre-v1.asn1:22
type Eutracgi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnIdentity      *PlmnIdentity      `protobuf:"bytes,1,opt,name=p_lmn_identity,json=EUTRACGI:pLMN_Identity,proto3" json:"p_lmn_identity,omitempty"`
	EUtracellIdentity *EutracellIdentity `protobuf:"bytes,2,opt,name=e_utracell_identity,json=EUTRACGI:eUTRACellIdentity,proto3" json:"e_utracell_identity,omitempty"`
}

func (x *Eutracgi) Reset() {
	*x = Eutracgi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eutracgi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eutracgi) ProtoMessage() {}

func (x *Eutracgi) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eutracgi.ProtoReflect.Descriptor instead.
func (*Eutracgi) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{0}
}

func (x *Eutracgi) GetPLmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnIdentity
	}
	return nil
}

func (x *Eutracgi) GetEUtracellIdentity() *EutracellIdentity {
	if x != nil {
		return x.EUtracellIdentity
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:28
type Nrcgi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PLmnIdentity   *PlmnIdentity   `protobuf:"bytes,1,opt,name=p_lmn_identity,json=NRCGI:pLMN_Identity,proto3" json:"p_lmn_identity,omitempty"`
	NRcellIdentity *NrcellIdentity `protobuf:"bytes,2,opt,name=n_rcell_identity,json=NRCGI:nRCellIdentity,proto3" json:"n_rcell_identity,omitempty"`
}

func (x *Nrcgi) Reset() {
	*x = Nrcgi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrcgi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrcgi) ProtoMessage() {}

func (x *Nrcgi) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrcgi.ProtoReflect.Descriptor instead.
func (*Nrcgi) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{1}
}

func (x *Nrcgi) GetPLmnIdentity() *PlmnIdentity {
	if x != nil {
		return x.PLmnIdentity
	}
	return nil
}

func (x *Nrcgi) GetNRcellIdentity() *NrcellIdentity {
	if x != nil {
		return x.NRcellIdentity
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:34
type CellGlobalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:34
	//
	// Types that are assignable to CellGlobalId:
	//	*CellGlobalId_NrCgi
	//	*CellGlobalId_EUtraCgi
	CellGlobalId isCellGlobalId_CellGlobalId `protobuf_oneof:"cell_global_id"`
}

func (x *CellGlobalId) Reset() {
	*x = CellGlobalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellGlobalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellGlobalId) ProtoMessage() {}

func (x *CellGlobalId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellGlobalId.ProtoReflect.Descriptor instead.
func (*CellGlobalId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{2}
}

func (m *CellGlobalId) GetCellGlobalId() isCellGlobalId_CellGlobalId {
	if m != nil {
		return m.CellGlobalId
	}
	return nil
}

func (x *CellGlobalId) GetNrCgi() *Nrcgi {
	if x, ok := x.GetCellGlobalId().(*CellGlobalId_NrCgi); ok {
		return x.NrCgi
	}
	return nil
}

func (x *CellGlobalId) GetEUtraCgi() *Eutracgi {
	if x, ok := x.GetCellGlobalId().(*CellGlobalId_EUtraCgi); ok {
		return x.EUtraCgi
	}
	return nil
}

type isCellGlobalId_CellGlobalId interface {
	isCellGlobalId_CellGlobalId()
}

type CellGlobalId_NrCgi struct {
	NrCgi *Nrcgi `protobuf:"bytes,1,opt,name=nr_cgi,json=CellGlobalID:nr_CGI,proto3,oneof"`
}

type CellGlobalId_EUtraCgi struct {
	EUtraCgi *Eutracgi `protobuf:"bytes,2,opt,name=e_utra_cgi,json=CellGlobalID:eUTRA_CGI,proto3,oneof"`
}

func (*CellGlobalId_NrCgi) isCellGlobalId_CellGlobalId() {}

func (*CellGlobalId_EUtraCgi) isCellGlobalId_CellGlobalId() {}

// range of Integer from e2sm-rc-pre-v1.asn1:40
type Earfcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=EARFCN:value,proto3" json:"value,omitempty"`
}

func (x *Earfcn) Reset() {
	*x = Earfcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Earfcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Earfcn) ProtoMessage() {}

func (x *Earfcn) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Earfcn.ProtoReflect.Descriptor instead.
func (*Earfcn) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{3}
}

func (x *Earfcn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm-rc-pre-v1.asn1:41
type Pci struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=PCI:value,proto3" json:"value,omitempty"`
}

func (x *Pci) Reset() {
	*x = Pci{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pci) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pci) ProtoMessage() {}

func (x *Pci) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pci.ProtoReflect.Descriptor instead.
func (*Pci) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{4}
}

func (x *Pci) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from e2sm-rc-pre-v1.asn1:44
type PciRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerPci *Pci `protobuf:"bytes,1,opt,name=lower_pci,json=PCI-Range:lower_pci,proto3" json:"lower_pci,omitempty"`
	UpperPci *Pci `protobuf:"bytes,2,opt,name=upper_pci,json=PCI-Range:upper_pci,proto3" json:"upper_pci,omitempty"`
}

func (x *PciRange) Reset() {
	*x = PciRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PciRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PciRange) ProtoMessage() {}

func (x *PciRange) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PciRange.ProtoReflect.Descriptor instead.
func (*PciRange) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{5}
}

func (x *PciRange) GetLowerPci() *Pci {
	if x != nil {
		return x.LowerPci
	}
	return nil
}

func (x *PciRange) GetUpperPci() *Pci {
	if x != nil {
		return x.UpperPci
	}
	return nil
}

// constant Integer from e2sm-rc-pre-v1.asn1:58
type MaxofMessageProtocolTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxofMessageProtocolTests:value,proto3" json:"value,omitempty"`
}

func (x *MaxofMessageProtocolTests) Reset() {
	*x = MaxofMessageProtocolTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxofMessageProtocolTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxofMessageProtocolTests) ProtoMessage() {}

func (x *MaxofMessageProtocolTests) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxofMessageProtocolTests.ProtoReflect.Descriptor instead.
func (*MaxofMessageProtocolTests) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{6}
}

func (x *MaxofMessageProtocolTests) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:59
type MaxofRicstyles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxofRicStyles:value,proto3" json:"value,omitempty"`
}

func (x *MaxofRicstyles) Reset() {
	*x = MaxofRicstyles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxofRicstyles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxofRicstyles) ProtoMessage() {}

func (x *MaxofRicstyles) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxofRicstyles.ProtoReflect.Descriptor instead.
func (*MaxofRicstyles) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{7}
}

func (x *MaxofRicstyles) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:60
type MaxPlmn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxPLMN:value,proto3" json:"value,omitempty"`
}

func (x *MaxPlmn) Reset() {
	*x = MaxPlmn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxPlmn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxPlmn) ProtoMessage() {}

func (x *MaxPlmn) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxPlmn.ProtoReflect.Descriptor instead.
func (*MaxPlmn) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{8}
}

func (x *MaxPlmn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:61
type MaxNr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxNR:value,proto3" json:"value,omitempty"`
}

func (x *MaxNr) Reset() {
	*x = MaxNr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxNr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxNr) ProtoMessage() {}

func (x *MaxNr) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxNr.ProtoReflect.Descriptor instead.
func (*MaxNr) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{9}
}

func (x *MaxNr) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:62
type MaxEarfcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxEARFCN:value,proto3" json:"value,omitempty"`
}

func (x *MaxEarfcn) Reset() {
	*x = MaxEarfcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxEarfcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxEarfcn) ProtoMessage() {}

func (x *MaxEarfcn) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxEarfcn.ProtoReflect.Descriptor instead.
func (*MaxEarfcn) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{10}
}

func (x *MaxEarfcn) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:63
type MaxPci struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxPCI:value,proto3" json:"value,omitempty"`
}

func (x *MaxPci) Reset() {
	*x = MaxPci{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxPci) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxPci) ProtoMessage() {}

func (x *MaxPci) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxPci.ProtoReflect.Descriptor instead.
func (*MaxPci) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{11}
}

func (x *MaxPci) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:64
type MaxPciRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxPCIRange:value,proto3" json:"value,omitempty"`
}

func (x *MaxPciRange) Reset() {
	*x = MaxPciRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxPciRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxPciRange) ProtoMessage() {}

func (x *MaxPciRange) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxPciRange.ProtoReflect.Descriptor instead.
func (*MaxPciRange) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{12}
}

func (x *MaxPciRange) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// constant Integer from e2sm-rc-pre-v1.asn1:65
type MaxofRanparameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=MaxOfRanParameters:value,proto3" json:"value,omitempty"`
}

func (x *MaxofRanparameters) Reset() {
	*x = MaxofRanparameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxofRanparameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxofRanparameters) ProtoMessage() {}

func (x *MaxofRanparameters) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxofRanparameters.ProtoReflect.Descriptor instead.
func (*MaxofRanparameters) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{13}
}

func (x *MaxofRanparameters) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm-rc-pre-v1.asn1:68
type RicStyleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=RIC-Style-Type:value,proto3" json:"value,omitempty"`
}

func (x *RicStyleType) Reset() {
	*x = RicStyleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicStyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicStyleType) ProtoMessage() {}

func (x *RicStyleType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicStyleType.ProtoReflect.Descriptor instead.
func (*RicStyleType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{14}
}

func (x *RicStyleType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm-rc-pre-v1.asn1:75
type RicFormatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=RIC-Format-Type:value,proto3" json:"value,omitempty"`
}

func (x *RicFormatType) Reset() {
	*x = RicFormatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicFormatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicFormatType) ProtoMessage() {}

func (x *RicFormatType) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicFormatType.ProtoReflect.Descriptor instead.
func (*RicFormatType) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{15}
}

func (x *RicFormatType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// range of Integer from e2sm-rc-pre-v1.asn1:77
type RicControlMessagePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=RIC-Control-Message-Priority:value,proto3" json:"value,omitempty"`
}

func (x *RicControlMessagePriority) Reset() {
	*x = RicControlMessagePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicControlMessagePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicControlMessagePriority) ProtoMessage() {}

func (x *RicControlMessagePriority) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicControlMessagePriority.ProtoReflect.Descriptor instead.
func (*RicControlMessagePriority) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{16}
}

func (x *RicControlMessagePriority) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from e2sm-rc-pre-v1.asn1:78
type RanparameterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId    *RanparameterId    `protobuf:"bytes,1,opt,name=ran_parameter_id,json=RANparameter_Item:ranParameter_ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterValue *RanparameterValue `protobuf:"bytes,2,opt,name=ran_parameter_value,json=RANparameter_Item:ranParameter_Value,proto3" json:"ran_parameter_value,omitempty"`
}

func (x *RanparameterItem) Reset() {
	*x = RanparameterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterItem) ProtoMessage() {}

func (x *RanparameterItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterItem.ProtoReflect.Descriptor instead.
func (*RanparameterItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{17}
}

func (x *RanparameterItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterItem) GetRanParameterValue() *RanparameterValue {
	if x != nil {
		return x.RanParameterValue
	}
	return nil
}

// range of Integer from e2sm-rc-pre-v1.asn1:83
type RanparameterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,json=RANparameter-ID:value,proto3" json:"value,omitempty"`
}

func (x *RanparameterId) Reset() {
	*x = RanparameterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterId) ProtoMessage() {}

func (x *RanparameterId) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterId.ProtoReflect.Descriptor instead.
func (*RanparameterId) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{18}
}

func (x *RanparameterId) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// sequence from e2sm-rc-pre-v1.asn1:86
type RanparameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:86
	//
	// Types that are assignable to RanparameterValue:
	//	*RanparameterValue_ValueInt
	//	*RanparameterValue_ValueEnum
	//	*RanparameterValue_ValueBool
	//	*RanparameterValue_ValueBitS
	//	*RanparameterValue_ValueOctS
	//	*RanparameterValue_ValuePrtS
	RanparameterValue isRanparameterValue_RanparameterValue `protobuf_oneof:"ranparameter_value"`
}

func (x *RanparameterValue) Reset() {
	*x = RanparameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterValue) ProtoMessage() {}

func (x *RanparameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterValue.ProtoReflect.Descriptor instead.
func (*RanparameterValue) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{19}
}

func (m *RanparameterValue) GetRanparameterValue() isRanparameterValue_RanparameterValue {
	if m != nil {
		return m.RanparameterValue
	}
	return nil
}

func (x *RanparameterValue) GetValueInt() int32 {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (x *RanparameterValue) GetValueEnum() int32 {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueEnum); ok {
		return x.ValueEnum
	}
	return 0
}

func (x *RanparameterValue) GetValueBool() bool {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *RanparameterValue) GetValueBitS() *BitString {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueBitS); ok {
		return x.ValueBitS
	}
	return nil
}

func (x *RanparameterValue) GetValueOctS() string {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValueOctS); ok {
		return x.ValueOctS
	}
	return ""
}

func (x *RanparameterValue) GetValuePrtS() string {
	if x, ok := x.GetRanparameterValue().(*RanparameterValue_ValuePrtS); ok {
		return x.ValuePrtS
	}
	return ""
}

type isRanparameterValue_RanparameterValue interface {
	isRanparameterValue_RanparameterValue()
}

type RanparameterValue_ValueInt struct {
	ValueInt int32 `protobuf:"varint,1,opt,name=value_int,json=RANparameter_Value:valueInt,proto3,oneof"`
}

type RanparameterValue_ValueEnum struct {
	ValueEnum int32 `protobuf:"varint,2,opt,name=value_enum,json=RANparameter_Value:valueEnum,proto3,oneof"`
}

type RanparameterValue_ValueBool struct {
	ValueBool bool `protobuf:"varint,3,opt,name=value_bool,json=RANparameter_Value:valueBool,proto3,oneof"`
}

type RanparameterValue_ValueBitS struct {
	ValueBitS *BitString `protobuf:"bytes,4,opt,name=value_bit_s,json=RANparameter_Value:valueBitS,proto3,oneof"`
}

type RanparameterValue_ValueOctS struct {
	ValueOctS string `protobuf:"bytes,5,opt,name=value_oct_s,json=RANparameter_Value:valueOctS,proto3,oneof"`
}

type RanparameterValue_ValuePrtS struct {
	ValuePrtS string `protobuf:"bytes,6,opt,name=value_prt_s,json=RANparameter_Value:valuePrtS,proto3,oneof"`
}

func (*RanparameterValue_ValueInt) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueEnum) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueBool) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueBitS) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValueOctS) isRanparameterValue_RanparameterValue() {}

func (*RanparameterValue_ValuePrtS) isRanparameterValue_RanparameterValue() {}

// sequence from e2sm-rc-pre-v1.asn1:96
type RanparameterDefItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanParameterId   *RanparameterId   `protobuf:"bytes,1,opt,name=ran_parameter_id,json=RANparameterDef_Item:ranParameter_ID,proto3" json:"ran_parameter_id,omitempty"`
	RanParameterName *RanparameterName `protobuf:"bytes,2,opt,name=ran_parameter_name,json=RANparameterDef_Item:ranParameter_Name,proto3" json:"ran_parameter_name,omitempty"`
	RanParameterType RanparameterType  `protobuf:"varint,3,opt,name=ran_parameter_type,json=RANparameterDef_Item:ranParameter_Type,proto3,enum=e2sm_rc_pre.v1.RanparameterType" json:"ran_parameter_type,omitempty"`
}

func (x *RanparameterDefItem) Reset() {
	*x = RanparameterDefItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterDefItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterDefItem) ProtoMessage() {}

func (x *RanparameterDefItem) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterDefItem.ProtoReflect.Descriptor instead.
func (*RanparameterDefItem) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{20}
}

func (x *RanparameterDefItem) GetRanParameterId() *RanparameterId {
	if x != nil {
		return x.RanParameterId
	}
	return nil
}

func (x *RanparameterDefItem) GetRanParameterName() *RanparameterName {
	if x != nil {
		return x.RanParameterName
	}
	return nil
}

func (x *RanparameterDefItem) GetRanParameterType() RanparameterType {
	if x != nil {
		return x.RanParameterType
	}
	return RanparameterType_RANPARAMETER_TYPE_INTEGER
}

// sequence from e2sm-rc-pre-v1.asn1:129
type E2SmRcPreEventTriggerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to E2SmRcPreEventTriggerDefinitionEventDefinitionFormats:
	//	*E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1
	E2SmRcPreEventTriggerDefinitionEventDefinitionFormats isE2SmRcPreEventTriggerDefinition_E2SmRcPreEventTriggerDefinitionEventDefinitionFormats `protobuf_oneof:"e2sm_rc_pre_event_trigger_definition_event_definition_formats"`
}

func (x *E2SmRcPreEventTriggerDefinition) Reset() {
	*x = E2SmRcPreEventTriggerDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreEventTriggerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreEventTriggerDefinition) ProtoMessage() {}

func (x *E2SmRcPreEventTriggerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreEventTriggerDefinition.ProtoReflect.Descriptor instead.
func (*E2SmRcPreEventTriggerDefinition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{21}
}

func (m *E2SmRcPreEventTriggerDefinition) GetE2SmRcPreEventTriggerDefinitionEventDefinitionFormats() isE2SmRcPreEventTriggerDefinition_E2SmRcPreEventTriggerDefinitionEventDefinitionFormats {
	if m != nil {
		return m.E2SmRcPreEventTriggerDefinitionEventDefinitionFormats
	}
	return nil
}

func (x *E2SmRcPreEventTriggerDefinition) GetEventDefinitionFormat1() *E2SmRcPreEventTriggerDefinitionFormat1 {
	if x, ok := x.GetE2SmRcPreEventTriggerDefinitionEventDefinitionFormats().(*E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1); ok {
		return x.EventDefinitionFormat1
	}
	return nil
}

type isE2SmRcPreEventTriggerDefinition_E2SmRcPreEventTriggerDefinitionEventDefinitionFormats interface {
	isE2SmRcPreEventTriggerDefinition_E2SmRcPreEventTriggerDefinitionEventDefinitionFormats()
}

type E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1 struct {
	EventDefinitionFormat1 *E2SmRcPreEventTriggerDefinitionFormat1 `protobuf:"bytes,1,opt,name=event_definition_format1,json=E2SM_RC_PRE_EventTriggerDefinition:E2SM_RC_PRE_EventTriggerDefinition__eventDefinition_Format1,proto3,oneof"`
}

func (*E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1) isE2SmRcPreEventTriggerDefinition_E2SmRcPreEventTriggerDefinitionEventDefinitionFormats() {
}

// sequence from e2sm-rc-pre-v1.asn1:134
type E2SmRcPreEventTriggerDefinitionFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType       RcPreTriggerType `protobuf:"varint,1,opt,name=trigger_type,json=E2SM_RC_PRE_EventTriggerDefinition_Format1:triggerType,proto3,enum=e2sm_rc_pre.v1.RcPreTriggerType" json:"trigger_type,omitempty"`
	ReportingPeriodMs int32            `protobuf:"varint,2,opt,name=reporting_period_ms,json=E2SM_RC_PRE_EventTriggerDefinition_Format1:reportingPeriod_ms,proto3" json:"reporting_period_ms,omitempty"`
}

func (x *E2SmRcPreEventTriggerDefinitionFormat1) Reset() {
	*x = E2SmRcPreEventTriggerDefinitionFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreEventTriggerDefinitionFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreEventTriggerDefinitionFormat1) ProtoMessage() {}

func (x *E2SmRcPreEventTriggerDefinitionFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreEventTriggerDefinitionFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreEventTriggerDefinitionFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{22}
}

func (x *E2SmRcPreEventTriggerDefinitionFormat1) GetTriggerType() RcPreTriggerType {
	if x != nil {
		return x.TriggerType
	}
	return RcPreTriggerType_RC_PRE_TRIGGER_TYPE_UPON_CHANGE
}

func (x *E2SmRcPreEventTriggerDefinitionFormat1) GetReportingPeriodMs() int32 {
	if x != nil {
		return x.ReportingPeriodMs
	}
	return 0
}

// sequence from e2sm-rc-pre-v1.asn1:145
type E2SmRcPreActionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicStyleType *RicStyleType `protobuf:"bytes,1,opt,name=ric_style_type,json=E2SM-RC-PRE-ActionDefinition:ric_Style_Type,proto3" json:"ric_style_type,omitempty"`
}

func (x *E2SmRcPreActionDefinition) Reset() {
	*x = E2SmRcPreActionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreActionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreActionDefinition) ProtoMessage() {}

func (x *E2SmRcPreActionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreActionDefinition.ProtoReflect.Descriptor instead.
func (*E2SmRcPreActionDefinition) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{23}
}

func (x *E2SmRcPreActionDefinition) GetRicStyleType() *RicStyleType {
	if x != nil {
		return x.RicStyleType
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:155
type E2SmRcPreIndicationHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:155
	//
	// Types that are assignable to E2SmRcPreIndicationHeader:
	//	*E2SmRcPreIndicationHeader_IndicationHeaderFormat1
	E2SmRcPreIndicationHeader isE2SmRcPreIndicationHeader_E2SmRcPreIndicationHeader `protobuf_oneof:"e2_sm_rc_pre_indication_header"`
}

func (x *E2SmRcPreIndicationHeader) Reset() {
	*x = E2SmRcPreIndicationHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreIndicationHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreIndicationHeader) ProtoMessage() {}

func (x *E2SmRcPreIndicationHeader) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreIndicationHeader.ProtoReflect.Descriptor instead.
func (*E2SmRcPreIndicationHeader) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{24}
}

func (m *E2SmRcPreIndicationHeader) GetE2SmRcPreIndicationHeader() isE2SmRcPreIndicationHeader_E2SmRcPreIndicationHeader {
	if m != nil {
		return m.E2SmRcPreIndicationHeader
	}
	return nil
}

func (x *E2SmRcPreIndicationHeader) GetIndicationHeaderFormat1() *E2SmRcPreIndicationHeaderFormat1 {
	if x, ok := x.GetE2SmRcPreIndicationHeader().(*E2SmRcPreIndicationHeader_IndicationHeaderFormat1); ok {
		return x.IndicationHeaderFormat1
	}
	return nil
}

type isE2SmRcPreIndicationHeader_E2SmRcPreIndicationHeader interface {
	isE2SmRcPreIndicationHeader_E2SmRcPreIndicationHeader()
}

type E2SmRcPreIndicationHeader_IndicationHeaderFormat1 struct {
	IndicationHeaderFormat1 *E2SmRcPreIndicationHeaderFormat1 `protobuf:"bytes,1,opt,name=indication_header_format1,json=E2SM-RC-PRE-IndicationHeader:indicationHeader_Format1,proto3,oneof"`
}

func (*E2SmRcPreIndicationHeader_IndicationHeaderFormat1) isE2SmRcPreIndicationHeader_E2SmRcPreIndicationHeader() {
}

// sequence from e2sm-rc-pre-v1.asn1:161
type E2SmRcPreIndicationHeaderFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cgi *CellGlobalId `protobuf:"bytes,1,opt,name=cgi,json=E2SM-RC-PRE-IndicationHeader-Format1:cgi,proto3" json:"cgi,omitempty"`
}

func (x *E2SmRcPreIndicationHeaderFormat1) Reset() {
	*x = E2SmRcPreIndicationHeaderFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreIndicationHeaderFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreIndicationHeaderFormat1) ProtoMessage() {}

func (x *E2SmRcPreIndicationHeaderFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreIndicationHeaderFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreIndicationHeaderFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{25}
}

func (x *E2SmRcPreIndicationHeaderFormat1) GetCgi() *CellGlobalId {
	if x != nil {
		return x.Cgi
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:171
type E2SmRcPreIndicationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:171
	//
	// Types that are assignable to E2SmRcPreIndicationMessage:
	//	*E2SmRcPreIndicationMessage_RicStyleType
	//	*E2SmRcPreIndicationMessage_IndicationMessageFormat1
	E2SmRcPreIndicationMessage isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage `protobuf_oneof:"e2_sm_rc_pre_indication_message"`
}

func (x *E2SmRcPreIndicationMessage) Reset() {
	*x = E2SmRcPreIndicationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreIndicationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreIndicationMessage) ProtoMessage() {}

func (x *E2SmRcPreIndicationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreIndicationMessage.ProtoReflect.Descriptor instead.
func (*E2SmRcPreIndicationMessage) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{26}
}

func (m *E2SmRcPreIndicationMessage) GetE2SmRcPreIndicationMessage() isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage {
	if m != nil {
		return m.E2SmRcPreIndicationMessage
	}
	return nil
}

func (x *E2SmRcPreIndicationMessage) GetRicStyleType() *RicStyleType {
	if x, ok := x.GetE2SmRcPreIndicationMessage().(*E2SmRcPreIndicationMessage_RicStyleType); ok {
		return x.RicStyleType
	}
	return nil
}

func (x *E2SmRcPreIndicationMessage) GetIndicationMessageFormat1() *E2SmRcPreIndicationMessageFormat1 {
	if x, ok := x.GetE2SmRcPreIndicationMessage().(*E2SmRcPreIndicationMessage_IndicationMessageFormat1); ok {
		return x.IndicationMessageFormat1
	}
	return nil
}

type isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage interface {
	isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage()
}

type E2SmRcPreIndicationMessage_RicStyleType struct {
	RicStyleType *RicStyleType `protobuf:"bytes,1,opt,name=ric_style_type,json=E2SM-RC-PRE-IndicationMessage:ric_Style_Type,proto3,oneof"`
}

type E2SmRcPreIndicationMessage_IndicationMessageFormat1 struct {
	IndicationMessageFormat1 *E2SmRcPreIndicationMessageFormat1 `protobuf:"bytes,2,opt,name=indication_message_format1,json=E2SM-RC-PRE-IndicationMessage:indicationMessage_Format1,proto3,oneof"`
}

func (*E2SmRcPreIndicationMessage_RicStyleType) isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage() {
}

func (*E2SmRcPreIndicationMessage_IndicationMessageFormat1) isE2SmRcPreIndicationMessage_E2SmRcPreIndicationMessage() {
}

// sequence from e2sm-rc-pre-v1.asn1:178
type E2SmRcPreIndicationMessageFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cgi       *CellGlobalId `protobuf:"bytes,1,opt,name=cgi,json=E2SM-RC-PRE-IndicationMessage-Format1:cgi,proto3" json:"cgi,omitempty"`
	DlEarfcn  *Earfcn       `protobuf:"bytes,2,opt,name=dl_earfcn,json=E2SM-RC-PRE-IndicationMessage-Format1:dl_EARFCN,proto3" json:"dl_earfcn,omitempty"`
	CellSize  CellSize      `protobuf:"varint,3,opt,name=cell_size,json=E2SM-RC-PRE-IndicationMessage-Format1:cell_Size,proto3,enum=e2sm_rc_pre.v1.CellSize" json:"cell_size,omitempty"`
	PciPool   []*PciRange   `protobuf:"bytes,4,rep,name=pci_pool,json=E2SM-RC-PRE-IndicationMessage-Format1:pci_Pool,proto3" json:"pci_pool,omitempty"`
	Pci       *Pci          `protobuf:"bytes,5,opt,name=pci,json=E2SM-RC-PRE-IndicationMessage-Format1:pci,proto3" json:"pci,omitempty"`
	Neighbors []*Nrt        `protobuf:"bytes,6,rep,name=neighbors,json=E2SM-RC-PRE-IndicationMessage-Format1:neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *E2SmRcPreIndicationMessageFormat1) Reset() {
	*x = E2SmRcPreIndicationMessageFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreIndicationMessageFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreIndicationMessageFormat1) ProtoMessage() {}

func (x *E2SmRcPreIndicationMessageFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreIndicationMessageFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreIndicationMessageFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{27}
}

func (x *E2SmRcPreIndicationMessageFormat1) GetCgi() *CellGlobalId {
	if x != nil {
		return x.Cgi
	}
	return nil
}

func (x *E2SmRcPreIndicationMessageFormat1) GetDlEarfcn() *Earfcn {
	if x != nil {
		return x.DlEarfcn
	}
	return nil
}

func (x *E2SmRcPreIndicationMessageFormat1) GetCellSize() CellSize {
	if x != nil {
		return x.CellSize
	}
	return CellSize_CELL_SIZE_FEMTO
}

func (x *E2SmRcPreIndicationMessageFormat1) GetPciPool() []*PciRange {
	if x != nil {
		return x.PciPool
	}
	return nil
}

func (x *E2SmRcPreIndicationMessageFormat1) GetPci() *Pci {
	if x != nil {
		return x.Pci
	}
	return nil
}

func (x *E2SmRcPreIndicationMessageFormat1) GetNeighbors() []*Nrt {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:188
type Nrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrIndex  int32         `protobuf:"varint,1,opt,name=nr_index,json=NRT:nrIndex,proto3" json:"nr_index,omitempty"`
	Cgi      *CellGlobalId `protobuf:"bytes,2,opt,name=cgi,json=NRT:cgi,proto3" json:"cgi,omitempty"`
	DlEarfcn *Earfcn       `protobuf:"bytes,3,opt,name=dl_earfcn,json=NRT:dl_EARFCN,proto3" json:"dl_earfcn,omitempty"`
	CellSize CellSize      `protobuf:"varint,4,opt,name=cell_size,json=NRT:cell_Size,proto3,enum=e2sm_rc_pre.v1.CellSize" json:"cell_size,omitempty"`
	Pci      *Pci          `protobuf:"bytes,5,opt,name=pci,json=NRT:pci,proto3" json:"pci,omitempty"`
}

func (x *Nrt) Reset() {
	*x = Nrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nrt) ProtoMessage() {}

func (x *Nrt) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nrt.ProtoReflect.Descriptor instead.
func (*Nrt) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{28}
}

func (x *Nrt) GetNrIndex() int32 {
	if x != nil {
		return x.NrIndex
	}
	return 0
}

func (x *Nrt) GetCgi() *CellGlobalId {
	if x != nil {
		return x.Cgi
	}
	return nil
}

func (x *Nrt) GetDlEarfcn() *Earfcn {
	if x != nil {
		return x.DlEarfcn
	}
	return nil
}

func (x *Nrt) GetCellSize() CellSize {
	if x != nil {
		return x.CellSize
	}
	return CellSize_CELL_SIZE_FEMTO
}

func (x *Nrt) GetPci() *Pci {
	if x != nil {
		return x.Pci
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:202
type E2SmRcPreControlHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:202
	//
	// Types that are assignable to E2SmRcPreControlHeader:
	//	*E2SmRcPreControlHeader_ControlHeaderFormat1
	E2SmRcPreControlHeader isE2SmRcPreControlHeader_E2SmRcPreControlHeader `protobuf_oneof:"e2_sm_rc_pre_control_header"`
}

func (x *E2SmRcPreControlHeader) Reset() {
	*x = E2SmRcPreControlHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlHeader) ProtoMessage() {}

func (x *E2SmRcPreControlHeader) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlHeader.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlHeader) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{29}
}

func (m *E2SmRcPreControlHeader) GetE2SmRcPreControlHeader() isE2SmRcPreControlHeader_E2SmRcPreControlHeader {
	if m != nil {
		return m.E2SmRcPreControlHeader
	}
	return nil
}

func (x *E2SmRcPreControlHeader) GetControlHeaderFormat1() *E2SmRcPreControlHeaderFormat1 {
	if x, ok := x.GetE2SmRcPreControlHeader().(*E2SmRcPreControlHeader_ControlHeaderFormat1); ok {
		return x.ControlHeaderFormat1
	}
	return nil
}

type isE2SmRcPreControlHeader_E2SmRcPreControlHeader interface {
	isE2SmRcPreControlHeader_E2SmRcPreControlHeader()
}

type E2SmRcPreControlHeader_ControlHeaderFormat1 struct {
	ControlHeaderFormat1 *E2SmRcPreControlHeaderFormat1 `protobuf:"bytes,1,opt,name=control_header_format1,json=E2SM-RC-PRE-ControlHeader:controlHeader-Format1,proto3,oneof"`
}

func (*E2SmRcPreControlHeader_ControlHeaderFormat1) isE2SmRcPreControlHeader_E2SmRcPreControlHeader() {
}

// sequence from e2sm-rc-pre-v1.asn1:208
type E2SmRcPreControlHeaderFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cgi                       *CellGlobalId              `protobuf:"bytes,1,opt,name=cgi,json=E2SM-RC-PRE-ControlHeader-Format1:cgi,proto3" json:"cgi,omitempty"`
	RcCommand                 RcPreCommand               `protobuf:"varint,2,opt,name=rc_command,json=E2SM-RC-PRE-ControlHeader-Format1:rc-command,proto3,enum=e2sm_rc_pre.v1.RcPreCommand" json:"rc_command,omitempty"`
	RicControlMessagePriority *RicControlMessagePriority `protobuf:"bytes,3,opt,name=ric_control_message_priority,json=E2SM-RC-PRE-ControlHeader-Format1:ric-Control-Message-Priority,proto3" json:"ric_control_message_priority,omitempty"`
}

func (x *E2SmRcPreControlHeaderFormat1) Reset() {
	*x = E2SmRcPreControlHeaderFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlHeaderFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlHeaderFormat1) ProtoMessage() {}

func (x *E2SmRcPreControlHeaderFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlHeaderFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlHeaderFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{30}
}

func (x *E2SmRcPreControlHeaderFormat1) GetCgi() *CellGlobalId {
	if x != nil {
		return x.Cgi
	}
	return nil
}

func (x *E2SmRcPreControlHeaderFormat1) GetRcCommand() RcPreCommand {
	if x != nil {
		return x.RcCommand
	}
	return RcPreCommand_RC_PRE_COMMAND_SET_PARAMETERS
}

func (x *E2SmRcPreControlHeaderFormat1) GetRicControlMessagePriority() *RicControlMessagePriority {
	if x != nil {
		return x.RicControlMessagePriority
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:223
type E2SmRcPreControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:223
	//
	// Types that are assignable to E2SmRcPreControlMessage:
	//	*E2SmRcPreControlMessage_ControlMessage
	E2SmRcPreControlMessage isE2SmRcPreControlMessage_E2SmRcPreControlMessage `protobuf_oneof:"e2_sm_rc_pre_control_message"`
}

func (x *E2SmRcPreControlMessage) Reset() {
	*x = E2SmRcPreControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlMessage) ProtoMessage() {}

func (x *E2SmRcPreControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlMessage.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlMessage) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{31}
}

func (m *E2SmRcPreControlMessage) GetE2SmRcPreControlMessage() isE2SmRcPreControlMessage_E2SmRcPreControlMessage {
	if m != nil {
		return m.E2SmRcPreControlMessage
	}
	return nil
}

func (x *E2SmRcPreControlMessage) GetControlMessage() *E2SmRcPreControlMessageFormat1 {
	if x, ok := x.GetE2SmRcPreControlMessage().(*E2SmRcPreControlMessage_ControlMessage); ok {
		return x.ControlMessage
	}
	return nil
}

type isE2SmRcPreControlMessage_E2SmRcPreControlMessage interface {
	isE2SmRcPreControlMessage_E2SmRcPreControlMessage()
}

type E2SmRcPreControlMessage_ControlMessage struct {
	ControlMessage *E2SmRcPreControlMessageFormat1 `protobuf:"bytes,1,opt,name=control_message,json=E2SM-RC-PRE-ControlMessage:controlMessage,proto3,oneof"`
}

func (*E2SmRcPreControlMessage_ControlMessage) isE2SmRcPreControlMessage_E2SmRcPreControlMessage() {}

// sequence from e2sm-rc-pre-v1.asn1:229
type E2SmRcPreControlMessageFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterType *RanparameterDefItem `protobuf:"bytes,1,opt,name=parameter_type,json=E2SM-RC-PRE-ControlMessage-Format1:parameterType,proto3" json:"parameter_type,omitempty"`
	ParameterVal  *RanparameterValue   `protobuf:"bytes,2,opt,name=parameter_val,json=E2SM-RC-PRE-ControlMessage-Format1:parameterVal,proto3" json:"parameter_val,omitempty"`
}

func (x *E2SmRcPreControlMessageFormat1) Reset() {
	*x = E2SmRcPreControlMessageFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlMessageFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlMessageFormat1) ProtoMessage() {}

func (x *E2SmRcPreControlMessageFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlMessageFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlMessageFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{32}
}

func (x *E2SmRcPreControlMessageFormat1) GetParameterType() *RanparameterDefItem {
	if x != nil {
		return x.ParameterType
	}
	return nil
}

func (x *E2SmRcPreControlMessageFormat1) GetParameterVal() *RanparameterValue {
	if x != nil {
		return x.ParameterVal
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:240
type E2SmRcPreControlOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice from e2sm-rc-pre-v1.asn1:240
	//
	// Types that are assignable to E2SmRcPreControlOutcome:
	//	*E2SmRcPreControlOutcome_ControlOutcomeFormat1
	E2SmRcPreControlOutcome isE2SmRcPreControlOutcome_E2SmRcPreControlOutcome `protobuf_oneof:"e2_sm_rc_pre_control_outcome"`
}

func (x *E2SmRcPreControlOutcome) Reset() {
	*x = E2SmRcPreControlOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlOutcome) ProtoMessage() {}

func (x *E2SmRcPreControlOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlOutcome.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlOutcome) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{33}
}

func (m *E2SmRcPreControlOutcome) GetE2SmRcPreControlOutcome() isE2SmRcPreControlOutcome_E2SmRcPreControlOutcome {
	if m != nil {
		return m.E2SmRcPreControlOutcome
	}
	return nil
}

func (x *E2SmRcPreControlOutcome) GetControlOutcomeFormat1() *E2SmRcPreControlOutcomeFormat1 {
	if x, ok := x.GetE2SmRcPreControlOutcome().(*E2SmRcPreControlOutcome_ControlOutcomeFormat1); ok {
		return x.ControlOutcomeFormat1
	}
	return nil
}

type isE2SmRcPreControlOutcome_E2SmRcPreControlOutcome interface {
	isE2SmRcPreControlOutcome_E2SmRcPreControlOutcome()
}

type E2SmRcPreControlOutcome_ControlOutcomeFormat1 struct {
	ControlOutcomeFormat1 *E2SmRcPreControlOutcomeFormat1 `protobuf:"bytes,1,opt,name=control_outcome_format1,json=E2SM-RC-PRE-ControlOutcome:controlOutcome-Format1,proto3,oneof"`
}

func (*E2SmRcPreControlOutcome_ControlOutcomeFormat1) isE2SmRcPreControlOutcome_E2SmRcPreControlOutcome() {
}

// sequence from e2sm-rc-pre-v1.asn1:246
type E2SmRcPreControlOutcomeFormat1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeElementList []*RanparameterItem `protobuf:"bytes,1,rep,name=outcome_element_list,json=E2SM-RC-PRE-ControlOutcome-Format1:outcomeElement-List,proto3" json:"outcome_element_list,omitempty"`
}

func (x *E2SmRcPreControlOutcomeFormat1) Reset() {
	*x = E2SmRcPreControlOutcomeFormat1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreControlOutcomeFormat1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreControlOutcomeFormat1) ProtoMessage() {}

func (x *E2SmRcPreControlOutcomeFormat1) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreControlOutcomeFormat1.ProtoReflect.Descriptor instead.
func (*E2SmRcPreControlOutcomeFormat1) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{34}
}

func (x *E2SmRcPreControlOutcomeFormat1) GetOutcomeElementList() []*RanparameterItem {
	if x != nil {
		return x.OutcomeElementList
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:256
type E2SmRcPreRanfunctionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanFunctionName          *RanfunctionName                                             `protobuf:"bytes,1,opt,name=ran_function_name,json=E2SM_RC_PRE_RANfunction_Description:ranFunction_Name,proto3" json:"ran_function_name,omitempty"`
	E2SmRcPreRanfunctionItem *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 `protobuf:"bytes,2,opt,name=e2_sm_rc_pre_ranfunction_item,json=E2SM_RC_PRE_RANfunction_Description:e2SM_RC_PRE_RANfunction_Item,proto3" json:"e2_sm_rc_pre_ranfunction_item,omitempty"`
}

func (x *E2SmRcPreRanfunctionDescription) Reset() {
	*x = E2SmRcPreRanfunctionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreRanfunctionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreRanfunctionDescription) ProtoMessage() {}

func (x *E2SmRcPreRanfunctionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreRanfunctionDescription.ProtoReflect.Descriptor instead.
func (*E2SmRcPreRanfunctionDescription) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{35}
}

func (x *E2SmRcPreRanfunctionDescription) GetRanFunctionName() *RanfunctionName {
	if x != nil {
		return x.RanFunctionName
	}
	return nil
}

func (x *E2SmRcPreRanfunctionDescription) GetE2SmRcPreRanfunctionItem() *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 {
	if x != nil {
		return x.E2SmRcPreRanfunctionItem
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:266
type RanfunctionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanFunctionShortName   string `protobuf:"bytes,1,opt,name=ran_function_short_name,json=RANfunction_Name:ranFunction_ShortName,proto3" json:"ran_function_short_name,omitempty"`
	RanFunctionE2SmOid     string `protobuf:"bytes,2,opt,name=ran_function_e2_sm_oid,json=RANfunction_Name:ranFunction_E2SM_OID,proto3" json:"ran_function_e2_sm_oid,omitempty"`
	RanFunctionDescription string `protobuf:"bytes,3,opt,name=ran_function_description,json=RANfunction_Name:ranFunction_Description,proto3" json:"ran_function_description,omitempty"`
	RanFunctionInstance    int32  `protobuf:"varint,4,opt,name=ran_function_instance,json=RANfunction_Name:ranFunction_Instance,proto3" json:"ran_function_instance,omitempty"`
}

func (x *RanfunctionName) Reset() {
	*x = RanfunctionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanfunctionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanfunctionName) ProtoMessage() {}

func (x *RanfunctionName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanfunctionName.ProtoReflect.Descriptor instead.
func (*RanfunctionName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{36}
}

func (x *RanfunctionName) GetRanFunctionShortName() string {
	if x != nil {
		return x.RanFunctionShortName
	}
	return ""
}

func (x *RanfunctionName) GetRanFunctionE2SmOid() string {
	if x != nil {
		return x.RanFunctionE2SmOid
	}
	return ""
}

func (x *RanfunctionName) GetRanFunctionDescription() string {
	if x != nil {
		return x.RanFunctionDescription
	}
	return ""
}

func (x *RanfunctionName) GetRanFunctionInstance() int32 {
	if x != nil {
		return x.RanFunctionInstance
	}
	return 0
}

// sequence from e2sm-rc-pre-v1.asn1:274
type RicEventTriggerStyleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerStyleType  *RicStyleType  `protobuf:"bytes,1,opt,name=ric_event_trigger_style_type,json=RIC_EventTriggerStyle_List:ric_EventTriggerStyle_Type,proto3" json:"ric_event_trigger_style_type,omitempty"`
	RicEventTriggerStyleName  *RicStyleName  `protobuf:"bytes,2,opt,name=ric_event_trigger_style_name,json=RIC_EventTriggerStyle_List:ric_EventTriggerStyle_Name,proto3" json:"ric_event_trigger_style_name,omitempty"`
	RicEventTriggerFormatType *RicFormatType `protobuf:"bytes,3,opt,name=ric_event_trigger_format_type,json=RIC_EventTriggerStyle_List:ric_EventTriggerFormat_Type,proto3" json:"ric_event_trigger_format_type,omitempty"`
}

func (x *RicEventTriggerStyleList) Reset() {
	*x = RicEventTriggerStyleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicEventTriggerStyleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicEventTriggerStyleList) ProtoMessage() {}

func (x *RicEventTriggerStyleList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicEventTriggerStyleList.ProtoReflect.Descriptor instead.
func (*RicEventTriggerStyleList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{37}
}

func (x *RicEventTriggerStyleList) GetRicEventTriggerStyleType() *RicStyleType {
	if x != nil {
		return x.RicEventTriggerStyleType
	}
	return nil
}

func (x *RicEventTriggerStyleList) GetRicEventTriggerStyleName() *RicStyleName {
	if x != nil {
		return x.RicEventTriggerStyleName
	}
	return nil
}

func (x *RicEventTriggerStyleList) GetRicEventTriggerFormatType() *RicFormatType {
	if x != nil {
		return x.RicEventTriggerFormatType
	}
	return nil
}

// sequence from e2sm-rc-pre-v1.asn1:281
type RicReportStyleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicReportStyleType             *RicStyleType  `protobuf:"bytes,1,opt,name=ric_report_style_type,json=RIC_ReportStyle_List:ric_ReportStyle_Type,proto3" json:"ric_report_style_type,omitempty"`
	RicReportStyleName             *RicStyleName  `protobuf:"bytes,2,opt,name=ric_report_style_name,json=RIC_ReportStyle_List:ric_ReportStyle_Name,proto3" json:"ric_report_style_name,omitempty"`
	RicIndicationHeaderFormatType  *RicFormatType `protobuf:"bytes,3,opt,name=ric_indication_header_format_type,json=RIC_ReportStyle_List:ric_IndicationHeaderFormat_Type,proto3" json:"ric_indication_header_format_type,omitempty"`
	RicIndicationMessageFormatType *RicFormatType `protobuf:"bytes,4,opt,name=ric_indication_message_format_type,json=RIC_ReportStyle_List:ric_IndicationMessageFormat_Type,proto3" json:"ric_indication_message_format_type,omitempty"`
}

func (x *RicReportStyleList) Reset() {
	*x = RicReportStyleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicReportStyleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicReportStyleList) ProtoMessage() {}

func (x *RicReportStyleList) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicReportStyleList.ProtoReflect.Descriptor instead.
func (*RicReportStyleList) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{38}
}

func (x *RicReportStyleList) GetRicReportStyleType() *RicStyleType {
	if x != nil {
		return x.RicReportStyleType
	}
	return nil
}

func (x *RicReportStyleList) GetRicReportStyleName() *RicStyleName {
	if x != nil {
		return x.RicReportStyleName
	}
	return nil
}

func (x *RicReportStyleList) GetRicIndicationHeaderFormatType() *RicFormatType {
	if x != nil {
		return x.RicIndicationHeaderFormatType
	}
	return nil
}

func (x *RicReportStyleList) GetRicIndicationMessageFormatType() *RicFormatType {
	if x != nil {
		return x.RicIndicationMessageFormatType
	}
	return nil
}

type RanparameterName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,json=RANparameter-Name:value,proto3" json:"value,omitempty"`
}

func (x *RanparameterName) Reset() {
	*x = RanparameterName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanparameterName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanparameterName) ProtoMessage() {}

func (x *RanparameterName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanparameterName.ProtoReflect.Descriptor instead.
func (*RanparameterName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{39}
}

func (x *RanparameterName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RicStyleName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,json=RIC-Style-Name:value,proto3" json:"value,omitempty"`
}

func (x *RicStyleName) Reset() {
	*x = RicStyleName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RicStyleName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RicStyleName) ProtoMessage() {}

func (x *RicStyleName) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RicStyleName.ProtoReflect.Descriptor instead.
func (*RicStyleName) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{40}
}

func (x *RicStyleName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PlmnIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,json=PLMN-Identity:value,proto3" json:"value,omitempty"`
}

func (x *PlmnIdentity) Reset() {
	*x = PlmnIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlmnIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlmnIdentity) ProtoMessage() {}

func (x *PlmnIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlmnIdentity.ProtoReflect.Descriptor instead.
func (*PlmnIdentity) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{41}
}

func (x *PlmnIdentity) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EutracellIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *BitString `protobuf:"bytes,1,opt,name=value,json=EUTRACellIdentity:value,proto3" json:"value,omitempty"` //28
}

func (x *EutracellIdentity) Reset() {
	*x = EutracellIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EutracellIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EutracellIdentity) ProtoMessage() {}

func (x *EutracellIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EutracellIdentity.ProtoReflect.Descriptor instead.
func (*EutracellIdentity) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{42}
}

func (x *EutracellIdentity) GetValue() *BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

type NrcellIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *BitString `protobuf:"bytes,1,opt,name=value,json=NRCellIdentity:value,proto3" json:"value,omitempty"` //36
}

func (x *NrcellIdentity) Reset() {
	*x = NrcellIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NrcellIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NrcellIdentity) ProtoMessage() {}

func (x *NrcellIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NrcellIdentity.ProtoReflect.Descriptor instead.
func (*NrcellIdentity) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{43}
}

func (x *NrcellIdentity) GetValue() *BitString {
	if x != nil {
		return x.Value
	}
	return nil
}

type BitString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,json=BIT_STRING:value,proto3" json:"value,omitempty"`
	Len   uint32 `protobuf:"varint,2,opt,name=len,json=BIT_STRING:len,proto3" json:"len,omitempty"`
}

func (x *BitString) Reset() {
	*x = BitString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitString) ProtoMessage() {}

func (x *BitString) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitString.ProtoReflect.Descriptor instead.
func (*BitString) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{44}
}

func (x *BitString) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BitString) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RicEventTriggerStyleList []*RicEventTriggerStyleList `protobuf:"bytes,1,rep,name=ric_event_trigger_style_list,json=E2SM_RC_PRE_RANfunction_Description__e2SM_RC_PRE_RANfunction_Item:ric_EventTriggerStyle_List,proto3" json:"ric_event_trigger_style_list,omitempty"`
	RicReportStyleList       []*RicReportStyleList       `protobuf:"bytes,2,rep,name=ric_report_style_list,json=E2SM_RC_PRE_RANfunction_Description__e2SM_RC_PRE_RANfunction_Item:ric_ReportStyle_List,proto3" json:"ric_report_style_list,omitempty"`
}

func (x *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) Reset() {
	*x = E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001{}
	if protoimpl.UnsafeEnabled {
		mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) ProtoMessage() {}

func (x *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) ProtoReflect() protoreflect.Message {
	mi := &file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001.ProtoReflect.Descriptor instead.
func (*E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) Descriptor() ([]byte, []int) {
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP(), []int{35, 0}
}

func (x *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) GetRicEventTriggerStyleList() []*RicEventTriggerStyleList {
	if x != nil {
		return x.RicEventTriggerStyleList
	}
	return nil
}

func (x *E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001) GetRicReportStyleList() []*RicReportStyleList {
	if x != nil {
		return x.RicReportStyleList
	}
	return nil
}

var File_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto protoreflect.FileDescriptor

var file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63, 0x67, 0x69, 0x12,
	0x4c, 0x0a, 0x0e, 0x70, 0x5f, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x16, 0x45, 0x55, 0x54, 0x52, 0x41, 0x43, 0x47, 0x49, 0x3a,
	0x70, 0x4c, 0x4d, 0x4e, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a,
	0x13, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x75, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x1a, 0x45,
	0x55, 0x54, 0x52, 0x41, 0x43, 0x47, 0x49, 0x3a, 0x65, 0x55, 0x54, 0x52, 0x41, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x05, 0x4e, 0x72,
	0x63, 0x67, 0x69, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x5f, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6d,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x13, 0x4e, 0x52, 0x43, 0x47, 0x49,
	0x3a, 0x70, 0x4c, 0x4d, 0x4e, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x10, 0x6e, 0x5f, 0x72, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x14, 0x4e, 0x52, 0x43, 0x47, 0x49, 0x3a,
	0x6e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa6,
	0x01, 0x0a, 0x0c, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x6e, 0x72, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x72, 0x63, 0x67, 0x69, 0x48, 0x00, 0x52, 0x13, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x3a, 0x6e, 0x72, 0x5f, 0x43, 0x47, 0x49, 0x12, 0x46, 0x0a,
	0x0a, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63, 0x67, 0x69, 0x48, 0x00, 0x52, 0x16, 0x43,
	0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x3a, 0x65, 0x55, 0x54, 0x52,
	0x41, 0x5f, 0x43, 0x47, 0x49, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x06, 0x45, 0x61, 0x72, 0x66, 0x63,
	0x6e, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x0f, 0x28, 0x00, 0x52, 0x0c, 0x45,
	0x41, 0x52, 0x46, 0x43, 0x4e, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x03, 0x50,
	0x63, 0x69, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf7, 0x03, 0x28, 0x00, 0x52, 0x09, 0x50,
	0x43, 0x49, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x50, 0x63, 0x69,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70,
	0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x52, 0x13, 0x50,
	0x43, 0x49, 0x2d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70,
	0x63, 0x69, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x52, 0x13, 0x50, 0x43, 0x49, 0x2d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x22,
	0x54, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x08, 0x0f, 0x52, 0x1f, 0x4d, 0x61, 0x78, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x6f, 0x66, 0x52, 0x69,
	0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x08, 0x3f, 0x52,
	0x14, 0x4d, 0x61, 0x78, 0x6f, 0x66, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x6d, 0x6e,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x08, 0x0c, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x50, 0x4c, 0x4d,
	0x4e, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x4e, 0x72,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03, 0x08, 0x80, 0x20, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4e, 0x52,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x45, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x0f, 0x52, 0x0f, 0x4d,
	0x61, 0x78, 0x45, 0x41, 0x52, 0x46, 0x43, 0x4e, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f,
	0x0a, 0x06, 0x4d, 0x61, 0x78, 0x50, 0x63, 0x69, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03, 0x08, 0xf7,
	0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x50, 0x43, 0x49, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x38, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x08, 0x64, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x50, 0x43, 0x49, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x4d, 0x61, 0x78,
	0x6f, 0x66, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x4f, 0x66,
	0x52, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x0c, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x52, 0x49, 0x43, 0x2d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0d, 0x52, 0x69, 0x63, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x52, 0x49, 0x43, 0x2d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4e, 0x0a, 0x19, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x52, 0x49, 0x43,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x21,
	0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x3a, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x49,
	0x44, 0x12, 0x64, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x24, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x49, 0x74, 0x65, 0x6d, 0x3a, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18,
	0xff, 0xff, 0x03, 0x28, 0x00, 0x52, 0x15, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2d, 0x49, 0x44, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x02, 0x0a,
	0x11, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1b, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1c, 0x52, 0x41, 0x4e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x1c,
	0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c,
	0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x74, 0x53, 0x12, 0x33, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x63, 0x74, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x1c, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x63, 0x74,
	0x53, 0x12, 0x33, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x74, 0x5f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x72, 0x74, 0x53, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x02, 0x0a,
	0x13, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x24,
	0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x5f,
	0x49, 0x74, 0x65, 0x6d, 0x3a, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x49, 0x44, 0x12, 0x64, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x26, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x72, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x72, 0x61,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x26, 0x52, 0x41, 0x4e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x72,
	0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9f, 0x02, 0x0a, 0x1f, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48,
	0x00, 0x52, 0x5e, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52,
	0x45, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x42, 0x3f, 0x0a, 0x3d, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x26, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x6e, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x63, 0x50, 0x72, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x36, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50,
	0x52, 0x45, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x3a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x3d, 0x45, 0x32, 0x53, 0x4d,
	0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x22, 0x7e, 0x0a, 0x19, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x2b, 0x45, 0x32,
	0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52,
	0x35, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x20, 0x0a, 0x1e, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x20, 0x45, 0x32, 0x53, 0x6d,
	0x52, 0x63, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x53, 0x0a, 0x03,
	0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x28, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43,
	0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x63, 0x67,
	0x69, 0x22, 0xb8, 0x02, 0x0a, 0x1a, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x64, 0x0a, 0x0e, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f,
	0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x2c, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52,
	0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00,
	0x52, 0x37, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x21, 0x0a, 0x1f, 0x65, 0x32, 0x5f,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xce, 0x04, 0x0a,
	0x21, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x31, 0x12, 0x54, 0x0a, 0x03, 0x63, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x29, 0x45,
	0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x3a, 0x63, 0x67, 0x69, 0x12, 0x5a, 0x0a, 0x09, 0x64, 0x6c, 0x5f, 0x65,
	0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x52, 0x2f, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45,
	0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x64, 0x6c, 0x5f, 0x45, 0x41,
	0x52, 0x46, 0x43, 0x4e, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x2f, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x70, 0x63, 0x69, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x2e, 0x45, 0x32, 0x53, 0x4d,
	0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x3a, 0x70, 0x63, 0x69, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x03, 0x70, 0x63,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x52, 0x29, 0x45, 0x32,
	0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x3a, 0x70, 0x63, 0x69, 0x12, 0x64, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x32, 0x73,
	0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x72, 0x74, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x20, 0x52, 0x2f, 0x45, 0x32,
	0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x3a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0xf9, 0x01,
	0x0a, 0x03, 0x4e, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x52, 0x54, 0x3a, 0x6e, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x03, 0x63, 0x67, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x52,
	0x07, 0x4e, 0x52, 0x54, 0x3a, 0x63, 0x67, 0x69, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6c, 0x5f, 0x65,
	0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x52, 0x0d, 0x4e, 0x52, 0x54, 0x3a, 0x64, 0x6c, 0x5f, 0x45, 0x41, 0x52, 0x46,
	0x43, 0x4e, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x0d, 0x4e, 0x52, 0x54, 0x3a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x32,
	0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69,
	0x52, 0x07, 0x4e, 0x52, 0x54, 0x3a, 0x70, 0x63, 0x69, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x45, 0x32,
	0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x2f, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d,
	0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x1d, 0x0a, 0x1b, 0x65, 0x32, 0x5f, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xe3, 0x02, 0x0a, 0x1d, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x12, 0x50, 0x0a, 0x03, 0x63, 0x67, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x49, 0x64, 0x52, 0x25, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x63, 0x67, 0x69, 0x12, 0x5e, 0x0a, 0x0a, 0x72, 0x63,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x2c, 0x45, 0x32,
	0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a,
	0x72, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x3e, 0x45, 0x32,
	0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a,
	0x72, 0x69, 0x63, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xaf, 0x01, 0x0a,
	0x17, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x48, 0x00, 0x52, 0x29, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45,
	0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1e,
	0x0a, 0x1c, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfa,
	0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x12, 0x6d, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x30,
	0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x31, 0x3a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x69, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x2f, 0x45, 0x32, 0x53, 0x4d,
	0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x3a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x17,
	0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52,
	0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x48, 0x00, 0x52, 0x31, 0x45, 0x32, 0x53,
	0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x42, 0x1e,
	0x0a, 0x1c, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x1e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x31, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0xff, 0xff, 0x03,
	0x52, 0x36, 0x45, 0x32, 0x53, 0x4d, 0x2d, 0x52, 0x43, 0x2d, 0x50, 0x52, 0x45, 0x2d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x3a, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x1f, 0x45, 0x32, 0x53,
	0x6d, 0x52, 0x63, 0x50, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x11,
	0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x34, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52,
	0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x61,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xb4,
	0x01, 0x0a, 0x1d, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63,
	0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63, 0x50, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x30, 0x30, 0x31, 0x52, 0x40, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45,
	0x5f, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x65, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x80, 0x03, 0x0a, 0x1b, 0x45, 0x32, 0x53, 0x6d, 0x52, 0x63,
	0x50, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x30, 0x30, 0x31, 0x12, 0xb8, 0x01, 0x0a, 0x1c, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x3f, 0x52, 0x5c, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x65, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0xa5, 0x01, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x3f,
	0x52, 0x56, 0x45, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x41,
	0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x65, 0x32, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x5f, 0x50,
	0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49,
	0x74, 0x65, 0x6d, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x6e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x17,
	0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x96, 0x01, 0x52, 0x26, 0x52, 0x41, 0x4e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x72, 0x61, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x32, 0x5f, 0x73, 0x6d, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xe8, 0x07, 0x52, 0x25, 0x52,
	0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x3a,
	0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x32, 0x53, 0x4d,
	0x5f, 0x4f, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x96, 0x01, 0x52, 0x28, 0x52, 0x41, 0x4e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x72, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x15,
	0x72, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x52, 0x41, 0x4e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x72, 0x61,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x18, 0x52, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x79, 0x0a, 0x1c, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x35, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a,
	0x72, 0x69, 0x63, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x72, 0x69,
	0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x35,
	0x52, 0x49, 0x43, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x36, 0x52, 0x49, 0x43,
	0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x12, 0x52, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x72, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d,
	0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x29, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69,
	0x63, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x29, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x21, 0x72, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x34, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69, 0x63, 0x5f, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x72,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x35, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x72, 0x69, 0x63,
	0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a,
	0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x96, 0x01, 0x52, 0x17, 0x52, 0x41,
	0x4e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0c, 0x52, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x96, 0x01,
	0x52, 0x14, 0x52, 0x49, 0x43, 0x2d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x0c, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02, 0x68, 0x03, 0x52, 0x13,
	0x50, 0x4c, 0x4d, 0x4e, 0x2d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x45, 0x75, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x17, 0x45, 0x55, 0x54, 0x52, 0x41, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x0e, 0x4e,
	0x72, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x4e, 0x52, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a,
	0x09, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x42, 0x49, 0x54, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18,
	0x40, 0x52, 0x0e, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x3a, 0x6c, 0x65,
	0x6e, 0x2a, 0x6b, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x46, 0x45, 0x4d, 0x54, 0x4f,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x4f, 0x4f,
	0x52, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x52, 0x4f, 0x10, 0x03, 0x2a, 0xe0,
	0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41,
	0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x41, 0x4e, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x41, 0x4e,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x2a, 0x59, 0x0a, 0x10, 0x52, 0x63, 0x50, 0x72, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x4f,
	0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x43,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0c,
	0x52, 0x63, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x00, 0x42,
	0x5d, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6e,
	0x6f, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x65,
	0x32, 0x2d, 0x73, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x65, 0x32, 0x73, 0x6d, 0x5f, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x32, 0x73, 0x6d, 0x2d, 0x72, 0x63, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x69, 0x65,
	0x73, 0x3b, 0x65, 0x32, 0x73, 0x6d, 0x72, 0x63, 0x70, 0x72, 0x65, 0x69, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescOnce sync.Once
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescData = file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDesc
)

func file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescGZIP() []byte {
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescOnce.Do(func() {
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescData = protoimpl.X.CompressGZIP(file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescData)
	})
	return file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDescData
}

var file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_goTypes = []interface{}{
	(CellSize)(0),                                  // 0: e2sm_rc_pre.v1.CellSize
	(RanparameterType)(0),                          // 1: e2sm_rc_pre.v1.RanparameterType
	(RcPreTriggerType)(0),                          // 2: e2sm_rc_pre.v1.RcPreTriggerType
	(RcPreCommand)(0),                              // 3: e2sm_rc_pre.v1.RcPreCommand
	(*Eutracgi)(nil),                               // 4: e2sm_rc_pre.v1.Eutracgi
	(*Nrcgi)(nil),                                  // 5: e2sm_rc_pre.v1.Nrcgi
	(*CellGlobalId)(nil),                           // 6: e2sm_rc_pre.v1.CellGlobalId
	(*Earfcn)(nil),                                 // 7: e2sm_rc_pre.v1.Earfcn
	(*Pci)(nil),                                    // 8: e2sm_rc_pre.v1.Pci
	(*PciRange)(nil),                               // 9: e2sm_rc_pre.v1.PciRange
	(*MaxofMessageProtocolTests)(nil),              // 10: e2sm_rc_pre.v1.MaxofMessageProtocolTests
	(*MaxofRicstyles)(nil),                         // 11: e2sm_rc_pre.v1.MaxofRicstyles
	(*MaxPlmn)(nil),                                // 12: e2sm_rc_pre.v1.MaxPlmn
	(*MaxNr)(nil),                                  // 13: e2sm_rc_pre.v1.MaxNr
	(*MaxEarfcn)(nil),                              // 14: e2sm_rc_pre.v1.MaxEarfcn
	(*MaxPci)(nil),                                 // 15: e2sm_rc_pre.v1.MaxPci
	(*MaxPciRange)(nil),                            // 16: e2sm_rc_pre.v1.MaxPciRange
	(*MaxofRanparameters)(nil),                     // 17: e2sm_rc_pre.v1.MaxofRanparameters
	(*RicStyleType)(nil),                           // 18: e2sm_rc_pre.v1.RicStyleType
	(*RicFormatType)(nil),                          // 19: e2sm_rc_pre.v1.RicFormatType
	(*RicControlMessagePriority)(nil),              // 20: e2sm_rc_pre.v1.RicControlMessagePriority
	(*RanparameterItem)(nil),                       // 21: e2sm_rc_pre.v1.RanparameterItem
	(*RanparameterId)(nil),                         // 22: e2sm_rc_pre.v1.RanparameterId
	(*RanparameterValue)(nil),                      // 23: e2sm_rc_pre.v1.RanparameterValue
	(*RanparameterDefItem)(nil),                    // 24: e2sm_rc_pre.v1.RanparameterDefItem
	(*E2SmRcPreEventTriggerDefinition)(nil),        // 25: e2sm_rc_pre.v1.E2SmRcPreEventTriggerDefinition
	(*E2SmRcPreEventTriggerDefinitionFormat1)(nil), // 26: e2sm_rc_pre.v1.E2SmRcPreEventTriggerDefinitionFormat1
	(*E2SmRcPreActionDefinition)(nil),              // 27: e2sm_rc_pre.v1.E2SmRcPreActionDefinition
	(*E2SmRcPreIndicationHeader)(nil),              // 28: e2sm_rc_pre.v1.E2SmRcPreIndicationHeader
	(*E2SmRcPreIndicationHeaderFormat1)(nil),       // 29: e2sm_rc_pre.v1.E2SmRcPreIndicationHeaderFormat1
	(*E2SmRcPreIndicationMessage)(nil),             // 30: e2sm_rc_pre.v1.E2SmRcPreIndicationMessage
	(*E2SmRcPreIndicationMessageFormat1)(nil),      // 31: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1
	(*Nrt)(nil),                                    // 32: e2sm_rc_pre.v1.Nrt
	(*E2SmRcPreControlHeader)(nil),                 // 33: e2sm_rc_pre.v1.E2SmRcPreControlHeader
	(*E2SmRcPreControlHeaderFormat1)(nil),          // 34: e2sm_rc_pre.v1.E2SmRcPreControlHeaderFormat1
	(*E2SmRcPreControlMessage)(nil),                // 35: e2sm_rc_pre.v1.E2SmRcPreControlMessage
	(*E2SmRcPreControlMessageFormat1)(nil),         // 36: e2sm_rc_pre.v1.E2SmRcPreControlMessageFormat1
	(*E2SmRcPreControlOutcome)(nil),                // 37: e2sm_rc_pre.v1.E2SmRcPreControlOutcome
	(*E2SmRcPreControlOutcomeFormat1)(nil),         // 38: e2sm_rc_pre.v1.E2SmRcPreControlOutcomeFormat1
	(*E2SmRcPreRanfunctionDescription)(nil),        // 39: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription
	(*RanfunctionName)(nil),                        // 40: e2sm_rc_pre.v1.RanfunctionName
	(*RicEventTriggerStyleList)(nil),               // 41: e2sm_rc_pre.v1.RicEventTriggerStyleList
	(*RicReportStyleList)(nil),                     // 42: e2sm_rc_pre.v1.RicReportStyleList
	(*RanparameterName)(nil),                       // 43: e2sm_rc_pre.v1.RanparameterName
	(*RicStyleName)(nil),                           // 44: e2sm_rc_pre.v1.RicStyleName
	(*PlmnIdentity)(nil),                           // 45: e2sm_rc_pre.v1.PlmnIdentity
	(*EutracellIdentity)(nil),                      // 46: e2sm_rc_pre.v1.EutracellIdentity
	(*NrcellIdentity)(nil),                         // 47: e2sm_rc_pre.v1.NrcellIdentity
	(*BitString)(nil),                              // 48: e2sm_rc_pre.v1.BitString
	(*E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001)(nil), // 49: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.E2SmRcPreRanfunctionItem001
}
var file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_depIdxs = []int32{
	45, // 0: e2sm_rc_pre.v1.Eutracgi.p_lmn_identity:type_name -> e2sm_rc_pre.v1.PlmnIdentity
	46, // 1: e2sm_rc_pre.v1.Eutracgi.e_utracell_identity:type_name -> e2sm_rc_pre.v1.EutracellIdentity
	45, // 2: e2sm_rc_pre.v1.Nrcgi.p_lmn_identity:type_name -> e2sm_rc_pre.v1.PlmnIdentity
	47, // 3: e2sm_rc_pre.v1.Nrcgi.n_rcell_identity:type_name -> e2sm_rc_pre.v1.NrcellIdentity
	5,  // 4: e2sm_rc_pre.v1.CellGlobalId.nr_cgi:type_name -> e2sm_rc_pre.v1.Nrcgi
	4,  // 5: e2sm_rc_pre.v1.CellGlobalId.e_utra_cgi:type_name -> e2sm_rc_pre.v1.Eutracgi
	8,  // 6: e2sm_rc_pre.v1.PciRange.lower_pci:type_name -> e2sm_rc_pre.v1.Pci
	8,  // 7: e2sm_rc_pre.v1.PciRange.upper_pci:type_name -> e2sm_rc_pre.v1.Pci
	22, // 8: e2sm_rc_pre.v1.RanparameterItem.ran_parameter_id:type_name -> e2sm_rc_pre.v1.RanparameterId
	23, // 9: e2sm_rc_pre.v1.RanparameterItem.ran_parameter_value:type_name -> e2sm_rc_pre.v1.RanparameterValue
	48, // 10: e2sm_rc_pre.v1.RanparameterValue.value_bit_s:type_name -> e2sm_rc_pre.v1.BitString
	22, // 11: e2sm_rc_pre.v1.RanparameterDefItem.ran_parameter_id:type_name -> e2sm_rc_pre.v1.RanparameterId
	43, // 12: e2sm_rc_pre.v1.RanparameterDefItem.ran_parameter_name:type_name -> e2sm_rc_pre.v1.RanparameterName
	1,  // 13: e2sm_rc_pre.v1.RanparameterDefItem.ran_parameter_type:type_name -> e2sm_rc_pre.v1.RanparameterType
	26, // 14: e2sm_rc_pre.v1.E2SmRcPreEventTriggerDefinition.event_definition_format1:type_name -> e2sm_rc_pre.v1.E2SmRcPreEventTriggerDefinitionFormat1
	2,  // 15: e2sm_rc_pre.v1.E2SmRcPreEventTriggerDefinitionFormat1.trigger_type:type_name -> e2sm_rc_pre.v1.RcPreTriggerType
	18, // 16: e2sm_rc_pre.v1.E2SmRcPreActionDefinition.ric_style_type:type_name -> e2sm_rc_pre.v1.RicStyleType
	29, // 17: e2sm_rc_pre.v1.E2SmRcPreIndicationHeader.indication_header_format1:type_name -> e2sm_rc_pre.v1.E2SmRcPreIndicationHeaderFormat1
	6,  // 18: e2sm_rc_pre.v1.E2SmRcPreIndicationHeaderFormat1.cgi:type_name -> e2sm_rc_pre.v1.CellGlobalId
	18, // 19: e2sm_rc_pre.v1.E2SmRcPreIndicationMessage.ric_style_type:type_name -> e2sm_rc_pre.v1.RicStyleType
	31, // 20: e2sm_rc_pre.v1.E2SmRcPreIndicationMessage.indication_message_format1:type_name -> e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1
	6,  // 21: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.cgi:type_name -> e2sm_rc_pre.v1.CellGlobalId
	7,  // 22: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.dl_earfcn:type_name -> e2sm_rc_pre.v1.Earfcn
	0,  // 23: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.cell_size:type_name -> e2sm_rc_pre.v1.CellSize
	9,  // 24: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.pci_pool:type_name -> e2sm_rc_pre.v1.PciRange
	8,  // 25: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.pci:type_name -> e2sm_rc_pre.v1.Pci
	32, // 26: e2sm_rc_pre.v1.E2SmRcPreIndicationMessageFormat1.neighbors:type_name -> e2sm_rc_pre.v1.Nrt
	6,  // 27: e2sm_rc_pre.v1.Nrt.cgi:type_name -> e2sm_rc_pre.v1.CellGlobalId
	7,  // 28: e2sm_rc_pre.v1.Nrt.dl_earfcn:type_name -> e2sm_rc_pre.v1.Earfcn
	0,  // 29: e2sm_rc_pre.v1.Nrt.cell_size:type_name -> e2sm_rc_pre.v1.CellSize
	8,  // 30: e2sm_rc_pre.v1.Nrt.pci:type_name -> e2sm_rc_pre.v1.Pci
	34, // 31: e2sm_rc_pre.v1.E2SmRcPreControlHeader.control_header_format1:type_name -> e2sm_rc_pre.v1.E2SmRcPreControlHeaderFormat1
	6,  // 32: e2sm_rc_pre.v1.E2SmRcPreControlHeaderFormat1.cgi:type_name -> e2sm_rc_pre.v1.CellGlobalId
	3,  // 33: e2sm_rc_pre.v1.E2SmRcPreControlHeaderFormat1.rc_command:type_name -> e2sm_rc_pre.v1.RcPreCommand
	20, // 34: e2sm_rc_pre.v1.E2SmRcPreControlHeaderFormat1.ric_control_message_priority:type_name -> e2sm_rc_pre.v1.RicControlMessagePriority
	36, // 35: e2sm_rc_pre.v1.E2SmRcPreControlMessage.control_message:type_name -> e2sm_rc_pre.v1.E2SmRcPreControlMessageFormat1
	24, // 36: e2sm_rc_pre.v1.E2SmRcPreControlMessageFormat1.parameter_type:type_name -> e2sm_rc_pre.v1.RanparameterDefItem
	23, // 37: e2sm_rc_pre.v1.E2SmRcPreControlMessageFormat1.parameter_val:type_name -> e2sm_rc_pre.v1.RanparameterValue
	38, // 38: e2sm_rc_pre.v1.E2SmRcPreControlOutcome.control_outcome_format1:type_name -> e2sm_rc_pre.v1.E2SmRcPreControlOutcomeFormat1
	21, // 39: e2sm_rc_pre.v1.E2SmRcPreControlOutcomeFormat1.outcome_element_list:type_name -> e2sm_rc_pre.v1.RanparameterItem
	40, // 40: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.ran_function_name:type_name -> e2sm_rc_pre.v1.RanfunctionName
	49, // 41: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.e2_sm_rc_pre_ranfunction_item:type_name -> e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.E2SmRcPreRanfunctionItem001
	18, // 42: e2sm_rc_pre.v1.RicEventTriggerStyleList.ric_event_trigger_style_type:type_name -> e2sm_rc_pre.v1.RicStyleType
	44, // 43: e2sm_rc_pre.v1.RicEventTriggerStyleList.ric_event_trigger_style_name:type_name -> e2sm_rc_pre.v1.RicStyleName
	19, // 44: e2sm_rc_pre.v1.RicEventTriggerStyleList.ric_event_trigger_format_type:type_name -> e2sm_rc_pre.v1.RicFormatType
	18, // 45: e2sm_rc_pre.v1.RicReportStyleList.ric_report_style_type:type_name -> e2sm_rc_pre.v1.RicStyleType
	44, // 46: e2sm_rc_pre.v1.RicReportStyleList.ric_report_style_name:type_name -> e2sm_rc_pre.v1.RicStyleName
	19, // 47: e2sm_rc_pre.v1.RicReportStyleList.ric_indication_header_format_type:type_name -> e2sm_rc_pre.v1.RicFormatType
	19, // 48: e2sm_rc_pre.v1.RicReportStyleList.ric_indication_message_format_type:type_name -> e2sm_rc_pre.v1.RicFormatType
	48, // 49: e2sm_rc_pre.v1.EutracellIdentity.value:type_name -> e2sm_rc_pre.v1.BitString
	48, // 50: e2sm_rc_pre.v1.NrcellIdentity.value:type_name -> e2sm_rc_pre.v1.BitString
	41, // 51: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.E2SmRcPreRanfunctionItem001.ric_event_trigger_style_list:type_name -> e2sm_rc_pre.v1.RicEventTriggerStyleList
	42, // 52: e2sm_rc_pre.v1.E2SmRcPreRanfunctionDescription.E2SmRcPreRanfunctionItem001.ric_report_style_list:type_name -> e2sm_rc_pre.v1.RicReportStyleList
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_init() }
func file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_init() {
	if File_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Eutracgi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrcgi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellGlobalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Earfcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pci); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PciRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxofMessageProtocolTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxofRicstyles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxPlmn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxEarfcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxPci); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxPciRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxofRanparameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicStyleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicFormatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicControlMessagePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterDefItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreEventTriggerDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreEventTriggerDefinitionFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreActionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreIndicationHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreIndicationHeaderFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreIndicationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreIndicationMessageFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlHeaderFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlMessageFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreControlOutcomeFormat1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreRanfunctionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanfunctionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicEventTriggerStyleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicReportStyleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanparameterName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RicStyleName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlmnIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EutracellIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NrcellIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2SmRcPreRanfunctionDescription_E2SmRcPreRanfunctionItem001); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CellGlobalId_NrCgi)(nil),
		(*CellGlobalId_EUtraCgi)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*RanparameterValue_ValueInt)(nil),
		(*RanparameterValue_ValueEnum)(nil),
		(*RanparameterValue_ValueBool)(nil),
		(*RanparameterValue_ValueBitS)(nil),
		(*RanparameterValue_ValueOctS)(nil),
		(*RanparameterValue_ValuePrtS)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*E2SmRcPreEventTriggerDefinition_EventDefinitionFormat1)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*E2SmRcPreIndicationHeader_IndicationHeaderFormat1)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*E2SmRcPreIndicationMessage_RicStyleType)(nil),
		(*E2SmRcPreIndicationMessage_IndicationMessageFormat1)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*E2SmRcPreControlHeader_ControlHeaderFormat1)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*E2SmRcPreControlMessage_ControlMessage)(nil),
	}
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*E2SmRcPreControlOutcome_ControlOutcomeFormat1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_goTypes,
		DependencyIndexes: file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_depIdxs,
		EnumInfos:         file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_enumTypes,
		MessageInfos:      file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_msgTypes,
	}.Build()
	File_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto = out.File
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_rawDesc = nil
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_goTypes = nil
	file_e2sm_rc_pre_v1_e2sm_rc_pre_ies_proto_depIdxs = nil
}
