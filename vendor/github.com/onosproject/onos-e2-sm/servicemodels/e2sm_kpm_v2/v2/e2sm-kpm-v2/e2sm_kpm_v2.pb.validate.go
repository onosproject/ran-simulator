// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_kpm_v2/v2/e2sm_kpm_v2.proto

package e2sm_kpm_v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_sm_kpm_v_2_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Eutracgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Eutracgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEUtracellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracgiValidationError{
				field:  "EUtracellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracgiValidationError is the validation error returned by
// Eutracgi.Validate if the designated constraints aren't met.
type EutracgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracgiValidationError) ErrorName() string { return "EutracgiValidationError" }

// Error satisfies the builtin error interface
func (e EutracgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracgiValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Nrcgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on CellGlobalId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CellGlobalId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.CellGlobalId.(type) {

	case *CellGlobalId_NrCgi:

		if v, ok := interface{}(m.GetNrCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "NrCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CellGlobalId_EUtraCgi:

		if v, ok := interface{}(m.GetEUtraCgi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellGlobalIdValidationError{
					field:  "EUtraCgi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CellGlobalIdValidationError is the validation error returned by
// CellGlobalId.Validate if the designated constraints aren't met.
type CellGlobalIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellGlobalIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellGlobalIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellGlobalIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellGlobalIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellGlobalIdValidationError) ErrorName() string { return "CellGlobalIdValidationError" }

// Error satisfies the builtin error interface
func (e CellGlobalIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellGlobalId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellGlobalIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellGlobalIdValidationError{}

// Validate checks the field values on Snssai with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Snssai) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSSt()) != 1 {
		return SnssaiValidationError{
			field:  "SSt",
			reason: "value length must be 1 bytes",
		}
	}

	if len(m.GetSD()) != 3 {
		return SnssaiValidationError{
			field:  "SD",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// SnssaiValidationError is the validation error returned by Snssai.Validate if
// the designated constraints aren't met.
type SnssaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnssaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnssaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnssaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnssaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnssaiValidationError) ErrorName() string { return "SnssaiValidationError" }

// Error satisfies the builtin error interface
func (e SnssaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnssai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnssaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnssaiValidationError{}

// Validate checks the field values on FiveQi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FiveQi) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return FiveQiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// FiveQiValidationError is the validation error returned by FiveQi.Validate if
// the designated constraints aren't met.
type FiveQiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FiveQiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FiveQiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FiveQiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FiveQiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FiveQiValidationError) ErrorName() string { return "FiveQiValidationError" }

// Error satisfies the builtin error interface
func (e FiveQiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiveQi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FiveQiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FiveQiValidationError{}

// Validate checks the field values on Qci with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Qci) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return QciValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// QciValidationError is the validation error returned by Qci.Validate if the
// designated constraints aren't met.
type QciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QciValidationError) ErrorName() string { return "QciValidationError" }

// Error satisfies the builtin error interface
func (e QciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QciValidationError{}

// Validate checks the field values on Qfi with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Qfi) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 63 {
		return QfiValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 63]",
		}
	}

	return nil
}

// QfiValidationError is the validation error returned by Qfi.Validate if the
// designated constraints aren't met.
type QfiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QfiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QfiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QfiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QfiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QfiValidationError) ErrorName() string { return "QfiValidationError" }

// Error satisfies the builtin error interface
func (e QfiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQfi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QfiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QfiValidationError{}

// Validate checks the field values on Arp with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Arp) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 1 || val > 15 {
		return ArpValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 15]",
		}
	}

	return nil
}

// ArpValidationError is the validation error returned by Arp.Validate if the
// designated constraints aren't met.
type ArpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArpValidationError) ErrorName() string { return "ArpValidationError" }

// Error satisfies the builtin error interface
func (e ArpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArpValidationError{}

// Validate checks the field values on GranularityPeriod with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GranularityPeriod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// GranularityPeriodValidationError is the validation error returned by
// GranularityPeriod.Validate if the designated constraints aren't met.
type GranularityPeriodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GranularityPeriodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GranularityPeriodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GranularityPeriodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GranularityPeriodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GranularityPeriodValidationError) ErrorName() string {
	return "GranularityPeriodValidationError"
}

// Error satisfies the builtin error interface
func (e GranularityPeriodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGranularityPeriod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GranularityPeriodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GranularityPeriodValidationError{}

// Validate checks the field values on MeasurementType with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeasurementType) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MeasurementType.(type) {

	case *MeasurementType_MeasName:

		if v, ok := interface{}(m.GetMeasName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementTypeValidationError{
					field:  "MeasName",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MeasurementType_MeasId:

		if v, ok := interface{}(m.GetMeasId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementTypeValidationError{
					field:  "MeasId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementTypeValidationError is the validation error returned by
// MeasurementType.Validate if the designated constraints aren't met.
type MeasurementTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementTypeValidationError) ErrorName() string { return "MeasurementTypeValidationError" }

// Error satisfies the builtin error interface
func (e MeasurementTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementTypeValidationError{}

// Validate checks the field values on MeasurementTypeId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeasurementTypeId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 1 || val > 65536 {
		return MeasurementTypeIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 65536]",
		}
	}

	return nil
}

// MeasurementTypeIdValidationError is the validation error returned by
// MeasurementTypeId.Validate if the designated constraints aren't met.
type MeasurementTypeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementTypeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementTypeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementTypeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementTypeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementTypeIdValidationError) ErrorName() string {
	return "MeasurementTypeIdValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementTypeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementTypeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementTypeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementTypeIdValidationError{}

// Validate checks the field values on MeasurementLabel with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeasurementLabel) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFiveQi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "FiveQi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQFi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "QFi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQCi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "QCi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQCimax()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "QCimax",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQCimin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "QCimin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetARpmax()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "ARpmax",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetARpmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementLabelValidationError{
				field:  "ARpmin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetBitrateRange(); val < 1 || val > 65536 {
		return MeasurementLabelValidationError{
			field:  "BitrateRange",
			reason: "value must be inside range [1, 65536]",
		}
	}

	if val := m.GetLayerMuMimo(); val < 1 || val > 65536 {
		return MeasurementLabelValidationError{
			field:  "LayerMuMimo",
			reason: "value must be inside range [1, 65536]",
		}
	}

	// no validation rules for SUm

	if val := m.GetDistBinX(); val < 1 || val > 65536 {
		return MeasurementLabelValidationError{
			field:  "DistBinX",
			reason: "value must be inside range [1, 65536]",
		}
	}

	if val := m.GetDistBinY(); val < 1 || val > 65536 {
		return MeasurementLabelValidationError{
			field:  "DistBinY",
			reason: "value must be inside range [1, 65536]",
		}
	}

	if val := m.GetDistBinZ(); val < 1 || val > 65536 {
		return MeasurementLabelValidationError{
			field:  "DistBinZ",
			reason: "value must be inside range [1, 65536]",
		}
	}

	// no validation rules for PreLabelOverride

	// no validation rules for StartEndInd

	return nil
}

// MeasurementLabelValidationError is the validation error returned by
// MeasurementLabel.Validate if the designated constraints aren't met.
type MeasurementLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementLabelValidationError) ErrorName() string { return "MeasurementLabelValidationError" }

// Error satisfies the builtin error interface
func (e MeasurementLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementLabelValidationError{}

// Validate checks the field values on SubscriptionId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SubscriptionId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 1 || val > 4294967296 {
		return SubscriptionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [1, 4294967296]",
		}
	}

	return nil
}

// SubscriptionIdValidationError is the validation error returned by
// SubscriptionId.Validate if the designated constraints aren't met.
type SubscriptionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionIdValidationError) ErrorName() string { return "SubscriptionIdValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionIdValidationError{}

// Validate checks the field values on TestCondInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestCondInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTestType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestCondInfoValidationError{
				field:  "TestType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TestExpr

	if v, ok := interface{}(m.GetTestValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestCondInfoValidationError{
				field:  "TestValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TestCondInfoValidationError is the validation error returned by
// TestCondInfo.Validate if the designated constraints aren't met.
type TestCondInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestCondInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestCondInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestCondInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestCondInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestCondInfoValidationError) ErrorName() string { return "TestCondInfoValidationError" }

// Error satisfies the builtin error interface
func (e TestCondInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestCondInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestCondInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestCondInfoValidationError{}

// Validate checks the field values on TestCondType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestCondType) Validate() error {
	if m == nil {
		return nil
	}

	switch m.TestCondType.(type) {

	case *TestCondType_GBr:
		// no validation rules for GBr

	case *TestCondType_AMbr:
		// no validation rules for AMbr

	case *TestCondType_IsStat:
		// no validation rules for IsStat

	case *TestCondType_IsCatM:
		// no validation rules for IsCatM

	case *TestCondType_RSrp:
		// no validation rules for RSrp

	case *TestCondType_RSrq:
		// no validation rules for RSrq

	}

	return nil
}

// TestCondTypeValidationError is the validation error returned by
// TestCondType.Validate if the designated constraints aren't met.
type TestCondTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestCondTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestCondTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestCondTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestCondTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestCondTypeValidationError) ErrorName() string { return "TestCondTypeValidationError" }

// Error satisfies the builtin error interface
func (e TestCondTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestCondType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestCondTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestCondTypeValidationError{}

// Validate checks the field values on TestCondValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestCondValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.TestCondValue.(type) {

	case *TestCondValue_ValueInt:
		// no validation rules for ValueInt

	case *TestCondValue_ValueEnum:
		// no validation rules for ValueEnum

	case *TestCondValue_ValueBool:
		// no validation rules for ValueBool

	case *TestCondValue_ValueBitS:

		if v, ok := interface{}(m.GetValueBitS()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestCondValueValidationError{
					field:  "ValueBitS",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TestCondValue_ValueOctS:
		// no validation rules for ValueOctS

	case *TestCondValue_ValuePrtS:
		// no validation rules for ValuePrtS

	}

	return nil
}

// TestCondValueValidationError is the validation error returned by
// TestCondValue.Validate if the designated constraints aren't met.
type TestCondValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestCondValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestCondValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestCondValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestCondValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestCondValueValidationError) ErrorName() string { return "TestCondValueValidationError" }

// Error satisfies the builtin error interface
func (e TestCondValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestCondValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestCondValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestCondValueValidationError{}

// Validate checks the field values on GlobalKpmnodeId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalKpmnodeId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GlobalKpmnodeId.(type) {

	case *GlobalKpmnodeId_GNb:

		if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_EnGNb:

		if v, ok := interface{}(m.GetEnGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "EnGNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_NgENb:

		if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_ENb:

		if v, ok := interface{}(m.GetENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "ENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GlobalKpmnodeIdValidationError is the validation error returned by
// GlobalKpmnodeId.Validate if the designated constraints aren't met.
type GlobalKpmnodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeIdValidationError) ErrorName() string { return "GlobalKpmnodeIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalKpmnodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeIdValidationError{}

// Validate checks the field values on GlobalKpmnodeGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeGnbIdValidationError is the validation error returned by
// GlobalKpmnodeGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeGnbIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalgNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdChoiceValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeEnGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeEnGnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnGnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalenGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EngnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GlobalKpmnodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeNgEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeNgEnbIdValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeNgEnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeNgEnbIdValidationError is the validation error returned by
// GlobalKpmnodeNgEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeNgEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeNgEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeNgEnbIdValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalngeNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "ShortMacroENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "LongMacroENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if v, ok := interface{}(m.GetEnbIdMacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdMacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if v, ok := interface{}(m.GetEnbIdShortmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdShortmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if v, ok := interface{}(m.GetEnbIdLongmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdLongmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnbIdValidationError{
				field:  "GlobalENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeEnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionName) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RanFunctionShortName

	// no validation rules for RanFunctionE2SmOid

	// no validation rules for RanFunctionDescription

	// no validation rules for RanFunctionInstance

	return nil
}

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicFormatType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on MaxnoofKpmnodes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxnoofKpmnodes) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 1024 {
		return MaxnoofKpmnodesValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
	}

	return nil
}

// MaxnoofKpmnodesValidationError is the validation error returned by
// MaxnoofKpmnodes.Validate if the designated constraints aren't met.
type MaxnoofKpmnodesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofKpmnodesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofKpmnodesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofKpmnodesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofKpmnodesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofKpmnodesValidationError) ErrorName() string { return "MaxnoofKpmnodesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofKpmnodesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofKpmnodes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofKpmnodesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofKpmnodesValidationError{}

// Validate checks the field values on MaxnoofCells with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxnoofCells) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 16384 {
		return MaxnoofCellsValidationError{
			field:  "Value",
			reason: "value must equal 16384",
		}
	}

	return nil
}

// MaxnoofCellsValidationError is the validation error returned by
// MaxnoofCells.Validate if the designated constraints aren't met.
type MaxnoofCellsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofCellsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofCellsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofCellsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofCellsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofCellsValidationError) ErrorName() string { return "MaxnoofCellsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofCellsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofCells.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofCellsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofCellsValidationError{}

// Validate checks the field values on MaxnoofRicstyles with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxnoofRicstyles) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxnoofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxnoofRicstylesValidationError is the validation error returned by
// MaxnoofRicstyles.Validate if the designated constraints aren't met.
type MaxnoofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofRicstylesValidationError) ErrorName() string { return "MaxnoofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofRicstylesValidationError{}

// Validate checks the field values on MaxnoofMeasurementInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxnoofMeasurementInfo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65536 {
		return MaxnoofMeasurementInfoValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
	}

	return nil
}

// MaxnoofMeasurementInfoValidationError is the validation error returned by
// MaxnoofMeasurementInfo.Validate if the designated constraints aren't met.
type MaxnoofMeasurementInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMeasurementInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMeasurementInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMeasurementInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMeasurementInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMeasurementInfoValidationError) ErrorName() string {
	return "MaxnoofMeasurementInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMeasurementInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMeasurementInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMeasurementInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMeasurementInfoValidationError{}

// Validate checks the field values on MaxnoofLabelInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxnoofLabelInfo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 2147483647 {
		return MaxnoofLabelInfoValidationError{
			field:  "Value",
			reason: "value must equal 2147483647",
		}
	}

	return nil
}

// MaxnoofLabelInfoValidationError is the validation error returned by
// MaxnoofLabelInfo.Validate if the designated constraints aren't met.
type MaxnoofLabelInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofLabelInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofLabelInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofLabelInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofLabelInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofLabelInfoValidationError) ErrorName() string { return "MaxnoofLabelInfoValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofLabelInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofLabelInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofLabelInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofLabelInfoValidationError{}

// Validate checks the field values on MaxnoofMeasurementRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxnoofMeasurementRecord) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65536 {
		return MaxnoofMeasurementRecordValidationError{
			field:  "Value",
			reason: "value must equal 65536",
		}
	}

	return nil
}

// MaxnoofMeasurementRecordValidationError is the validation error returned by
// MaxnoofMeasurementRecord.Validate if the designated constraints aren't met.
type MaxnoofMeasurementRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMeasurementRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMeasurementRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMeasurementRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMeasurementRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMeasurementRecordValidationError) ErrorName() string {
	return "MaxnoofMeasurementRecordValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMeasurementRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMeasurementRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMeasurementRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMeasurementRecordValidationError{}

// Validate checks the field values on MaxnoofMeasurementValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxnoofMeasurementValue) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 2147483647 {
		return MaxnoofMeasurementValueValidationError{
			field:  "Value",
			reason: "value must equal 2147483647",
		}
	}

	return nil
}

// MaxnoofMeasurementValueValidationError is the validation error returned by
// MaxnoofMeasurementValue.Validate if the designated constraints aren't met.
type MaxnoofMeasurementValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofMeasurementValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofMeasurementValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofMeasurementValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofMeasurementValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofMeasurementValueValidationError) ErrorName() string {
	return "MaxnoofMeasurementValueValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofMeasurementValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofMeasurementValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofMeasurementValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofMeasurementValueValidationError{}

// Validate checks the field values on MaxnoofConditionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxnoofConditionInfo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 32768 {
		return MaxnoofConditionInfoValidationError{
			field:  "Value",
			reason: "value must equal 32768",
		}
	}

	return nil
}

// MaxnoofConditionInfoValidationError is the validation error returned by
// MaxnoofConditionInfo.Validate if the designated constraints aren't met.
type MaxnoofConditionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofConditionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofConditionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofConditionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofConditionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofConditionInfoValidationError) ErrorName() string {
	return "MaxnoofConditionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofConditionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofConditionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofConditionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofConditionInfoValidationError{}

// Validate checks the field values on MaxnoofUeid with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxnoofUeid) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65535 {
		return MaxnoofUeidValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
	}

	return nil
}

// MaxnoofUeidValidationError is the validation error returned by
// MaxnoofUeid.Validate if the designated constraints aren't met.
type MaxnoofUeidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofUeidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofUeidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofUeidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofUeidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofUeidValidationError) ErrorName() string { return "MaxnoofUeidValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofUeidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofUeid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofUeidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofUeidValidationError{}

// Validate checks the field values on MeasurementInfoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementInfoList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementInfoListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementInfoListValidationError is the validation error returned by
// MeasurementInfoList.Validate if the designated constraints aren't met.
type MeasurementInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementInfoListValidationError) ErrorName() string {
	return "MeasurementInfoListValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementInfoListValidationError{}

// Validate checks the field values on MeasurementInfoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementInfoItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementInfoItemValidationError{
				field:  "MeasType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLabelInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementInfoItemValidationError{
				field:  "LabelInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeasurementInfoItemValidationError is the validation error returned by
// MeasurementInfoItem.Validate if the designated constraints aren't met.
type MeasurementInfoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementInfoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementInfoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementInfoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementInfoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementInfoItemValidationError) ErrorName() string {
	return "MeasurementInfoItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementInfoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementInfoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementInfoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementInfoItemValidationError{}

// Validate checks the field values on LabelInfoList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LabelInfoList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelInfoListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LabelInfoListValidationError is the validation error returned by
// LabelInfoList.Validate if the designated constraints aren't met.
type LabelInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelInfoListValidationError) ErrorName() string { return "LabelInfoListValidationError" }

// Error satisfies the builtin error interface
func (e LabelInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelInfoListValidationError{}

// Validate checks the field values on LabelInfoItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LabelInfoItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabelInfoItemValidationError{
				field:  "MeasLabel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LabelInfoItemValidationError is the validation error returned by
// LabelInfoItem.Validate if the designated constraints aren't met.
type LabelInfoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelInfoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelInfoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelInfoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelInfoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelInfoItemValidationError) ErrorName() string { return "LabelInfoItemValidationError" }

// Error satisfies the builtin error interface
func (e LabelInfoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelInfoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelInfoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelInfoItemValidationError{}

// Validate checks the field values on MeasurementData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeasurementData) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementDataValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementDataValidationError is the validation error returned by
// MeasurementData.Validate if the designated constraints aren't met.
type MeasurementDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementDataValidationError) ErrorName() string { return "MeasurementDataValidationError" }

// Error satisfies the builtin error interface
func (e MeasurementDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementDataValidationError{}

// Validate checks the field values on MeasurementDataItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementDataItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementDataItemValidationError{
				field:  "MeasRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncompleteFlag

	return nil
}

// MeasurementDataItemValidationError is the validation error returned by
// MeasurementDataItem.Validate if the designated constraints aren't met.
type MeasurementDataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementDataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementDataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementDataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementDataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementDataItemValidationError) ErrorName() string {
	return "MeasurementDataItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementDataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementDataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementDataItemValidationError{}

// Validate checks the field values on MeasurementRecord with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeasurementRecord) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementRecordValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementRecordValidationError is the validation error returned by
// MeasurementRecord.Validate if the designated constraints aren't met.
type MeasurementRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementRecordValidationError) ErrorName() string {
	return "MeasurementRecordValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementRecordValidationError{}

// Validate checks the field values on MeasurementRecordItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementRecordItem) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MeasurementRecordItem.(type) {

	case *MeasurementRecordItem_Integer:
		// no validation rules for Integer

	case *MeasurementRecordItem_Real:
		// no validation rules for Real

	case *MeasurementRecordItem_NoValue:

		if val := m.GetNoValue(); val < 0 || val >= 1 {
			return MeasurementRecordItemValidationError{
				field:  "NoValue",
				reason: "value must be inside range [0, 1)",
			}
		}

	}

	return nil
}

// MeasurementRecordItemValidationError is the validation error returned by
// MeasurementRecordItem.Validate if the designated constraints aren't met.
type MeasurementRecordItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementRecordItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementRecordItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementRecordItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementRecordItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementRecordItemValidationError) ErrorName() string {
	return "MeasurementRecordItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementRecordItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementRecordItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementRecordItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementRecordItemValidationError{}

// Validate checks the field values on MeasurementInfoActionList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementInfoActionList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementInfoActionListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementInfoActionListValidationError is the validation error returned by
// MeasurementInfoActionList.Validate if the designated constraints aren't met.
type MeasurementInfoActionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementInfoActionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementInfoActionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementInfoActionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementInfoActionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementInfoActionListValidationError) ErrorName() string {
	return "MeasurementInfoActionListValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementInfoActionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementInfoActionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementInfoActionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementInfoActionListValidationError{}

// Validate checks the field values on MeasurementInfoActionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementInfoActionItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementInfoActionItemValidationError{
				field:  "MeasName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementInfoActionItemValidationError{
				field:  "MeasId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeasurementInfoActionItemValidationError is the validation error returned by
// MeasurementInfoActionItem.Validate if the designated constraints aren't met.
type MeasurementInfoActionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementInfoActionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementInfoActionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementInfoActionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementInfoActionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementInfoActionItemValidationError) ErrorName() string {
	return "MeasurementInfoActionItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementInfoActionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementInfoActionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementInfoActionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementInfoActionItemValidationError{}

// Validate checks the field values on MeasurementCondList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementCondList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementCondListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementCondListValidationError is the validation error returned by
// MeasurementCondList.Validate if the designated constraints aren't met.
type MeasurementCondListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementCondListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementCondListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementCondListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementCondListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementCondListValidationError) ErrorName() string {
	return "MeasurementCondListValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementCondListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementCondList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementCondListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementCondListValidationError{}

// Validate checks the field values on MeasurementCondItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementCondItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementCondItemValidationError{
				field:  "MeasType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMatchingCond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementCondItemValidationError{
				field:  "MatchingCond",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeasurementCondItemValidationError is the validation error returned by
// MeasurementCondItem.Validate if the designated constraints aren't met.
type MeasurementCondItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementCondItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementCondItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementCondItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementCondItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementCondItemValidationError) ErrorName() string {
	return "MeasurementCondItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementCondItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementCondItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementCondItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementCondItemValidationError{}

// Validate checks the field values on MeasurementCondUeidList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementCondUeidList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeasurementCondUeidListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeasurementCondUeidListValidationError is the validation error returned by
// MeasurementCondUeidList.Validate if the designated constraints aren't met.
type MeasurementCondUeidListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementCondUeidListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementCondUeidListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementCondUeidListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementCondUeidListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementCondUeidListValidationError) ErrorName() string {
	return "MeasurementCondUeidListValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementCondUeidListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementCondUeidList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementCondUeidListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementCondUeidListValidationError{}

// Validate checks the field values on MeasurementCondUeidItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementCondUeidItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeasType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementCondUeidItemValidationError{
				field:  "MeasType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMatchingCond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementCondUeidItemValidationError{
				field:  "MatchingCond",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMatchingUeidList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasurementCondUeidItemValidationError{
				field:  "MatchingUeidList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeasurementCondUeidItemValidationError is the validation error returned by
// MeasurementCondUeidItem.Validate if the designated constraints aren't met.
type MeasurementCondUeidItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementCondUeidItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementCondUeidItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementCondUeidItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementCondUeidItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementCondUeidItemValidationError) ErrorName() string {
	return "MeasurementCondUeidItemValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementCondUeidItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementCondUeidItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementCondUeidItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementCondUeidItemValidationError{}

// Validate checks the field values on MatchingCondList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchingCondList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchingCondListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MatchingCondListValidationError is the validation error returned by
// MatchingCondList.Validate if the designated constraints aren't met.
type MatchingCondListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchingCondListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchingCondListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchingCondListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchingCondListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchingCondListValidationError) ErrorName() string { return "MatchingCondListValidationError" }

// Error satisfies the builtin error interface
func (e MatchingCondListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchingCondList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchingCondListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchingCondListValidationError{}

// Validate checks the field values on MatchingCondItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchingCondItem) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchingCondItem.(type) {

	case *MatchingCondItem_MeasLabel:

		if v, ok := interface{}(m.GetMeasLabel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchingCondItemValidationError{
					field:  "MeasLabel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MatchingCondItem_TestCondInfo:

		if v, ok := interface{}(m.GetTestCondInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchingCondItemValidationError{
					field:  "TestCondInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MatchingCondItemValidationError is the validation error returned by
// MatchingCondItem.Validate if the designated constraints aren't met.
type MatchingCondItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchingCondItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchingCondItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchingCondItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchingCondItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchingCondItemValidationError) ErrorName() string { return "MatchingCondItemValidationError" }

// Error satisfies the builtin error interface
func (e MatchingCondItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchingCondItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchingCondItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchingCondItemValidationError{}

// Validate checks the field values on MatchingUeidList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchingUeidList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchingUeidListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MatchingUeidListValidationError is the validation error returned by
// MatchingUeidList.Validate if the designated constraints aren't met.
type MatchingUeidListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchingUeidListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchingUeidListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchingUeidListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchingUeidListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchingUeidListValidationError) ErrorName() string { return "MatchingUeidListValidationError" }

// Error satisfies the builtin error interface
func (e MatchingUeidListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchingUeidList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchingUeidListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchingUeidListValidationError{}

// Validate checks the field values on MatchingUeidItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchingUeidItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MatchingUeidItemValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MatchingUeidItemValidationError is the validation error returned by
// MatchingUeidItem.Validate if the designated constraints aren't met.
type MatchingUeidItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchingUeidItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchingUeidItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchingUeidItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchingUeidItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchingUeidItemValidationError) ErrorName() string { return "MatchingUeidItemValidationError" }

// Error satisfies the builtin error interface
func (e MatchingUeidItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchingUeidItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchingUeidItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchingUeidItemValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmEventTriggerDefinition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmEventTriggerDefinition.(type) {

	case *E2SmKpmEventTriggerDefinition_EventDefinitionFormat1:

		if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmEventTriggerDefinitionValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SmKpmEventTriggerDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportingPeriod

	return nil
}

// E2SmKpmEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmKpmActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmActionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.E2SmKpmActionDefinition.(type) {

	case *E2SmKpmActionDefinition_ActionDefinitionFormat1:

		if v, ok := interface{}(m.GetActionDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmActionDefinitionValidationError{
					field:  "ActionDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmKpmActionDefinition_ActionDefinitionFormat2:

		if v, ok := interface{}(m.GetActionDefinitionFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmActionDefinitionValidationError{
					field:  "ActionDefinitionFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmKpmActionDefinition_ActionDefinitionFormat3:

		if v, ok := interface{}(m.GetActionDefinitionFormat3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmActionDefinitionValidationError{
					field:  "ActionDefinitionFormat3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmActionDefinitionValidationError is the validation error returned by
// E2SmKpmActionDefinition.Validate if the designated constraints aren't met.
type E2SmKpmActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionValidationError{}

// Validate checks the field values on E2SmKpmActionDefinitionFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmActionDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCellObjId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat1ValidationError{
				field:  "CellObjId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat1ValidationError{
				field:  "MeasInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGranulPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat1ValidationError{
				field:  "GranulPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSubscriptId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat1ValidationError{
				field:  "SubscriptId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmActionDefinitionFormat1ValidationError is the validation error
// returned by E2SmKpmActionDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmActionDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmKpmActionDefinitionFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmActionDefinitionFormat2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat2ValidationError{
				field:  "UeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSubscriptInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat2ValidationError{
				field:  "SubscriptInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmActionDefinitionFormat2ValidationError is the validation error
// returned by E2SmKpmActionDefinitionFormat2.Validate if the designated
// constraints aren't met.
type E2SmKpmActionDefinitionFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionFormat2ValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinitionFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionFormat2ValidationError{}

// Validate checks the field values on E2SmKpmActionDefinitionFormat3 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmActionDefinitionFormat3) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCellObjId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat3ValidationError{
				field:  "CellObjId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasCondList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat3ValidationError{
				field:  "MeasCondList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGranulPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat3ValidationError{
				field:  "GranulPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSubscriptId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionFormat3ValidationError{
				field:  "SubscriptId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmActionDefinitionFormat3ValidationError is the validation error
// returned by E2SmKpmActionDefinitionFormat3.Validate if the designated
// constraints aren't met.
type E2SmKpmActionDefinitionFormat3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionFormat3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionFormat3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionFormat3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionFormat3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionFormat3ValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionFormat3ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionFormat3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinitionFormat3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionFormat3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionFormat3ValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmIndicationHeader.(type) {

	case *E2SmKpmIndicationHeader_IndicationHeaderFormat1:

		if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmIndicationHeaderValidationError is the validation error returned by
// E2SmKpmIndicationHeader.Validate if the designated constraints aren't met.
type E2SmKpmIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetColletStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "ColletStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FileFormatversion

	// no validation rules for SenderName

	// no validation rules for SenderType

	// no validation rules for VendorName

	if v, ok := interface{}(m.GetKpmNodeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "KpmNodeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmIndicationMessage.(type) {

	case *E2SmKpmIndicationMessage_IndicationMessageFormat1:

		if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmKpmIndicationMessage_IndicationMessageFormat2:

		if v, ok := interface{}(m.GetIndicationMessageFormat2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "IndicationMessageFormat2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmIndicationMessageValidationError is the validation error returned by
// E2SmKpmIndicationMessage.Validate if the designated constraints aren't met.
type E2SmKpmIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubscriptId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat1ValidationError{
				field:  "SubscriptId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCellObjId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat1ValidationError{
				field:  "CellObjId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGranulPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat1ValidationError{
				field:  "GranulPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasInfoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat1ValidationError{
				field:  "MeasInfoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat1ValidationError{
				field:  "MeasData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageFormat1ValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessageFormat2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationMessageFormat2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubscriptId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat2ValidationError{
				field:  "SubscriptId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCellObjId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat2ValidationError{
				field:  "CellObjId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGranulPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat2ValidationError{
				field:  "GranulPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasCondUeidList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat2ValidationError{
				field:  "MeasCondUeidList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationMessageFormat2ValidationError{
				field:  "MeasData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmIndicationMessageFormat2ValidationError is the validation error
// returned by E2SmKpmIndicationMessageFormat2.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationMessageFormat2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageFormat2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageFormat2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageFormat2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageFormat2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageFormat2ValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageFormat2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageFormat2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessageFormat2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageFormat2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageFormat2ValidationError{}

// Validate checks the field values on E2SmKpmRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmRanfunctionDescription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRicKpmNodeList()) > 1024 {
		return E2SmKpmRanfunctionDescriptionValidationError{
			field:  "RicKpmNodeList",
			reason: "value must contain no more than 1024 item(s)",
		}
	}

	for idx, item := range m.GetRicKpmNodeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("RicKpmNodeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRicEventTriggerStyleList()) > 63 {
		return E2SmKpmRanfunctionDescriptionValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetRicReportStyleList()) > 63 {
		return E2SmKpmRanfunctionDescriptionValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain no more than 63 item(s)",
		}
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescriptionValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmRanfunctionDescriptionValidationError is the validation error
// returned by E2SmKpmRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmKpmRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmKpmRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmRanfunctionDescriptionValidationError{}

// Validate checks the field values on RicKpmnodeItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicKpmnodeItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicKpmnodeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicKpmnodeItemValidationError{
				field:  "RicKpmnodeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCellMeasurementObjectList()) > 16384 {
		return RicKpmnodeItemValidationError{
			field:  "CellMeasurementObjectList",
			reason: "value must contain no more than 16384 item(s)",
		}
	}

	for idx, item := range m.GetCellMeasurementObjectList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RicKpmnodeItemValidationError{
					field:  fmt.Sprintf("CellMeasurementObjectList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RicKpmnodeItemValidationError is the validation error returned by
// RicKpmnodeItem.Validate if the designated constraints aren't met.
type RicKpmnodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicKpmnodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicKpmnodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicKpmnodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicKpmnodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicKpmnodeItemValidationError) ErrorName() string { return "RicKpmnodeItemValidationError" }

// Error satisfies the builtin error interface
func (e RicKpmnodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicKpmnodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicKpmnodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicKpmnodeItemValidationError{}

// Validate checks the field values on CellMeasurementObjectItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CellMeasurementObjectItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCellObjectId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellMeasurementObjectItemValidationError{
				field:  "CellObjectId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCellGlobalId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellMeasurementObjectItemValidationError{
				field:  "CellGlobalId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CellMeasurementObjectItemValidationError is the validation error returned by
// CellMeasurementObjectItem.Validate if the designated constraints aren't met.
type CellMeasurementObjectItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellMeasurementObjectItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellMeasurementObjectItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellMeasurementObjectItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellMeasurementObjectItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellMeasurementObjectItemValidationError) ErrorName() string {
	return "CellMeasurementObjectItemValidationError"
}

// Error satisfies the builtin error interface
func (e CellMeasurementObjectItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellMeasurementObjectItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellMeasurementObjectItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellMeasurementObjectItemValidationError{}

// Validate checks the field values on RicEventTriggerStyleItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicEventTriggerStyleItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleItemValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicEventTriggerStyleItemValidationError is the validation error returned by
// RicEventTriggerStyleItem.Validate if the designated constraints aren't met.
type RicEventTriggerStyleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleItemValidationError) ErrorName() string {
	return "RicEventTriggerStyleItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleItemValidationError{}

// Validate checks the field values on RicReportStyleItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicReportStyleItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicActionFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "RicActionFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeasInfoActionList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "MeasInfoActionList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleItemValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicReportStyleItemValidationError is the validation error returned by
// RicReportStyleItem.Validate if the designated constraints aren't met.
type RicReportStyleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleItemValidationError) ErrorName() string {
	return "RicReportStyleItemValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleItemValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on CellObjectId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CellObjectId) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 0 || l > 400 {
		return CellObjectIdValidationError{
			field:  "Value",
			reason: "value length must be between 0 and 400 runes, inclusive",
		}
	}

	return nil
}

// CellObjectIdValidationError is the validation error returned by
// CellObjectId.Validate if the designated constraints aren't met.
type CellObjectIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellObjectIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellObjectIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellObjectIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellObjectIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellObjectIdValidationError) ErrorName() string { return "CellObjectIdValidationError" }

// Error satisfies the builtin error interface
func (e CellObjectIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellObjectId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellObjectIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellObjectIdValidationError{}

// Validate checks the field values on MeasurementTypeName with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeasurementTypeName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return MeasurementTypeNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// MeasurementTypeNameValidationError is the validation error returned by
// MeasurementTypeName.Validate if the designated constraints aren't met.
type MeasurementTypeNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasurementTypeNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasurementTypeNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasurementTypeNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasurementTypeNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasurementTypeNameValidationError) ErrorName() string {
	return "MeasurementTypeNameValidationError"
}

// Error satisfies the builtin error interface
func (e MeasurementTypeNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasurementTypeName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasurementTypeNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasurementTypeNameValidationError{}

// Validate checks the field values on UeIdentity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UeIdentity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// UeIdentityValidationError is the validation error returned by
// UeIdentity.Validate if the designated constraints aren't met.
type UeIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UeIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UeIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UeIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UeIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UeIdentityValidationError) ErrorName() string { return "UeIdentityValidationError" }

// Error satisfies the builtin error interface
func (e UeIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUeIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UeIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UeIdentityValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlmnIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 3 {
		return PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on TimeStamp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeStamp) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 4 {
		return TimeStampValidationError{
			field:  "Value",
			reason: "value length must be 4 bytes",
		}
	}

	return nil
}

// TimeStampValidationError is the validation error returned by
// TimeStamp.Validate if the designated constraints aren't met.
type TimeStampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeStampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeStampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeStampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeStampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeStampValidationError) ErrorName() string { return "TimeStampValidationError" }

// Error satisfies the builtin error interface
func (e TimeStampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeStamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeStampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeStampValidationError{}

// Validate checks the field values on EutracellIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EutracellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EutracellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EutracellIdentityValidationError is the validation error returned by
// EutracellIdentity.Validate if the designated constraints aren't met.
type EutracellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EutracellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EutracellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EutracellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EutracellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EutracellIdentityValidationError) ErrorName() string {
	return "EutracellIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e EutracellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEutracellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EutracellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EutracellIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NrcellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BitString) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	if m.GetLen() > 64 {
		return BitStringValidationError{
			field:  "Len",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}
