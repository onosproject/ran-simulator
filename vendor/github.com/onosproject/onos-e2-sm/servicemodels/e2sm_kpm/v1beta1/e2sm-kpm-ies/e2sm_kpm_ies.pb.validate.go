// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: e2sm_kpm/v1beta1/e2sm_kpm_ies.proto

package e2smkpmies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_sm_kpm_ies_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GlobalKpmnodeId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalKpmnodeId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GlobalKpmnodeId.(type) {

	case *GlobalKpmnodeId_GNb:

		if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_EnGNb:

		if v, ok := interface{}(m.GetEnGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "EnGNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_NgENb:

		if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalKpmnodeId_ENb:

		if v, ok := interface{}(m.GetENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalKpmnodeIdValidationError{
					field:  "ENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GlobalKpmnodeIdValidationError is the validation error returned by
// GlobalKpmnodeId.Validate if the designated constraints aren't met.
type GlobalKpmnodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeIdValidationError) ErrorName() string { return "GlobalKpmnodeIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalKpmnodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeIdValidationError{}

// Validate checks the field values on GlobalKpmnodeGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeGnbIdValidationError is the validation error returned by
// GlobalKpmnodeGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeGnbIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalgNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdChoiceValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeEnGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeEnGnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnGnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnGnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnGnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalenGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EngnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GlobalKpmnodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeNgEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeNgEnbIdValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeNgEnbIdValidationError is the validation error returned by
// GlobalKpmnodeNgEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeNgEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeNgEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeNgEnbIdValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalngeNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if v, ok := interface{}(m.GetEnbIdMacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdMacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if v, ok := interface{}(m.GetEnbIdShortmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdShortmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if v, ok := interface{}(m.GetEnbIdLongmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdLongmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on GlobalKpmnodeEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalKpmnodeEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalKpmnodeEnbIdValidationError{
				field:  "GlobalENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalKpmnodeEnbIdValidationError is the validation error returned by
// GlobalKpmnodeEnbId.Validate if the designated constraints aren't met.
type GlobalKpmnodeEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalKpmnodeEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalKpmnodeEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalKpmnodeEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalKpmnodeEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalKpmnodeEnbIdValidationError) ErrorName() string {
	return "GlobalKpmnodeEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalKpmnodeEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalKpmnodeEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalKpmnodeEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalKpmnodeEnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_ShortMacroENbId:

		if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_LongMacroENbId:

		if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on Nrcgi with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Nrcgi) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNRcellIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcgiValidationError{
				field:  "NRcellIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcgiValidationError is the validation error returned by Nrcgi.Validate if
// the designated constraints aren't met.
type NrcgiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcgiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcgiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcgiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcgiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcgiValidationError) ErrorName() string { return "NrcgiValidationError" }

// Error satisfies the builtin error interface
func (e NrcgiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcgi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcgiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcgiValidationError{}

// Validate checks the field values on Snssai with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Snssai) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSSt()) != 1 {
		return SnssaiValidationError{
			field:  "SSt",
			reason: "value length must be 1 bytes",
		}
	}

	if len(m.GetSD()) != 3 {
		return SnssaiValidationError{
			field:  "SD",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// SnssaiValidationError is the validation error returned by Snssai.Validate if
// the designated constraints aren't met.
type SnssaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnssaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnssaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnssaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnssaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnssaiValidationError) ErrorName() string { return "SnssaiValidationError" }

// Error satisfies the builtin error interface
func (e SnssaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnssai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnssaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnssaiValidationError{}

// Validate checks the field values on MaxofMessageProtocolTests with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofMessageProtocolTests) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 15 {
		return MaxofMessageProtocolTestsValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
	}

	return nil
}

// MaxofMessageProtocolTestsValidationError is the validation error returned by
// MaxofMessageProtocolTests.Validate if the designated constraints aren't met.
type MaxofMessageProtocolTestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofMessageProtocolTestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofMessageProtocolTestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofMessageProtocolTestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofMessageProtocolTestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofMessageProtocolTestsValidationError) ErrorName() string {
	return "MaxofMessageProtocolTestsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofMessageProtocolTestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofMessageProtocolTests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofMessageProtocolTestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofMessageProtocolTestsValidationError{}

// Validate checks the field values on MaxofRicstyles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxofRicstyles) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 63 {
		return MaxofRicstylesValidationError{
			field:  "Value",
			reason: "value must equal 63",
		}
	}

	return nil
}

// MaxofRicstylesValidationError is the validation error returned by
// MaxofRicstyles.Validate if the designated constraints aren't met.
type MaxofRicstylesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicstylesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicstylesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicstylesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicstylesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicstylesValidationError) ErrorName() string { return "MaxofRicstylesValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicstylesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicstyles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicstylesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicstylesValidationError{}

// Validate checks the field values on MaxnoofQci with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxnoofQci) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 256 {
		return MaxnoofQciValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
	}

	return nil
}

// MaxnoofQciValidationError is the validation error returned by
// MaxnoofQci.Validate if the designated constraints aren't met.
type MaxnoofQciValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQciValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQciValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQciValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQciValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQciValidationError) ErrorName() string { return "MaxnoofQciValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQciValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQci.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQciValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQciValidationError{}

// Validate checks the field values on MaxnoofQoSflows with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxnoofQoSflows) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 64 {
		return MaxnoofQoSflowsValidationError{
			field:  "Value",
			reason: "value must equal 64",
		}
	}

	return nil
}

// MaxnoofQoSflowsValidationError is the validation error returned by
// MaxnoofQoSflows.Validate if the designated constraints aren't met.
type MaxnoofQoSflowsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofQoSflowsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofQoSflowsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofQoSflowsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofQoSflowsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofQoSflowsValidationError) ErrorName() string { return "MaxnoofQoSflowsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofQoSflowsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofQoSflows.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofQoSflowsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofQoSflowsValidationError{}

// Validate checks the field values on MaxnoofSliceItems with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxnoofSliceItems) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 1024 {
		return MaxnoofSliceItemsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
	}

	return nil
}

// MaxnoofSliceItemsValidationError is the validation error returned by
// MaxnoofSliceItems.Validate if the designated constraints aren't met.
type MaxnoofSliceItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofSliceItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofSliceItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofSliceItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofSliceItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofSliceItemsValidationError) ErrorName() string {
	return "MaxnoofSliceItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofSliceItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofSliceItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofSliceItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofSliceItemsValidationError{}

// Validate checks the field values on MaxnoofContainerListItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxnoofContainerListItems) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 3 {
		return MaxnoofContainerListItemsValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
	}

	return nil
}

// MaxnoofContainerListItemsValidationError is the validation error returned by
// MaxnoofContainerListItems.Validate if the designated constraints aren't met.
type MaxnoofContainerListItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofContainerListItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofContainerListItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofContainerListItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofContainerListItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofContainerListItemsValidationError) ErrorName() string {
	return "MaxnoofContainerListItemsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxnoofContainerListItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofContainerListItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofContainerListItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofContainerListItemsValidationError{}

// Validate checks the field values on MaxCellingNbdu with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxCellingNbdu) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 512 {
		return MaxCellingNbduValidationError{
			field:  "Value",
			reason: "value must equal 512",
		}
	}

	return nil
}

// MaxCellingNbduValidationError is the validation error returned by
// MaxCellingNbdu.Validate if the designated constraints aren't met.
type MaxCellingNbduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxCellingNbduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxCellingNbduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxCellingNbduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxCellingNbduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxCellingNbduValidationError) ErrorName() string { return "MaxCellingNbduValidationError" }

// Error satisfies the builtin error interface
func (e MaxCellingNbduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxCellingNbdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxCellingNbduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxCellingNbduValidationError{}

// Validate checks the field values on MaxofContainers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxofContainers) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 8 {
		return MaxofContainersValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
	}

	return nil
}

// MaxofContainersValidationError is the validation error returned by
// MaxofContainers.Validate if the designated constraints aren't met.
type MaxofContainersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofContainersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofContainersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofContainersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofContainersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofContainersValidationError) ErrorName() string { return "MaxofContainersValidationError" }

// Error satisfies the builtin error interface
func (e MaxofContainersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofContainers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofContainersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofContainersValidationError{}

// Validate checks the field values on MaxPlmn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxPlmn) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 12 {
		return MaxPlmnValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
	}

	return nil
}

// MaxPlmnValidationError is the validation error returned by MaxPlmn.Validate
// if the designated constraints aren't met.
type MaxPlmnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxPlmnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxPlmnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxPlmnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxPlmnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxPlmnValidationError) ErrorName() string { return "MaxPlmnValidationError" }

// Error satisfies the builtin error interface
func (e MaxPlmnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxPlmn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxPlmnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxPlmnValidationError{}

// Validate checks the field values on RicStyleType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicStyleTypeValidationError is the validation error returned by
// RicStyleType.Validate if the designated constraints aren't met.
type RicStyleTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleTypeValidationError) ErrorName() string { return "RicStyleTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleTypeValidationError{}

// Validate checks the field values on RicFormatType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicFormatType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RicFormatTypeValidationError is the validation error returned by
// RicFormatType.Validate if the designated constraints aren't met.
type RicFormatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicFormatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicFormatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicFormatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicFormatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicFormatTypeValidationError) ErrorName() string { return "RicFormatTypeValidationError" }

// Error satisfies the builtin error interface
func (e RicFormatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicFormatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicFormatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicFormatTypeValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmEventTriggerDefinition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmEventTriggerDefinition.(type) {

	case *E2SmKpmEventTriggerDefinition_EventDefinitionFormat1:

		if v, ok := interface{}(m.GetEventDefinitionFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmEventTriggerDefinitionValidationError{
					field:  "EventDefinitionFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmEventTriggerDefinitionValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinition.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionValidationError{}

// Validate checks the field values on E2SmKpmEventTriggerDefinitionFormat1
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *E2SmKpmEventTriggerDefinitionFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPolicyTestList()); l < 1 || l > 15 {
		return E2SmKpmEventTriggerDefinitionFormat1ValidationError{
			field:  "PolicyTestList",
			reason: "value must contain between 1 and 15 items, inclusive",
		}
	}

	for idx, item := range m.GetPolicyTestList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmEventTriggerDefinitionFormat1ValidationError{
					field:  fmt.Sprintf("PolicyTestList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmEventTriggerDefinitionFormat1ValidationError is the validation error
// returned by E2SmKpmEventTriggerDefinitionFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmEventTriggerDefinitionFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) ErrorName() string {
	return "E2SmKpmEventTriggerDefinitionFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmEventTriggerDefinitionFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmEventTriggerDefinitionFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmEventTriggerDefinitionFormat1ValidationError{}

// Validate checks the field values on E2SmKpmActionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmActionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmActionDefinitionValidationError{
				field:  "RicStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmActionDefinitionValidationError is the validation error returned by
// E2SmKpmActionDefinition.Validate if the designated constraints aren't met.
type E2SmKpmActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmActionDefinitionValidationError) ErrorName() string {
	return "E2SmKpmActionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmActionDefinitionValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmIndicationHeader.(type) {

	case *E2SmKpmIndicationHeader_IndicationHeaderFormat1:

		if v, ok := interface{}(m.GetIndicationHeaderFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationHeaderValidationError{
					field:  "IndicationHeaderFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmIndicationHeaderValidationError is the validation error returned by
// E2SmKpmIndicationHeader.Validate if the designated constraints aren't met.
type E2SmKpmIndicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderValidationError{}

// Validate checks the field values on E2SmKpmIndicationHeaderFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationHeaderFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdGlobalKpmnodeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "IdGlobalKpmnodeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNRcgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "NRcgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmIndicationHeaderFormat1ValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		return E2SmKpmIndicationHeaderFormat1ValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
	}

	if val := m.GetQci(); val < 0 || val > 255 {
		return E2SmKpmIndicationHeaderFormat1ValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// E2SmKpmIndicationHeaderFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationHeaderFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationHeaderFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationHeaderFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationHeaderFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationHeaderFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationHeaderFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationHeaderFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationHeaderFormat1ValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2SmKpmIndicationMessage.(type) {

	case *E2SmKpmIndicationMessage_RicStyleType:

		if v, ok := interface{}(m.GetRicStyleType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "RicStyleType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2SmKpmIndicationMessage_IndicationMessageFormat1:

		if v, ok := interface{}(m.GetIndicationMessageFormat1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageValidationError{
					field:  "IndicationMessageFormat1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmIndicationMessageValidationError is the validation error returned by
// E2SmKpmIndicationMessage.Validate if the designated constraints aren't met.
type E2SmKpmIndicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageValidationError{}

// Validate checks the field values on E2SmKpmIndicationMessageFormat1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmIndicationMessageFormat1) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPmContainers()); l < 1 || l > 512 {
		return E2SmKpmIndicationMessageFormat1ValidationError{
			field:  "PmContainers",
			reason: "value must contain between 1 and 512 items, inclusive",
		}
	}

	for idx, item := range m.GetPmContainers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmIndicationMessageFormat1ValidationError{
					field:  fmt.Sprintf("PmContainers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmIndicationMessageFormat1ValidationError is the validation error
// returned by E2SmKpmIndicationMessageFormat1.Validate if the designated
// constraints aren't met.
type E2SmKpmIndicationMessageFormat1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmIndicationMessageFormat1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmIndicationMessageFormat1ValidationError) ErrorName() string {
	return "E2SmKpmIndicationMessageFormat1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmIndicationMessageFormat1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmIndicationMessageFormat1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmIndicationMessageFormat1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmIndicationMessageFormat1ValidationError{}

// Validate checks the field values on PmContainersList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PmContainersList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPerformanceContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PmContainersListValidationError{
				field:  "PerformanceContainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTheRancontainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PmContainersListValidationError{
				field:  "TheRancontainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PmContainersListValidationError is the validation error returned by
// PmContainersList.Validate if the designated constraints aren't met.
type PmContainersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PmContainersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PmContainersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PmContainersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PmContainersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PmContainersListValidationError) ErrorName() string { return "PmContainersListValidationError" }

// Error satisfies the builtin error interface
func (e PmContainersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPmContainersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PmContainersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PmContainersListValidationError{}

// Validate checks the field values on E2SmKpmRanfunctionDescription with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmRanfunctionDescription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRanFunctionName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmRanfunctionDescriptionValidationError{
				field:  "RanFunctionName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2SmKpmRanfunctionItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SmKpmRanfunctionDescriptionValidationError{
				field:  "E2SmKpmRanfunctionItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SmKpmRanfunctionDescriptionValidationError is the validation error
// returned by E2SmKpmRanfunctionDescription.Validate if the designated
// constraints aren't met.
type E2SmKpmRanfunctionDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SmKpmRanfunctionDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SmKpmRanfunctionDescriptionValidationError) ErrorName() string {
	return "E2SmKpmRanfunctionDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmRanfunctionDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmRanfunctionDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmRanfunctionDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmRanfunctionDescriptionValidationError{}

// Validate checks the field values on TriggerConditionIeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TriggerConditionIeItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportPeriodIe

	return nil
}

// TriggerConditionIeItemValidationError is the validation error returned by
// TriggerConditionIeItem.Validate if the designated constraints aren't met.
type TriggerConditionIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerConditionIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerConditionIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerConditionIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerConditionIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerConditionIeItemValidationError) ErrorName() string {
	return "TriggerConditionIeItemValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerConditionIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerConditionIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerConditionIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerConditionIeItemValidationError{}

// Validate checks the field values on RanfunctionName with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RanfunctionName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionShortName()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionShortName",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionE2SmOid()); l < 1 || l > 1000 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionE2SmOid",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRanFunctionDescription()); l < 1 || l > 150 {
		return RanfunctionNameValidationError{
			field:  "RanFunctionDescription",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	// no validation rules for RanFunctionInstance

	return nil
}

// RanfunctionNameValidationError is the validation error returned by
// RanfunctionName.Validate if the designated constraints aren't met.
type RanfunctionNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionNameValidationError) ErrorName() string { return "RanfunctionNameValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionNameValidationError{}

// Validate checks the field values on RicEventTriggerStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicEventTriggerStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicEventTriggerFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicEventTriggerStyleListValidationError{
				field:  "RicEventTriggerFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicEventTriggerStyleListValidationError is the validation error returned by
// RicEventTriggerStyleList.Validate if the designated constraints aren't met.
type RicEventTriggerStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicEventTriggerStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicEventTriggerStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicEventTriggerStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicEventTriggerStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicEventTriggerStyleListValidationError) ErrorName() string {
	return "RicEventTriggerStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicEventTriggerStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicEventTriggerStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicEventTriggerStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicEventTriggerStyleListValidationError{}

// Validate checks the field values on RicReportStyleList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicReportStyleList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicReportStyleType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicReportStyleName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicReportStyleName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationHeaderFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationHeaderFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndicationMessageFormatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicReportStyleListValidationError{
				field:  "RicIndicationMessageFormatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicReportStyleListValidationError is the validation error returned by
// RicReportStyleList.Validate if the designated constraints aren't met.
type RicReportStyleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicReportStyleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicReportStyleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicReportStyleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicReportStyleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicReportStyleListValidationError) ErrorName() string {
	return "RicReportStyleListValidationError"
}

// Error satisfies the builtin error interface
func (e RicReportStyleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicReportStyleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicReportStyleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicReportStyleListValidationError{}

// Validate checks the field values on PfContainer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PfContainer) Validate() error {
	if m == nil {
		return nil
	}

	switch m.PfContainer.(type) {

	case *PfContainer_ODu:

		if v, ok := interface{}(m.GetODu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "ODu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PfContainer_OCuCp:

		if v, ok := interface{}(m.GetOCuCp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "OCuCp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PfContainer_OCuUp:

		if v, ok := interface{}(m.GetOCuUp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PfContainerValidationError{
					field:  "OCuUp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PfContainerValidationError is the validation error returned by
// PfContainer.Validate if the designated constraints aren't met.
type PfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PfContainerValidationError) ErrorName() string { return "PfContainerValidationError" }

// Error satisfies the builtin error interface
func (e PfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PfContainerValidationError{}

// Validate checks the field values on OduPfContainer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OduPfContainer) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetCellResourceReportList()); l < 1 || l > 512 {
		return OduPfContainerValidationError{
			field:  "CellResourceReportList",
			reason: "value must contain between 1 and 512 items, inclusive",
		}
	}

	for idx, item := range m.GetCellResourceReportList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OduPfContainerValidationError{
					field:  fmt.Sprintf("CellResourceReportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OduPfContainerValidationError is the validation error returned by
// OduPfContainer.Validate if the designated constraints aren't met.
type OduPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OduPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OduPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OduPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OduPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OduPfContainerValidationError) ErrorName() string { return "OduPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OduPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOduPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OduPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OduPfContainerValidationError{}

// Validate checks the field values on CellResourceReportListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CellResourceReportListItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNRcgi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CellResourceReportListItemValidationError{
				field:  "NRcgi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetDlTotalofAvailablePrbs(); val < 0 || val > 273 {
		return CellResourceReportListItemValidationError{
			field:  "DlTotalofAvailablePrbs",
			reason: "value must be inside range [0, 273]",
		}
	}

	if val := m.GetUlTotalofAvailablePrbs(); val < 0 || val > 273 {
		return CellResourceReportListItemValidationError{
			field:  "UlTotalofAvailablePrbs",
			reason: "value must be inside range [0, 273]",
		}
	}

	if l := len(m.GetServedPlmnPerCellList()); l < 1 || l > 12 {
		return CellResourceReportListItemValidationError{
			field:  "ServedPlmnPerCellList",
			reason: "value must contain between 1 and 12 items, inclusive",
		}
	}

	for idx, item := range m.GetServedPlmnPerCellList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CellResourceReportListItemValidationError{
					field:  fmt.Sprintf("ServedPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CellResourceReportListItemValidationError is the validation error returned
// by CellResourceReportListItem.Validate if the designated constraints aren't met.
type CellResourceReportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CellResourceReportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CellResourceReportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CellResourceReportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CellResourceReportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CellResourceReportListItemValidationError) ErrorName() string {
	return "CellResourceReportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e CellResourceReportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCellResourceReportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CellResourceReportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CellResourceReportListItemValidationError{}

// Validate checks the field values on ServedPlmnPerCellListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServedPlmnPerCellListItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDuPm_5Gc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "DuPm_5Gc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDuPmEpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServedPlmnPerCellListItemValidationError{
				field:  "DuPmEpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServedPlmnPerCellListItemValidationError is the validation error returned by
// ServedPlmnPerCellListItem.Validate if the designated constraints aren't met.
type ServedPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServedPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServedPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServedPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServedPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServedPlmnPerCellListItemValidationError) ErrorName() string {
	return "ServedPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e ServedPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServedPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServedPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServedPlmnPerCellListItemValidationError{}

// Validate checks the field values on FgcDuPmContainer with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FgcDuPmContainer) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSlicePerPlmnPerCellList()); l < 1 || l > 1024 {
		return FgcDuPmContainerValidationError{
			field:  "SlicePerPlmnPerCellList",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetSlicePerPlmnPerCellList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FgcDuPmContainerValidationError{
					field:  fmt.Sprintf("SlicePerPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FgcDuPmContainerValidationError is the validation error returned by
// FgcDuPmContainer.Validate if the designated constraints aren't met.
type FgcDuPmContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FgcDuPmContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FgcDuPmContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FgcDuPmContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FgcDuPmContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FgcDuPmContainerValidationError) ErrorName() string { return "FgcDuPmContainerValidationError" }

// Error satisfies the builtin error interface
func (e FgcDuPmContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFgcDuPmContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FgcDuPmContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FgcDuPmContainerValidationError{}

// Validate checks the field values on SlicePerPlmnPerCellListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SlicePerPlmnPerCellListItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlicePerPlmnPerCellListItemValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetFQiperslicesPerPlmnPerCellList()); l < 1 || l > 64 {
		return SlicePerPlmnPerCellListItemValidationError{
			field:  "FQiperslicesPerPlmnPerCellList",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
	}

	for idx, item := range m.GetFQiperslicesPerPlmnPerCellList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SlicePerPlmnPerCellListItemValidationError{
					field:  fmt.Sprintf("FQiperslicesPerPlmnPerCellList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SlicePerPlmnPerCellListItemValidationError is the validation error returned
// by SlicePerPlmnPerCellListItem.Validate if the designated constraints
// aren't met.
type SlicePerPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlicePerPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlicePerPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlicePerPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlicePerPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlicePerPlmnPerCellListItemValidationError) ErrorName() string {
	return "SlicePerPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e SlicePerPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlicePerPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlicePerPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlicePerPlmnPerCellListItemValidationError{}

// Validate checks the field values on FqiperslicesPerPlmnPerCellListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *FqiperslicesPerPlmnPerCellListItem) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		return FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
	}

	if val := m.GetDlPrbusage(); val < 0 || val > 273 {
		return FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "DlPrbusage",
			reason: "value must be inside range [0, 273]",
		}
	}

	if val := m.GetUlPrbusage(); val < 0 || val > 273 {
		return FqiperslicesPerPlmnPerCellListItemValidationError{
			field:  "UlPrbusage",
			reason: "value must be inside range [0, 273]",
		}
	}

	return nil
}

// FqiperslicesPerPlmnPerCellListItemValidationError is the validation error
// returned by FqiperslicesPerPlmnPerCellListItem.Validate if the designated
// constraints aren't met.
type FqiperslicesPerPlmnPerCellListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FqiperslicesPerPlmnPerCellListItemValidationError) ErrorName() string {
	return "FqiperslicesPerPlmnPerCellListItemValidationError"
}

// Error satisfies the builtin error interface
func (e FqiperslicesPerPlmnPerCellListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFqiperslicesPerPlmnPerCellListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FqiperslicesPerPlmnPerCellListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FqiperslicesPerPlmnPerCellListItemValidationError{}

// Validate checks the field values on EpcDuPmContainer with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EpcDuPmContainer) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPerQcireportList()); l < 1 || l > 256 {
		return EpcDuPmContainerValidationError{
			field:  "PerQcireportList",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetPerQcireportList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpcDuPmContainerValidationError{
					field:  fmt.Sprintf("PerQcireportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EpcDuPmContainerValidationError is the validation error returned by
// EpcDuPmContainer.Validate if the designated constraints aren't met.
type EpcDuPmContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpcDuPmContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpcDuPmContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpcDuPmContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpcDuPmContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpcDuPmContainerValidationError) ErrorName() string { return "EpcDuPmContainerValidationError" }

// Error satisfies the builtin error interface
func (e EpcDuPmContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpcDuPmContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpcDuPmContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpcDuPmContainerValidationError{}

// Validate checks the field values on PerQcireportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PerQcireportListItem) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetQci(); val < 0 || val > 273 {
		return PerQcireportListItemValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 273]",
		}
	}

	if val := m.GetDlPrbusage(); val < 0 || val > 100 {
		return PerQcireportListItemValidationError{
			field:  "DlPrbusage",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetUlPrbusage(); val < 0 || val > 100 {
		return PerQcireportListItemValidationError{
			field:  "UlPrbusage",
			reason: "value must be inside range [0, 100]",
		}
	}

	return nil
}

// PerQcireportListItemValidationError is the validation error returned by
// PerQcireportListItem.Validate if the designated constraints aren't met.
type PerQcireportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerQcireportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerQcireportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerQcireportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerQcireportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerQcireportListItemValidationError) ErrorName() string {
	return "PerQcireportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e PerQcireportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerQcireportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerQcireportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerQcireportListItemValidationError{}

// Validate checks the field values on OcucpPfContainer with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OcucpPfContainer) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGNbCuCpName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcucpPfContainerValidationError{
				field:  "GNbCuCpName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCuCpResourceStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcucpPfContainerValidationError{
				field:  "CuCpResourceStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OcucpPfContainerValidationError is the validation error returned by
// OcucpPfContainer.Validate if the designated constraints aren't met.
type OcucpPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcucpPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcucpPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcucpPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcucpPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcucpPfContainerValidationError) ErrorName() string { return "OcucpPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OcucpPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcucpPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcucpPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcucpPfContainerValidationError{}

// Validate checks the field values on OcuupPfContainer with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OcuupPfContainer) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGNbCuUpName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OcuupPfContainerValidationError{
				field:  "GNbCuUpName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetPfContainerList()); l < 1 || l > 3 {
		return OcuupPfContainerValidationError{
			field:  "PfContainerList",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
	}

	for idx, item := range m.GetPfContainerList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OcuupPfContainerValidationError{
					field:  fmt.Sprintf("PfContainerList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OcuupPfContainerValidationError is the validation error returned by
// OcuupPfContainer.Validate if the designated constraints aren't met.
type OcuupPfContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcuupPfContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcuupPfContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcuupPfContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcuupPfContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcuupPfContainerValidationError) ErrorName() string { return "OcuupPfContainerValidationError" }

// Error satisfies the builtin error interface
func (e OcuupPfContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcuupPfContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcuupPfContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcuupPfContainerValidationError{}

// Validate checks the field values on PfContainerListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PfContainerListItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InterfaceType

	if v, ok := interface{}(m.GetOCuUpPmContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PfContainerListItemValidationError{
				field:  "OCuUpPmContainer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PfContainerListItemValidationError is the validation error returned by
// PfContainerListItem.Validate if the designated constraints aren't met.
type PfContainerListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PfContainerListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PfContainerListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PfContainerListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PfContainerListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PfContainerListItemValidationError) ErrorName() string {
	return "PfContainerListItemValidationError"
}

// Error satisfies the builtin error interface
func (e PfContainerListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPfContainerListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PfContainerListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PfContainerListItemValidationError{}

// Validate checks the field values on CuupmeasurementContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CuupmeasurementContainer) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPlmnList()); l < 1 || l > 12 {
		return CuupmeasurementContainerValidationError{
			field:  "PlmnList",
			reason: "value must contain between 1 and 12 items, inclusive",
		}
	}

	for idx, item := range m.GetPlmnList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CuupmeasurementContainerValidationError{
					field:  fmt.Sprintf("PlmnList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CuupmeasurementContainerValidationError is the validation error returned by
// CuupmeasurementContainer.Validate if the designated constraints aren't met.
type CuupmeasurementContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CuupmeasurementContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CuupmeasurementContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CuupmeasurementContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CuupmeasurementContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CuupmeasurementContainerValidationError) ErrorName() string {
	return "CuupmeasurementContainerValidationError"
}

// Error satisfies the builtin error interface
func (e CuupmeasurementContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCuupmeasurementContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CuupmeasurementContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CuupmeasurementContainerValidationError{}

// Validate checks the field values on PlmnIdList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PlmnIdList) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCuUpPm_5Gc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "CuUpPm_5Gc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCuUpPmEpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlmnIdListValidationError{
				field:  "CuUpPmEpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PlmnIdListValidationError is the validation error returned by
// PlmnIdList.Validate if the designated constraints aren't met.
type PlmnIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdListValidationError) ErrorName() string { return "PlmnIdListValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdListValidationError{}

// Validate checks the field values on FgcCuupPmFormat with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FgcCuupPmFormat) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSliceToReportList()); l < 1 || l > 1024 {
		return FgcCuupPmFormatValidationError{
			field:  "SliceToReportList",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetSliceToReportList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FgcCuupPmFormatValidationError{
					field:  fmt.Sprintf("SliceToReportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FgcCuupPmFormatValidationError is the validation error returned by
// FgcCuupPmFormat.Validate if the designated constraints aren't met.
type FgcCuupPmFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FgcCuupPmFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FgcCuupPmFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FgcCuupPmFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FgcCuupPmFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FgcCuupPmFormatValidationError) ErrorName() string { return "FgcCuupPmFormatValidationError" }

// Error satisfies the builtin error interface
func (e FgcCuupPmFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFgcCuupPmFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FgcCuupPmFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FgcCuupPmFormatValidationError{}

// Validate checks the field values on SliceToReportListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SliceToReportListItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSliceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SliceToReportListItemValidationError{
				field:  "SliceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetFQiperslicesPerPlmnList()); l < 1 || l > 64 {
		return SliceToReportListItemValidationError{
			field:  "FQiperslicesPerPlmnList",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
	}

	for idx, item := range m.GetFQiperslicesPerPlmnList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SliceToReportListItemValidationError{
					field:  fmt.Sprintf("FQiperslicesPerPlmnList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SliceToReportListItemValidationError is the validation error returned by
// SliceToReportListItem.Validate if the designated constraints aren't met.
type SliceToReportListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SliceToReportListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SliceToReportListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SliceToReportListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SliceToReportListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SliceToReportListItemValidationError) ErrorName() string {
	return "SliceToReportListItemValidationError"
}

// Error satisfies the builtin error interface
func (e SliceToReportListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSliceToReportListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SliceToReportListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SliceToReportListItemValidationError{}

// Validate checks the field values on FqiperslicesPerPlmnListItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FqiperslicesPerPlmnListItem) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetFiveQi(); val < 0 || val > 255 {
		return FqiperslicesPerPlmnListItemValidationError{
			field:  "FiveQi",
			reason: "value must be inside range [0, 255]",
		}
	}

	if val := m.GetPDcpbytesDl(); val < 0 || val > 10000000000 {
		return FqiperslicesPerPlmnListItemValidationError{
			field:  "PDcpbytesDl",
			reason: "value must be inside range [0, 10000000000]",
		}
	}

	if val := m.GetPDcpbytesUl(); val < 0 || val > 10000000000 {
		return FqiperslicesPerPlmnListItemValidationError{
			field:  "PDcpbytesUl",
			reason: "value must be inside range [0, 10000000000]",
		}
	}

	return nil
}

// FqiperslicesPerPlmnListItemValidationError is the validation error returned
// by FqiperslicesPerPlmnListItem.Validate if the designated constraints
// aren't met.
type FqiperslicesPerPlmnListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FqiperslicesPerPlmnListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FqiperslicesPerPlmnListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FqiperslicesPerPlmnListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FqiperslicesPerPlmnListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FqiperslicesPerPlmnListItemValidationError) ErrorName() string {
	return "FqiperslicesPerPlmnListItemValidationError"
}

// Error satisfies the builtin error interface
func (e FqiperslicesPerPlmnListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFqiperslicesPerPlmnListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FqiperslicesPerPlmnListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FqiperslicesPerPlmnListItemValidationError{}

// Validate checks the field values on EpcCuupPmFormat with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EpcCuupPmFormat) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetPerQcireportList()); l < 1 || l > 256 {
		return EpcCuupPmFormatValidationError{
			field:  "PerQcireportList",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetPerQcireportList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpcCuupPmFormatValidationError{
					field:  fmt.Sprintf("PerQcireportList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EpcCuupPmFormatValidationError is the validation error returned by
// EpcCuupPmFormat.Validate if the designated constraints aren't met.
type EpcCuupPmFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpcCuupPmFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpcCuupPmFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpcCuupPmFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpcCuupPmFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpcCuupPmFormatValidationError) ErrorName() string { return "EpcCuupPmFormatValidationError" }

// Error satisfies the builtin error interface
func (e EpcCuupPmFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpcCuupPmFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpcCuupPmFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpcCuupPmFormatValidationError{}

// Validate checks the field values on PerQcireportListItemFormat with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PerQcireportListItemFormat) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetQci(); val < 0 || val > 255 {
		return PerQcireportListItemFormatValidationError{
			field:  "Qci",
			reason: "value must be inside range [0, 255]",
		}
	}

	if val := m.GetPDcpbytesDl(); val < 0 || val > 10000000000 {
		return PerQcireportListItemFormatValidationError{
			field:  "PDcpbytesDl",
			reason: "value must be inside range [0, 10000000000]",
		}
	}

	if val := m.GetPDcpbytesUl(); val < 0 || val > 10000000000 {
		return PerQcireportListItemFormatValidationError{
			field:  "PDcpbytesUl",
			reason: "value must be inside range [0, 10000000000]",
		}
	}

	return nil
}

// PerQcireportListItemFormatValidationError is the validation error returned
// by PerQcireportListItemFormat.Validate if the designated constraints aren't met.
type PerQcireportListItemFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerQcireportListItemFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerQcireportListItemFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerQcireportListItemFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerQcireportListItemFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerQcireportListItemFormatValidationError) ErrorName() string {
	return "PerQcireportListItemFormatValidationError"
}

// Error satisfies the builtin error interface
func (e PerQcireportListItemFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerQcireportListItemFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerQcireportListItemFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerQcireportListItemFormatValidationError{}

// Validate checks the field values on PlmnIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlmnIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 3 {
		return PlmnIdentityValidationError{
			field:  "Value",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// PlmnIdentityValidationError is the validation error returned by
// PlmnIdentity.Validate if the designated constraints aren't met.
type PlmnIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlmnIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlmnIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlmnIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlmnIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlmnIdentityValidationError) ErrorName() string { return "PlmnIdentityValidationError" }

// Error satisfies the builtin error interface
func (e PlmnIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlmnIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlmnIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlmnIdentityValidationError{}

// Validate checks the field values on NrcellIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NrcellIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NrcellIdentityValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NrcellIdentityValidationError is the validation error returned by
// NrcellIdentity.Validate if the designated constraints aren't met.
type NrcellIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NrcellIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NrcellIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NrcellIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NrcellIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NrcellIdentityValidationError) ErrorName() string { return "NrcellIdentityValidationError" }

// Error satisfies the builtin error interface
func (e NrcellIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNrcellIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NrcellIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NrcellIdentityValidationError{}

// Validate checks the field values on RanContainer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RanContainer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// RanContainerValidationError is the validation error returned by
// RanContainer.Validate if the designated constraints aren't met.
type RanContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanContainerValidationError) ErrorName() string { return "RanContainerValidationError" }

// Error satisfies the builtin error interface
func (e RanContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanContainerValidationError{}

// Validate checks the field values on RicStyleName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicStyleName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return RicStyleNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// RicStyleNameValidationError is the validation error returned by
// RicStyleName.Validate if the designated constraints aren't met.
type RicStyleNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicStyleNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicStyleNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicStyleNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicStyleNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicStyleNameValidationError) ErrorName() string { return "RicStyleNameValidationError" }

// Error satisfies the builtin error interface
func (e RicStyleNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicStyleName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicStyleNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicStyleNameValidationError{}

// Validate checks the field values on GnbCuCpName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbCuCpName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return GnbCuCpNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// GnbCuCpNameValidationError is the validation error returned by
// GnbCuCpName.Validate if the designated constraints aren't met.
type GnbCuCpNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuCpNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuCpNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuCpNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuCpNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuCpNameValidationError) ErrorName() string { return "GnbCuCpNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuCpNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuCpName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuCpNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuCpNameValidationError{}

// Validate checks the field values on GnbDuName with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbDuName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return GnbDuNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// GnbDuNameValidationError is the validation error returned by
// GnbDuName.Validate if the designated constraints aren't met.
type GnbDuNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuNameValidationError) ErrorName() string { return "GnbDuNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuNameValidationError{}

// Validate checks the field values on GnbCuUpName with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbCuUpName) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 150 {
		return GnbCuUpNameValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// GnbCuUpNameValidationError is the validation error returned by
// GnbCuUpName.Validate if the designated constraints aren't met.
type GnbCuUpNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpNameValidationError) ErrorName() string { return "GnbCuUpNameValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpNameValidationError{}

// Validate checks the field values on BitString with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BitString) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	if m.GetLen() > 64 {
		return BitStringValidationError{
			field:  "Len",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// BitStringValidationError is the validation error returned by
// BitString.Validate if the designated constraints aren't met.
type BitStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitStringValidationError) ErrorName() string { return "BitStringValidationError" }

// Error satisfies the builtin error interface
func (e BitStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitStringValidationError{}

// Validate checks the field values on
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetRicEventTriggerStyleList()); l < 1 || l > 63 {
		return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
			field:  "RicEventTriggerStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicEventTriggerStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicEventTriggerStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetRicReportStyleList()); l < 1 || l > 63 {
		return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
			field:  "RicReportStyleList",
			reason: "value must contain between 1 and 63 items, inclusive",
		}
	}

	for idx, item := range m.GetRicReportStyleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{
					field:  fmt.Sprintf("RicReportStyleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError is
// the validation error returned by
// E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001.Validate if the
// designated constraints aren't met.
type E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) ErrorName() string {
	return "E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError"
}

// Error satisfies the builtin error interface
func (e E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SmKpmRanfunctionDescription_E2SmKpmRanfunctionItem001ValidationError{}

// Validate checks the field values on OcucpPfContainer_CuCpResourceStatus001
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *OcucpPfContainer_CuCpResourceStatus001) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetNumberOfActiveUes(); val < 0 || val > 65536 {
		return OcucpPfContainer_CuCpResourceStatus001ValidationError{
			field:  "NumberOfActiveUes",
			reason: "value must be inside range [0, 65536]",
		}
	}

	return nil
}

// OcucpPfContainer_CuCpResourceStatus001ValidationError is the validation
// error returned by OcucpPfContainer_CuCpResourceStatus001.Validate if the
// designated constraints aren't met.
type OcucpPfContainer_CuCpResourceStatus001ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) ErrorName() string {
	return "OcucpPfContainer_CuCpResourceStatus001ValidationError"
}

// Error satisfies the builtin error interface
func (e OcucpPfContainer_CuCpResourceStatus001ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOcucpPfContainer_CuCpResourceStatus001.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OcucpPfContainer_CuCpResourceStatus001ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OcucpPfContainer_CuCpResourceStatus001ValidationError{}
