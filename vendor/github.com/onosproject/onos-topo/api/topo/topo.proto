/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package topo defines interfaces for managing network top
package topo;

import "gogoproto/gogo.proto";
import "github.com/onosproject/onos-topo/api/device/device.proto";

// EntityService provides an API for managing entities.
service Topo {
  // Create a new topology object
  rpc Create (CreateRequest) returns (CreateResponse) {
  }

  // Get an object from topology
  rpc Get (GetRequest) returns (GetResponse) {
  }

  // Update an existing topology object
  rpc Update (UpdateRequest) returns (UpdateResponse) {
  }
  // Delete an object from topology
  rpc Delete (DeleteRequest) returns (DeleteResponse) {
  }

  // List gets a stream of requested objects
  rpc List (ListRequest) returns (ListResponse) {
  }

  // Watch returns a stream of topo change notifications
  rpc Watch (WatchRequest) returns (stream WatchResponse) {
  }
}

// EventType is a topo operation event type
enum EventType {
  NONE = 0;
  ADDED = 1;
  UPDATED = 2;
  REMOVED = 3;
}

// Event is a topo operation event
message Event {
  EventType type = 1;
  Object object = 2 [(gogoproto.nullable) = false];
}


message CreateRequest {
  Object object = 1;
}

message CreateResponse {
  Object object = 1;
}

message GetRequest {
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message GetResponse {
  Object object = 1;
}

message UpdateRequest {
  Object object = 1;
}

message UpdateResponse {
  Object object = 1;
}

message DeleteRequest {
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message DeleteResponse {
}

message ListRequest {
}

message ListResponse {
  repeated Object objects = 1 [(gogoproto.nullable) = false];
}

message WatchRequest {
  bool noreplay = 2;
}

message WatchResponse {
  Event event = 1 [(gogoproto.nullable) = false];
}

message Object {
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
  uint64 revision = 2 [(gogoproto.casttype) = "Revision"];

  enum Type {
    UNSPECIFIED = 0;
    ENTITY = 1;
    RELATION = 2;
    KIND = 3;
  }
  Type type = 3;

  oneof obj {
    Entity entity = 4;
    Relation relation = 5;
    Kind kind = 6;
  }

  map<string, string> attributes = 7;
}

// Entity represents any "thing" that is represented in the topology
message Entity {
  // user-defined entity kind
  string kind_id = 1 [(gogoproto.customname) = "KindID", (gogoproto.casttype) = "ID"];
  repeated topo.device.ProtocolState protocols = 2;
}

message Relation {
  // user defined relation kind
  string kind_id = 1 [(gogoproto.customname) = "KindID", (gogoproto.casttype) = "ID"];

  string src_entity_id = 2 [(gogoproto.customname) = "SrcEntityID", (gogoproto.casttype) = "ID"];
  string tgt_entity_id = 3 [(gogoproto.customname) = "TgtEntityID", (gogoproto.casttype) = "ID"];
}

message Kind {
  string name = 1;
  // Map of attributes and their default values for this Kind
  map<string, string> attributes = 2;
}
