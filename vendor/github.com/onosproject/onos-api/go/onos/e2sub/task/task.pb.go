// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/e2sub/task/task.proto

// Package onos.e2sub.task defines the interior gRPC interface for E2 termination registry service

package task

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_onosproject_onos_api_go_onos_e2sub_endpoint "github.com/onosproject/onos-api/go/onos/e2sub/endpoint"
	github_com_onosproject_onos_api_go_onos_e2sub_subscription "github.com/onosproject/onos-api/go/onos/e2sub/subscription"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phase is a subscription task phase
type Phase int32

const (
	// OPEN is a subscription task open phase
	Phase_OPEN Phase = 0
	// CLOSE is a subscription task close phase
	Phase_CLOSE Phase = 1
)

var Phase_name = map[int32]string{
	0: "OPEN",
	1: "CLOSE",
}

var Phase_value = map[string]int32{
	"OPEN":  0,
	"CLOSE": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{0}
}

// Status is a subscription task status
type Status int32

const (
	// PENDING indicates the subscription task phase is pending
	Status_PENDING Status = 0
	// COMPLETE indicates the subscription task phase is complete
	Status_COMPLETE Status = 1
	// FAILED indicates the subscription task phase failed
	Status_FAILED Status = 2
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETE",
	2: "FAILED",
}

var Status_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 1,
	"FAILED":   2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{1}
}

// Cause is a failure cause
type Cause int32

const (
	Cause_CAUSE_UNKNOWN                                                    Cause = 0
	Cause_CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD                           Cause = 1
	Cause_CAUSE_MISC_HARDWARE_FAILURE                                      Cause = 2
	Cause_CAUSE_MISC_OM_INTERVENTION                                       Cause = 3
	Cause_CAUSE_MISC_UNSPECIFIED                                           Cause = 4
	Cause_CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR                             Cause = 5
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT                      Cause = 6
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY           Cause = 7
	Cause_CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE        Cause = 8
	Cause_CAUSE_PROTOCOL_SEMANTIC_ERROR                                    Cause = 9
	Cause_CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE Cause = 10
	Cause_CAUSE_PROTOCOL_UNSPECIFIED                                       Cause = 11
	Cause_CAUSE_RIC_RAN_FUNCTION_ID_INVALID                                Cause = 12
	Cause_CAUSE_RIC_ACTION_NOT_SUPPORTED                                   Cause = 13
	Cause_CAUSE_RIC_EXCESSIVE_ACTIONS                                      Cause = 14
	Cause_CAUSE_RIC_DUPLICATE_ACTION                                       Cause = 15
	Cause_CAUSE_RIC_DUPLICATE_EVENT                                        Cause = 16
	Cause_CAUSE_RIC_FUNCTION_RESOURCE_LIMIT                                Cause = 17
	Cause_CAUSE_RIC_REQUEST_ID_UNKNOWN                                     Cause = 18
	Cause_CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE         Cause = 19
	Cause_CAUSE_RIC_CONTROL_MESSAGE_INVALID                                Cause = 20
	Cause_CAUSE_RIC_CALL_PROCESS_ID_INVALID                                Cause = 21
	Cause_CAUSE_RIC_UNSPECIFIED                                            Cause = 22
	Cause_CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED                           Cause = 23
	Cause_CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS                             Cause = 24
	Cause_CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT                              Cause = 25
	Cause_CAUSE_TRANSPORT_UNSPECIFIED                                      Cause = 26
	Cause_CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE                   Cause = 27
)

var Cause_name = map[int32]string{
	0:  "CAUSE_UNKNOWN",
	1:  "CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD",
	2:  "CAUSE_MISC_HARDWARE_FAILURE",
	3:  "CAUSE_MISC_OM_INTERVENTION",
	4:  "CAUSE_MISC_UNSPECIFIED",
	5:  "CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR",
	6:  "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT",
	7:  "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY",
	8:  "CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE",
	9:  "CAUSE_PROTOCOL_SEMANTIC_ERROR",
	10: "CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE",
	11: "CAUSE_PROTOCOL_UNSPECIFIED",
	12: "CAUSE_RIC_RAN_FUNCTION_ID_INVALID",
	13: "CAUSE_RIC_ACTION_NOT_SUPPORTED",
	14: "CAUSE_RIC_EXCESSIVE_ACTIONS",
	15: "CAUSE_RIC_DUPLICATE_ACTION",
	16: "CAUSE_RIC_DUPLICATE_EVENT",
	17: "CAUSE_RIC_FUNCTION_RESOURCE_LIMIT",
	18: "CAUSE_RIC_REQUEST_ID_UNKNOWN",
	19: "CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE",
	20: "CAUSE_RIC_CONTROL_MESSAGE_INVALID",
	21: "CAUSE_RIC_CALL_PROCESS_ID_INVALID",
	22: "CAUSE_RIC_UNSPECIFIED",
	23: "CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED",
	24: "CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS",
	25: "CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT",
	26: "CAUSE_TRANSPORT_UNSPECIFIED",
	27: "CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE",
}

var Cause_value = map[string]int32{
	"CAUSE_UNKNOWN":                                                    0,
	"CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD":                           1,
	"CAUSE_MISC_HARDWARE_FAILURE":                                      2,
	"CAUSE_MISC_OM_INTERVENTION":                                       3,
	"CAUSE_MISC_UNSPECIFIED":                                           4,
	"CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR":                             5,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT":                      6,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY":           7,
	"CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE":        8,
	"CAUSE_PROTOCOL_SEMANTIC_ERROR":                                    9,
	"CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE": 10,
	"CAUSE_PROTOCOL_UNSPECIFIED":                                       11,
	"CAUSE_RIC_RAN_FUNCTION_ID_INVALID":                                12,
	"CAUSE_RIC_ACTION_NOT_SUPPORTED":                                   13,
	"CAUSE_RIC_EXCESSIVE_ACTIONS":                                      14,
	"CAUSE_RIC_DUPLICATE_ACTION":                                       15,
	"CAUSE_RIC_DUPLICATE_EVENT":                                        16,
	"CAUSE_RIC_FUNCTION_RESOURCE_LIMIT":                                17,
	"CAUSE_RIC_REQUEST_ID_UNKNOWN":                                     18,
	"CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE":         19,
	"CAUSE_RIC_CONTROL_MESSAGE_INVALID":                                20,
	"CAUSE_RIC_CALL_PROCESS_ID_INVALID":                                21,
	"CAUSE_RIC_UNSPECIFIED":                                            22,
	"CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED":                           23,
	"CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS":                             24,
	"CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT":                              25,
	"CAUSE_TRANSPORT_UNSPECIFIED":                                      26,
	"CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE":                   27,
}

func (x Cause) String() string {
	return proto.EnumName(Cause_name, int32(x))
}

func (Cause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{2}
}

// Type of change
type EventType int32

const (
	EventType_NONE    EventType = 0
	EventType_CREATED EventType = 1
	EventType_UPDATED EventType = 2
	EventType_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "CREATED",
	2: "UPDATED",
	3: "REMOVED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"CREATED": 1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{3}
}

// Lifecycle is a subscription task status
type Lifecycle struct {
	Phase   Phase    `protobuf:"varint,1,opt,name=phase,proto3,enum=onos.e2sub.task.Phase" json:"phase,omitempty"`
	Status  Status   `protobuf:"varint,2,opt,name=status,proto3,enum=onos.e2sub.task.Status" json:"status,omitempty"`
	Failure *Failure `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Lifecycle) Reset()         { *m = Lifecycle{} }
func (m *Lifecycle) String() string { return proto.CompactTextString(m) }
func (*Lifecycle) ProtoMessage()    {}
func (*Lifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{0}
}
func (m *Lifecycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lifecycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lifecycle.Merge(m, src)
}
func (m *Lifecycle) XXX_Size() int {
	return m.Size()
}
func (m *Lifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_Lifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_Lifecycle proto.InternalMessageInfo

func (m *Lifecycle) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_OPEN
}

func (m *Lifecycle) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *Lifecycle) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

// Failure is a subscription failure status
type Failure struct {
	Cause   Cause  `protobuf:"varint,1,opt,name=cause,proto3,enum=onos.e2sub.task.Cause" json:"cause,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{1}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCause() Cause {
	if m != nil {
		return m.Cause
	}
	return Cause_CAUSE_UNKNOWN
}

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
type SubscriptionTask struct {
	ID             ID                                                            `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	Revision       Revision                                                      `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	SubscriptionID github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID" json:"subscription_id,omitempty"`
	EndpointID     github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID     `protobuf:"bytes,4,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID" json:"endpoint_id,omitempty"`
	Lifecycle      Lifecycle                                                     `protobuf:"bytes,5,opt,name=lifecycle,proto3" json:"lifecycle"`
}

func (m *SubscriptionTask) Reset()         { *m = SubscriptionTask{} }
func (m *SubscriptionTask) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTask) ProtoMessage()    {}
func (*SubscriptionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{2}
}
func (m *SubscriptionTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTask.Merge(m, src)
}
func (m *SubscriptionTask) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTask.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTask proto.InternalMessageInfo

func (m *SubscriptionTask) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SubscriptionTask) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *SubscriptionTask) GetSubscriptionID() github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *SubscriptionTask) GetEndpointID() github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

func (m *SubscriptionTask) GetLifecycle() Lifecycle {
	if m != nil {
		return m.Lifecycle
	}
	return Lifecycle{}
}

// Event is a SubscriptionTask event
type Event struct {
	Type EventType        `protobuf:"varint,1,opt,name=type,proto3,enum=onos.e2sub.task.EventType" json:"type,omitempty"`
	Task SubscriptionTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{3}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetTask() SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return SubscriptionTask{}
}

// GetSubscriptionTaskRequest is a request for getting existing SubscriptionTask
type GetSubscriptionTaskRequest struct {
	ID ID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
}

func (m *GetSubscriptionTaskRequest) Reset()         { *m = GetSubscriptionTaskRequest{} }
func (m *GetSubscriptionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskRequest) ProtoMessage()    {}
func (*GetSubscriptionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{4}
}
func (m *GetSubscriptionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskRequest.Merge(m, src)
}
func (m *GetSubscriptionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskRequest proto.InternalMessageInfo

func (m *GetSubscriptionTaskRequest) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

// GetSubscriptionTaskResponse is a response with invormation about a requested SubscriptionTask
type GetSubscriptionTaskResponse struct {
	Task *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *GetSubscriptionTaskResponse) Reset()         { *m = GetSubscriptionTaskResponse{} }
func (m *GetSubscriptionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskResponse) ProtoMessage()    {}
func (*GetSubscriptionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{5}
}
func (m *GetSubscriptionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskResponse.Merge(m, src)
}
func (m *GetSubscriptionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskResponse proto.InternalMessageInfo

func (m *GetSubscriptionTaskResponse) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// ListSubscriptionTasksRequest is a request to list all available SubscriptionTasks
type ListSubscriptionTasksRequest struct {
	SubscriptionID github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID" json:"subscription_id,omitempty"`
	EndpointID     github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID     `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID" json:"endpoint_id,omitempty"`
}

func (m *ListSubscriptionTasksRequest) Reset()         { *m = ListSubscriptionTasksRequest{} }
func (m *ListSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksRequest) ProtoMessage()    {}
func (*ListSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{6}
}
func (m *ListSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubscriptionTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksRequest.Merge(m, src)
}
func (m *ListSubscriptionTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksRequest proto.InternalMessageInfo

func (m *ListSubscriptionTasksRequest) GetSubscriptionID() github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *ListSubscriptionTasksRequest) GetEndpointID() github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

// ListSubscriptionTasksResponse is a response to list all available SubscriptionTasks
type ListSubscriptionTasksResponse struct {
	Tasks []SubscriptionTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks"`
}

func (m *ListSubscriptionTasksResponse) Reset()         { *m = ListSubscriptionTasksResponse{} }
func (m *ListSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksResponse) ProtoMessage()    {}
func (*ListSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{7}
}
func (m *ListSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubscriptionTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksResponse.Merge(m, src)
}
func (m *ListSubscriptionTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksResponse proto.InternalMessageInfo

func (m *ListSubscriptionTasksResponse) GetTasks() []SubscriptionTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// WatchSubscriptionTasksRequest is a request to receive a stream of all SubscriptionTask changes.
type WatchSubscriptionTasksRequest struct {
	Noreplay       bool                                                          `protobuf:"varint,1,opt,name=noreplay,proto3" json:"noreplay,omitempty"`
	SubscriptionID github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID" json:"subscription_id,omitempty"`
	EndpointID     github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID     `protobuf:"bytes,3,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID" json:"endpoint_id,omitempty"`
}

func (m *WatchSubscriptionTasksRequest) Reset()         { *m = WatchSubscriptionTasksRequest{} }
func (m *WatchSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksRequest) ProtoMessage()    {}
func (*WatchSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{8}
}
func (m *WatchSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchSubscriptionTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksRequest.Merge(m, src)
}
func (m *WatchSubscriptionTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksRequest proto.InternalMessageInfo

func (m *WatchSubscriptionTasksRequest) GetNoreplay() bool {
	if m != nil {
		return m.Noreplay
	}
	return false
}

func (m *WatchSubscriptionTasksRequest) GetSubscriptionID() github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *WatchSubscriptionTasksRequest) GetEndpointID() github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

// WatchSubscriptionTasksResponse is a response indicating a change in the available SubscriptionTasks.
type WatchSubscriptionTasksResponse struct {
	Event Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
}

func (m *WatchSubscriptionTasksResponse) Reset()         { *m = WatchSubscriptionTasksResponse{} }
func (m *WatchSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksResponse) ProtoMessage()    {}
func (*WatchSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{9}
}
func (m *WatchSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchSubscriptionTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksResponse.Merge(m, src)
}
func (m *WatchSubscriptionTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksResponse proto.InternalMessageInfo

func (m *WatchSubscriptionTasksResponse) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event{}
}

// UpdateSubscriptionTaskRequest is a request for updating a SubscriptionTask status
type UpdateSubscriptionTaskRequest struct {
	Task *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *UpdateSubscriptionTaskRequest) Reset()         { *m = UpdateSubscriptionTaskRequest{} }
func (m *UpdateSubscriptionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskRequest) ProtoMessage()    {}
func (*UpdateSubscriptionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{10}
}
func (m *UpdateSubscriptionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSubscriptionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSubscriptionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSubscriptionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskRequest.Merge(m, src)
}
func (m *UpdateSubscriptionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSubscriptionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskRequest proto.InternalMessageInfo

func (m *UpdateSubscriptionTaskRequest) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// UpdateSubscriptionTaskResponse is a response to updating a SubscriptionTask status
type UpdateSubscriptionTaskResponse struct {
}

func (m *UpdateSubscriptionTaskResponse) Reset()         { *m = UpdateSubscriptionTaskResponse{} }
func (m *UpdateSubscriptionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskResponse) ProtoMessage()    {}
func (*UpdateSubscriptionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff57373c05f8f232, []int{11}
}
func (m *UpdateSubscriptionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSubscriptionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSubscriptionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSubscriptionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskResponse.Merge(m, src)
}
func (m *UpdateSubscriptionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSubscriptionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("onos.e2sub.task.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("onos.e2sub.task.Status", Status_name, Status_value)
	proto.RegisterEnum("onos.e2sub.task.Cause", Cause_name, Cause_value)
	proto.RegisterEnum("onos.e2sub.task.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Lifecycle)(nil), "onos.e2sub.task.Lifecycle")
	proto.RegisterType((*Failure)(nil), "onos.e2sub.task.Failure")
	proto.RegisterType((*SubscriptionTask)(nil), "onos.e2sub.task.SubscriptionTask")
	proto.RegisterType((*Event)(nil), "onos.e2sub.task.Event")
	proto.RegisterType((*GetSubscriptionTaskRequest)(nil), "onos.e2sub.task.GetSubscriptionTaskRequest")
	proto.RegisterType((*GetSubscriptionTaskResponse)(nil), "onos.e2sub.task.GetSubscriptionTaskResponse")
	proto.RegisterType((*ListSubscriptionTasksRequest)(nil), "onos.e2sub.task.ListSubscriptionTasksRequest")
	proto.RegisterType((*ListSubscriptionTasksResponse)(nil), "onos.e2sub.task.ListSubscriptionTasksResponse")
	proto.RegisterType((*WatchSubscriptionTasksRequest)(nil), "onos.e2sub.task.WatchSubscriptionTasksRequest")
	proto.RegisterType((*WatchSubscriptionTasksResponse)(nil), "onos.e2sub.task.WatchSubscriptionTasksResponse")
	proto.RegisterType((*UpdateSubscriptionTaskRequest)(nil), "onos.e2sub.task.UpdateSubscriptionTaskRequest")
	proto.RegisterType((*UpdateSubscriptionTaskResponse)(nil), "onos.e2sub.task.UpdateSubscriptionTaskResponse")
}

func init() { proto.RegisterFile("onos/e2sub/task/task.proto", fileDescriptor_ff57373c05f8f232) }

var fileDescriptor_ff57373c05f8f232 = []byte{
	// 1340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x37, 0x65, 0xcb, 0x96, 0xc6, 0x8e, 0xb3, 0xd9, 0x24, 0x8e, 0xac, 0xd8, 0xb2, 0xa3, 0xff,
	0x47, 0x0d, 0x27, 0x91, 0x0a, 0x15, 0x2d, 0x9a, 0x34, 0x29, 0x4a, 0x91, 0x6b, 0x67, 0x1b, 0x9a,
	0x54, 0x96, 0x2b, 0x39, 0xb9, 0x94, 0x90, 0x65, 0xc6, 0x61, 0xe3, 0x88, 0xaa, 0x49, 0x1b, 0x30,
	0xda, 0x73, 0x0f, 0x3d, 0xf5, 0x09, 0x7a, 0xed, 0xab, 0xe4, 0x98, 0x63, 0x4f, 0x46, 0xe1, 0x3c,
	0x41, 0xaf, 0x01, 0x0a, 0x14, 0xbb, 0x22, 0x25, 0x5a, 0x1f, 0x86, 0x53, 0x20, 0xc8, 0x45, 0xe0,
	0xee, 0xfc, 0xe6, 0x63, 0xe7, 0x37, 0xb3, 0xb3, 0x82, 0xbc, 0xdf, 0xf6, 0x83, 0xb2, 0x5b, 0x09,
	0x0e, 0x77, 0xca, 0x61, 0x33, 0x78, 0x29, 0x7f, 0x4a, 0x9d, 0x03, 0x3f, 0xf4, 0xf1, 0x65, 0x21,
	0x2b, 0x49, 0x59, 0x49, 0x6c, 0xe7, 0xaf, 0xed, 0xf9, 0x7b, 0xbe, 0x94, 0x95, 0xc5, 0x57, 0x17,
	0x56, 0xfc, 0x4d, 0x81, 0xac, 0xe1, 0x3d, 0x77, 0x5b, 0xc7, 0xad, 0x7d, 0x17, 0xdf, 0x81, 0x74,
	0xe7, 0x45, 0x33, 0x70, 0x73, 0xca, 0xaa, 0xb2, 0x36, 0x5f, 0x59, 0x28, 0x0d, 0x18, 0x29, 0xd5,
	0x84, 0x94, 0x75, 0x41, 0xb8, 0x0c, 0xd3, 0x41, 0xd8, 0x0c, 0x0f, 0x83, 0x5c, 0x4a, 0xc2, 0x6f,
	0x0c, 0xc1, 0x6d, 0x29, 0x66, 0x11, 0x0c, 0x57, 0x60, 0xe6, 0x79, 0xd3, 0xdb, 0x3f, 0x3c, 0x70,
	0x73, 0x93, 0xab, 0xca, 0xda, 0x6c, 0x25, 0x37, 0xa4, 0xb1, 0xd1, 0x95, 0xb3, 0x18, 0x58, 0x7c,
	0x02, 0x33, 0xd1, 0x9e, 0x88, 0xae, 0xd5, 0x3c, 0x3c, 0x27, 0x3a, 0x4d, 0x48, 0x59, 0x17, 0x84,
	0x73, 0x30, 0xf3, 0xca, 0x0d, 0x82, 0xe6, 0x9e, 0x2b, 0xc3, 0xcb, 0xb2, 0x78, 0x59, 0xfc, 0x79,
	0x12, 0x90, 0x7d, 0xb8, 0x13, 0xb4, 0x0e, 0xbc, 0x4e, 0xe8, 0xf9, 0x6d, 0xde, 0x0c, 0x5e, 0xe2,
	0x25, 0x48, 0x79, 0xbb, 0xd2, 0x72, 0xb6, 0x3a, 0x77, 0x7a, 0xb2, 0x92, 0xa2, 0xfa, 0x3b, 0xf9,
	0xcb, 0x52, 0xde, 0x2e, 0x5e, 0x83, 0xcc, 0x81, 0x7b, 0xe4, 0x05, 0x9e, 0xdf, 0x96, 0xd6, 0xa6,
	0xaa, 0x73, 0xef, 0x4e, 0x56, 0x32, 0x2c, 0xda, 0x63, 0x3d, 0x29, 0xfe, 0x09, 0x2e, 0x07, 0x09,
	0xdb, 0x8e, 0xb7, 0x2b, 0xcf, 0x9a, 0xad, 0xda, 0xa7, 0x27, 0x2b, 0xf3, 0x49, 0xb7, 0xd2, 0xc1,
	0xc3, 0x3d, 0x2f, 0x7c, 0x71, 0xb8, 0x53, 0x6a, 0xf9, 0xaf, 0xca, 0xe2, 0x38, 0x9d, 0x03, 0xff,
	0x7b, 0xb7, 0x15, 0xca, 0xef, 0xbb, 0xcd, 0x8e, 0x57, 0xde, 0xf3, 0xcb, 0x09, 0x96, 0x93, 0xa6,
	0x4b, 0x54, 0x67, 0xf3, 0xc9, 0x0d, 0xba, 0x8b, 0xf7, 0x61, 0xd6, 0x6d, 0xef, 0x76, 0x7c, 0xaf,
	0x1d, 0x0a, 0xcf, 0x53, 0xd2, 0xf3, 0xe3, 0xd3, 0x93, 0x15, 0x20, 0xd1, 0xb6, 0xf4, 0x7a, 0xef,
	0xfd, 0xbc, 0xc6, 0x26, 0x85, 0x47, 0x88, 0x17, 0x74, 0x17, 0x7f, 0x0d, 0xd9, 0xfd, 0xb8, 0x76,
	0x72, 0x69, 0xc9, 0x68, 0x7e, 0x88, 0x94, 0x5e, 0x75, 0x55, 0xa7, 0x5e, 0x9f, 0xac, 0x4c, 0xb0,
	0xbe, 0x4a, 0x31, 0x84, 0x34, 0x39, 0x72, 0xdb, 0x21, 0x2e, 0xc1, 0x54, 0x78, 0xdc, 0x89, 0x89,
	0x1d, 0xb6, 0x21, 0x51, 0xfc, 0xb8, 0xe3, 0x32, 0x89, 0xc3, 0x5f, 0xc1, 0x94, 0xd8, 0x97, 0x54,
	0xcc, 0x56, 0x6e, 0x0d, 0xd7, 0xdd, 0x00, 0xbb, 0x91, 0x6b, 0xa9, 0x54, 0xbc, 0x0f, 0xf9, 0x4d,
	0x37, 0x1c, 0x84, 0x30, 0xf7, 0x87, 0x43, 0x37, 0x08, 0xcf, 0xaf, 0x83, 0x22, 0x87, 0x9b, 0x23,
	0x75, 0x83, 0x8e, 0xdf, 0x0e, 0x5c, 0xfc, 0x79, 0x14, 0x97, 0x72, 0xc1, 0xb8, 0xa2, 0x88, 0x7e,
	0x49, 0xc1, 0x92, 0xe1, 0x05, 0x43, 0x76, 0x83, 0x38, 0xa8, 0x11, 0x45, 0xa5, 0x7c, 0xb4, 0xa2,
	0x4a, 0x7d, 0xd0, 0xa2, 0x2a, 0x7e, 0x07, 0xcb, 0x63, 0x72, 0x11, 0x25, 0xf9, 0x21, 0xa4, 0x45,
	0xd6, 0x82, 0x9c, 0xb2, 0x3a, 0xf9, 0x3e, 0xec, 0x77, 0xb5, 0x8a, 0xbf, 0xa7, 0x60, 0x79, 0xbb,
	0x19, 0xb6, 0x5e, 0x8c, 0xcd, 0x76, 0x1e, 0x32, 0x6d, 0xff, 0xc0, 0xed, 0xec, 0x37, 0x8f, 0x65,
	0x9a, 0x33, 0xac, 0xb7, 0x1e, 0xc5, 0x44, 0xea, 0xa3, 0x31, 0x31, 0xf9, 0x61, 0x99, 0xe0, 0x50,
	0x18, 0x97, 0xa8, 0x88, 0x8a, 0x0a, 0xa4, 0x5d, 0xd1, 0x9a, 0x51, 0xc1, 0x2f, 0x8c, 0x6e, 0xdc,
	0x38, 0xff, 0x12, 0x5a, 0x6c, 0xc0, 0x72, 0xbd, 0xb3, 0xdb, 0x0c, 0xdd, 0x71, 0x1d, 0xf8, 0x2f,
	0x9b, 0x68, 0x15, 0x0a, 0xe3, 0xec, 0x76, 0xa3, 0x5d, 0x5f, 0x82, 0xb4, 0x9c, 0x5f, 0x38, 0x03,
	0x53, 0x56, 0x8d, 0x98, 0x68, 0x02, 0x67, 0x21, 0xad, 0x19, 0x96, 0x4d, 0x90, 0xb2, 0x5e, 0x86,
	0xe9, 0xee, 0xb8, 0xc2, 0xb3, 0x30, 0x53, 0x23, 0xa6, 0x4e, 0xcd, 0x4d, 0x34, 0x81, 0xe7, 0x20,
	0xa3, 0x59, 0x5b, 0x35, 0x83, 0x70, 0x82, 0x14, 0x0c, 0x30, 0xbd, 0xa1, 0x52, 0x83, 0xe8, 0x28,
	0xb5, 0xfe, 0x57, 0x06, 0xd2, 0x72, 0xe2, 0xe0, 0x2b, 0x70, 0x49, 0x53, 0xeb, 0x36, 0x71, 0xea,
	0xe6, 0x63, 0xd3, 0xda, 0x16, 0x86, 0xd7, 0xe1, 0xff, 0xdd, 0xad, 0x2d, 0x6a, 0x6b, 0x8e, 0x66,
	0x99, 0x9c, 0x59, 0x86, 0x53, 0x63, 0x96, 0x46, 0x6c, 0x9b, 0x9a, 0x9b, 0x8e, 0xd5, 0x20, 0xcc,
	0xb0, 0x54, 0x1d, 0x29, 0x78, 0x05, 0x6e, 0x26, 0xb0, 0x8f, 0x54, 0xa6, 0x6f, 0xab, 0x8c, 0x38,
	0xc2, 0x51, 0x9d, 0x11, 0x94, 0xc2, 0x05, 0xc8, 0x27, 0x00, 0xd6, 0x96, 0x43, 0x4d, 0x4e, 0x58,
	0x83, 0x98, 0x9c, 0x5a, 0x26, 0x9a, 0xc4, 0x79, 0x58, 0x48, 0xc8, 0xeb, 0xa6, 0x5d, 0x23, 0x1a,
	0xdd, 0xa0, 0x44, 0x47, 0x53, 0x78, 0x0d, 0xfe, 0xdb, 0x95, 0xd5, 0x98, 0xc5, 0x2d, 0xcd, 0x32,
	0x1c, 0xce, 0x54, 0xd3, 0xde, 0x20, 0xcc, 0xb1, 0x9f, 0x99, 0x5c, 0x7d, 0xea, 0x10, 0xc6, 0x2c,
	0x86, 0xd2, 0xb8, 0x0c, 0xb7, 0x07, 0x90, 0x6a, 0xd5, 0xe6, 0x4c, 0xd5, 0xf8, 0x19, 0xa4, 0xc3,
	0xc8, 0xb7, 0x44, 0xe3, 0x68, 0x1a, 0xdf, 0x87, 0x2f, 0x2e, 0xa4, 0x40, 0x37, 0x4d, 0x8b, 0x11,
	0x47, 0x35, 0x75, 0xc7, 0xb4, 0x38, 0xdd, 0x78, 0x86, 0x66, 0xf0, 0x43, 0xb8, 0x37, 0xa0, 0xbb,
	0x45, 0x6c, 0x5b, 0xdd, 0x24, 0x02, 0xe2, 0x88, 0x8c, 0xab, 0x9c, 0x56, 0x0d, 0xe2, 0x6c, 0x53,
	0xfe, 0xc8, 0x61, 0x44, 0x23, 0xb4, 0x21, 0x42, 0xe6, 0x2a, 0x27, 0x28, 0x83, 0x6f, 0xc1, 0xf2,
	0x80, 0xba, 0x4d, 0xb6, 0x54, 0x93, 0x53, 0x2d, 0x3a, 0x4e, 0x16, 0xeb, 0xf0, 0xcd, 0x85, 0xa2,
	0xdb, 0x50, 0x0d, 0x9b, 0x18, 0xcf, 0x04, 0x47, 0x36, 0x67, 0x75, 0x8d, 0x13, 0x3d, 0x8e, 0x05,
	0x41, 0x3f, 0xf5, 0x3d, 0x2b, 0xc9, 0xf4, 0xce, 0xe2, 0xff, 0xc1, 0xad, 0xae, 0x9c, 0x51, 0xcd,
	0x61, 0xaa, 0xe9, 0x6c, 0xd4, 0x4d, 0x4d, 0xd0, 0xe2, 0x50, 0xdd, 0xa1, 0x66, 0x43, 0x35, 0xa8,
	0x8e, 0xe6, 0x70, 0x11, 0x0a, 0x7d, 0x98, 0xda, 0x05, 0x88, 0x83, 0xda, 0xf5, 0x5a, 0xcd, 0x62,
	0x9c, 0xe8, 0xe8, 0x52, 0xbf, 0x0c, 0x04, 0x86, 0x3c, 0x95, 0x85, 0xd2, 0x20, 0x11, 0xda, 0x46,
	0xf3, 0xfd, 0x58, 0x04, 0x40, 0xaf, 0xd7, 0x0c, 0xaa, 0xa9, 0x3c, 0x06, 0xa0, 0xcb, 0x78, 0x19,
	0x16, 0x47, 0xc9, 0x89, 0x28, 0x14, 0x84, 0xce, 0x86, 0xda, 0x0b, 0x93, 0x11, 0xdb, 0xaa, 0x33,
	0x8d, 0x38, 0x06, 0xdd, 0xa2, 0x1c, 0x5d, 0xc1, 0xab, 0xb0, 0x94, 0x38, 0x11, 0x79, 0x52, 0x27,
	0x36, 0x17, 0x87, 0x89, 0x6b, 0x1b, 0xe3, 0x07, 0xf0, 0x65, 0x1f, 0x41, 0x4d, 0x91, 0x38, 0x6a,
	0x73, 0x62, 0xf2, 0xf8, 0x64, 0x76, 0xbd, 0x6a, 0x0b, 0xc5, 0xc4, 0x8e, 0x5c, 0x6a, 0x04, 0x5d,
	0x3d, 0x1b, 0x46, 0xdc, 0x18, 0x31, 0xf9, 0x71, 0xc6, 0xae, 0x0d, 0xc0, 0x54, 0xa3, 0xd7, 0x3c,
	0xc9, 0xc4, 0x5e, 0xc7, 0x8b, 0x70, 0xbd, 0x0f, 0x4b, 0x52, 0xb3, 0xd0, 0x6f, 0x41, 0x46, 0x35,
	0x9b, 0xb0, 0x06, 0xd5, 0x48, 0xff, 0xd8, 0x22, 0xf9, 0xe2, 0x70, 0x94, 0x11, 0x1d, 0xdd, 0xe8,
	0x77, 0x49, 0x02, 0xdb, 0xa7, 0x20, 0xd6, 0xb2, 0x51, 0x0e, 0x7f, 0x02, 0xff, 0x19, 0x42, 0x76,
	0x33, 0x75, 0x26, 0x8f, 0x8b, 0x7d, 0x3a, 0x65, 0xbf, 0x09, 0x96, 0xcf, 0xc4, 0x97, 0xc7, 0x15,
	0x28, 0x0d, 0x02, 0xfa, 0x5f, 0x3d, 0x73, 0x75, 0x53, 0x6d, 0xa8, 0xd4, 0x50, 0xab, 0x06, 0x41,
	0x37, 0xd7, 0x1f, 0x40, 0xb6, 0xf7, 0x16, 0x12, 0xd7, 0x98, 0x69, 0x99, 0x04, 0x4d, 0x88, 0x1b,
	0x4b, 0x63, 0x44, 0x15, 0x75, 0xa4, 0x88, 0x45, 0xbd, 0xa6, 0xcb, 0x45, 0x4a, 0x2c, 0x18, 0xd9,
	0xb2, 0x1a, 0x44, 0x47, 0x93, 0x95, 0xbf, 0x27, 0x61, 0x91, 0x54, 0x06, 0xef, 0x47, 0xdb, 0x3d,
	0x38, 0xf2, 0x5a, 0x2e, 0xee, 0xc0, 0xd5, 0x11, 0x6f, 0x1b, 0x7c, 0x7b, 0xe8, 0x02, 0x1e, 0xff,
	0x7a, 0xca, 0xdf, 0xb9, 0x18, 0x38, 0x1a, 0x1f, 0x47, 0x70, 0x7d, 0xe4, 0xa8, 0xc7, 0x77, 0x47,
	0xbc, 0x22, 0xc7, 0x3f, 0x8f, 0xf2, 0xa5, 0x8b, 0xc2, 0x23, 0xbf, 0x3f, 0xc2, 0xc2, 0xe8, 0xc1,
	0x86, 0x87, 0x2d, 0x9d, 0xfb, 0x54, 0xc8, 0x97, 0x2f, 0x8c, 0xef, 0xba, 0xfe, 0x54, 0xc1, 0xc7,
	0xb0, 0x30, 0x7a, 0x4e, 0x8d, 0x70, 0x7e, 0xee, 0xa0, 0x1c, 0xe1, 0xfc, 0xfc, 0x01, 0x58, 0xcd,
	0xbd, 0x3e, 0x2d, 0x28, 0x6f, 0x4e, 0x0b, 0xca, 0x9f, 0xa7, 0x05, 0xe5, 0xd7, 0xb7, 0x85, 0x89,
	0x37, 0x6f, 0x0b, 0x13, 0x7f, 0xbc, 0x2d, 0x4c, 0xec, 0x4c, 0xcb, 0x7f, 0x83, 0x9f, 0xfd, 0x13,
	0x00, 0x00, 0xff, 0xff, 0x42, 0x5a, 0x23, 0x27, 0x52, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2SubscriptionTaskServiceClient is the client API for E2SubscriptionTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2SubscriptionTaskServiceClient interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error)
	// UpdateSubscriptionTask updates a task status
	UpdateSubscriptionTask(ctx context.Context, in *UpdateSubscriptionTaskRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskResponse, error)
}

type e2SubscriptionTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2SubscriptionTaskServiceClient(cc *grpc.ClientConn) E2SubscriptionTaskServiceClient {
	return &e2SubscriptionTaskServiceClient{cc}
}

func (c *e2SubscriptionTaskServiceClient) GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error) {
	out := new(GetSubscriptionTaskResponse)
	err := c.cc.Invoke(ctx, "/onos.e2sub.task.E2SubscriptionTaskService/GetSubscriptionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error) {
	out := new(ListSubscriptionTasksResponse)
	err := c.cc.Invoke(ctx, "/onos.e2sub.task.E2SubscriptionTaskService/ListSubscriptionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_E2SubscriptionTaskService_serviceDesc.Streams[0], "/onos.e2sub.task.E2SubscriptionTaskService/WatchSubscriptionTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &e2SubscriptionTaskServiceWatchSubscriptionTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type E2SubscriptionTaskService_WatchSubscriptionTasksClient interface {
	Recv() (*WatchSubscriptionTasksResponse, error)
	grpc.ClientStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksClient struct {
	grpc.ClientStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksClient) Recv() (*WatchSubscriptionTasksResponse, error) {
	m := new(WatchSubscriptionTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *e2SubscriptionTaskServiceClient) UpdateSubscriptionTask(ctx context.Context, in *UpdateSubscriptionTaskRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskResponse, error) {
	out := new(UpdateSubscriptionTaskResponse)
	err := c.cc.Invoke(ctx, "/onos.e2sub.task.E2SubscriptionTaskService/UpdateSubscriptionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2SubscriptionTaskServiceServer is the server API for E2SubscriptionTaskService service.
type E2SubscriptionTaskServiceServer interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(context.Context, *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(context.Context, *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(*WatchSubscriptionTasksRequest, E2SubscriptionTaskService_WatchSubscriptionTasksServer) error
	// UpdateSubscriptionTask updates a task status
	UpdateSubscriptionTask(context.Context, *UpdateSubscriptionTaskRequest) (*UpdateSubscriptionTaskResponse, error)
}

// UnimplementedE2SubscriptionTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedE2SubscriptionTaskServiceServer struct {
}

func (*UnimplementedE2SubscriptionTaskServiceServer) GetSubscriptionTask(ctx context.Context, req *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionTask not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) ListSubscriptionTasks(ctx context.Context, req *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) WatchSubscriptionTasks(req *WatchSubscriptionTasksRequest, srv E2SubscriptionTaskService_WatchSubscriptionTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) UpdateSubscriptionTask(ctx context.Context, req *UpdateSubscriptionTaskRequest) (*UpdateSubscriptionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionTask not implemented")
}

func RegisterE2SubscriptionTaskServiceServer(s *grpc.Server, srv E2SubscriptionTaskServiceServer) {
	s.RegisterService(&_E2SubscriptionTaskService_serviceDesc, srv)
}

func _E2SubscriptionTaskService_GetSubscriptionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.e2sub.task.E2SubscriptionTaskService/GetSubscriptionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, req.(*GetSubscriptionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_ListSubscriptionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.e2sub.task.E2SubscriptionTaskService/ListSubscriptionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, req.(*ListSubscriptionTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSubscriptionTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2SubscriptionTaskServiceServer).WatchSubscriptionTasks(m, &e2SubscriptionTaskServiceWatchSubscriptionTasksServer{stream})
}

type E2SubscriptionTaskService_WatchSubscriptionTasksServer interface {
	Send(*WatchSubscriptionTasksResponse) error
	grpc.ServerStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksServer struct {
	grpc.ServerStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksServer) Send(m *WatchSubscriptionTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _E2SubscriptionTaskService_UpdateSubscriptionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.e2sub.task.E2SubscriptionTaskService/UpdateSubscriptionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTask(ctx, req.(*UpdateSubscriptionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2SubscriptionTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.e2sub.task.E2SubscriptionTaskService",
	HandlerType: (*E2SubscriptionTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionTask",
			Handler:    _E2SubscriptionTaskService_GetSubscriptionTask_Handler,
		},
		{
			MethodName: "ListSubscriptionTasks",
			Handler:    _E2SubscriptionTaskService_ListSubscriptionTasks_Handler,
		},
		{
			MethodName: "UpdateSubscriptionTask",
			Handler:    _E2SubscriptionTaskService_UpdateSubscriptionTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscriptionTasks",
			Handler:       _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onos/e2sub/task/task.proto",
}

func (m *Lifecycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lifecycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lifecycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Phase != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cause != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lifecycle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.EndpointID) > 0 {
		i -= len(m.EndpointID)
		copy(dAtA[i:], m.EndpointID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.EndpointID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubscriptionID) > 0 {
		i -= len(m.SubscriptionID)
		copy(dAtA[i:], m.SubscriptionID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.SubscriptionID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revision != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubscriptionTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubscriptionTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubscriptionTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndpointID) > 0 {
		i -= len(m.EndpointID)
		copy(dAtA[i:], m.EndpointID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.EndpointID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionID) > 0 {
		i -= len(m.SubscriptionID)
		copy(dAtA[i:], m.SubscriptionID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.SubscriptionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubscriptionTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubscriptionTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubscriptionTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchSubscriptionTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchSubscriptionTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchSubscriptionTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndpointID) > 0 {
		i -= len(m.EndpointID)
		copy(dAtA[i:], m.EndpointID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.EndpointID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubscriptionID) > 0 {
		i -= len(m.SubscriptionID)
		copy(dAtA[i:], m.SubscriptionID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.SubscriptionID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Noreplay {
		i--
		if m.Noreplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchSubscriptionTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchSubscriptionTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchSubscriptionTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateSubscriptionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSubscriptionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSubscriptionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSubscriptionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSubscriptionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSubscriptionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lifecycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovTask(uint64(m.Phase))
	}
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != 0 {
		n += 1 + sovTask(uint64(m.Cause))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *SubscriptionTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovTask(uint64(m.Revision))
	}
	l = len(m.SubscriptionID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.EndpointID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = m.Lifecycle.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTask(uint64(m.Type))
	}
	l = m.Task.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *GetSubscriptionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *GetSubscriptionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *ListSubscriptionTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.EndpointID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *ListSubscriptionTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	return n
}

func (m *WatchSubscriptionTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Noreplay {
		n += 2
	}
	l = len(m.SubscriptionID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.EndpointID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *WatchSubscriptionTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Event.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *UpdateSubscriptionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *UpdateSubscriptionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lifecycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lifecycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lifecycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= Cause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointID = github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lifecycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &SubscriptionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubscriptionTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubscriptionTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubscriptionTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointID = github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubscriptionTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubscriptionTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubscriptionTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, SubscriptionTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchSubscriptionTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchSubscriptionTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchSubscriptionTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noreplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noreplay = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = github_com_onosproject_onos_api_go_onos_e2sub_subscription.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointID = github_com_onosproject_onos_api_go_onos_e2sub_endpoint.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchSubscriptionTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchSubscriptionTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchSubscriptionTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSubscriptionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &SubscriptionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSubscriptionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
