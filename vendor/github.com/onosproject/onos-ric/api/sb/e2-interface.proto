/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";


package interface.e2;

// Definition of all message types in E2 interface
enum MessageType {
    UNKNOWN_MESSAGE = 0;
    CELL_CONFIG_REQUEST = 1; // Defined, but not used yet
    CELL_CONFIG_REPORT = 2; // Defined and used at xranc and ric-api-gw
    UE_ADMISSION_REQUEST = 3; // Defined, but not used yet
    UE_ADMISSION_RESPONSE = 4; // Defined, but not used yet
    UE_ADMISSION_STATUS = 5; // Defined and used at xranc and ric-api-gw
    UE_CONTEXT_UPDATE = 6; // Defined and used at xranc and ric-api-gw
    UE_RECONFIG_IND = 7; // Defined, but not used yet
    UE_RELEASE_IND = 8; // Defined, but not used yet
    BEARER_ADMISSION_REQUEST = 9; // Defined, but not used yet
    BEARER_ADMISSION_RESPONSE = 10; // Defined, but not used yet
    BEARER_ADMISSION_STATUS = 11; // Defined, but not used yet
    BEARER_RELEASE_IND = 12; // Defined, but not used yet
    HO_REQUEST = 13; // Defined, but not used yet
    HO_FAILURE = 14; // Defined, but not used yet
    HO_COMPLETE = 15; // Defined, but not used yet
    RXSIG_MEAS_REPORT = 16; // Defined, but not used yet
    L2_MEAS_CONFIG = 17; // Defined, but not used yet
    RADIO_MEAS_REPORT_PER_UE = 18; // Defined, but not used yet
    RADIO_MEAS_REPORT_PER_CELL = 19; // Defined, but not used yet
    SCHED_MEAS_REPORT_PER_UE = 20; // Defined, but not used yet
    SCHED_MEAS_REPORT_PER_CELL = 21; // Defined, but not used yet
    PDCP_MEAS_REPORT_PER_UE = 22; // Defined, but not used yet
    UE_CAPABILITY_INFO = 23; // Defined, but not used yet
    UE_CAPABILITY_ENQUIRY = 24; // Defined, but not used yet
    SCELL_ADD = 25; // Defined, but not used yet
    SCELL_ADD_STATUS = 26; // Defined, but not used yet
    SCELL_DELETE = 27; // Defined, but not used yet
    RRM_CONFIG = 28; // Defined, but not used yet
    RRM_CONFIG_STATUS = 29;  // Defined, but not used yet
    SENB_ADD = 30; // Defined, but not used yet
    SENB_ADD_STATUS = 31; // Defined, but not used yet
    SENB_DELETE = 32; // Defined, but not used yet
    TRAFFIC_SPLIT_CONFIG = 33; // Defined, but not used yet
    HO_CAUSE = 34; // Defined, but not used yet
    RRC_MEAS_CONFIG = 35; // Defined, but not used yet

    // Can be extended if necessary
}

// From here, detailed  interface messages are coming up
// Please read a specification document if you want to know in detail
// https://github.com/OpenNetworkingFoundation/xranc-sb-api/tree/master/docs

// Types of most values are 'string' for convenience

message ECGI {
    string plmnId = 1;
    string ecid = 2;
}

message CandScell {
    uint32 pci = 1;
    string earfcnDl = 2;
    ECGI ecgi = 3;
}

// CellConfigRequest message
message CellConfigRequest {
    ECGI ecgi = 1;
}

// CellConfigReport message
message CellConfigReport {
    ECGI ecgi = 1;
    uint32 pci = 2;
    repeated CandScell candScells = 3;
    string earfcnDl = 4;
    string earfcnUl = 5;
    uint32 rbsPerTtiDl = 6;
    uint32 rbsPerTtiUl = 7;
    uint32 numTxAntenna = 8;
    string duplexMode = 9;
    uint32 maxNumConnectedUes = 10;
    uint32 maxNumConnectedBearers = 11;
    uint32 maxNumUesSchedPerTtiDl = 12;
    uint32 maxNumUesSchedPerTtiUl = 13;
    string dlfsSchedEnable = 14;
}

enum AdmEstCause {
    EMERGENCY = 0;
    HIGHHP_ACCESS = 1;
    MT_ACCESS = 2;
    MO_SIGNALLING = 3;
    MO_DATA = 4;
}

enum SuccessOrFailure {
    SUCCESS = 0;
    FAILURE = 1;
}

// UEAdmissionRequest message
message UEAdmissionRequest {
    string crnti = 1;
    ECGI ecgi = 2;
    AdmEstCause admissionEstCause = 3;
    uint64 imsi = 4;
}

// UEAdmissionResponse message
message UEAdmissionResponse {
    string crnti = 1;
    ECGI ecgi = 2;
    SuccessOrFailure admissionEstResponse = 3;
}

// UEAdmissionStatus message
message UEAdmissionStatus {
    string crnti = 1;
    ECGI ecgi = 2;
    SuccessOrFailure admissionEstStatus = 3;
}

// UEContextUpdate message
message UEContextUpdate {
    string crnti = 1;
    ECGI ecgi = 2;
    string mmeUeS1apId = 3;
    string enbUeS1apId = 4;
    string imsi = 5;
}

enum ReconfigCause {
    RECONFIG_RLF = 0;
    RECONFIG_HO_FAIL = 1;
    RECONFIG_OTHERS = 2;
}

// UEReconfigInd message
message UEReconfigInd {
    string crntiOld = 1;
    ECGI ecgi = 2;
    string crntiNew = 3;
    ReconfigCause reconfigCause = 4;
}

enum ReleaseCause {
    RELEASE_INACTIVITY = 0;
    RELEASE_RLF = 1;
    RELEASE_OTHERS = 2;
}

// UEReleaseInd message
message UEReleaseInd {
    string crnti = 1;
    ECGI ecgi = 2;
    ReleaseCause releaseCause = 3;
}

message UEAMBR {
    string ambrDl = 1;
    string ambrUl = 2;
}

enum ERABDirection {
    DL = 0;
    UL = 1;
    BOTH = 2;
}

enum ERABType {
    ERAB_DEFAULT = 0;
    ERAB_DEDICATED = 1;
}

message ERABParamsItem {
    string id = 1;
    ERABDirection direction = 2;
    ERABType type = 3;
    string qci = 4;
    uint32 arp = 5;
    string gbrDl = 6;
    string gbrUl = 7;
    string mbrDl = 8;
    string mbrUl = 9;
}

message ERABResponseItem {
    string id = 1;
    SuccessOrFailure decision = 2;
}

// BearerAdmissionRequest message
message BearerAdmissionRequest {
    string crnti = 1;
    ECGI ecgi = 2;
    UEAMBR ueAmbr = 3;
    uint32 numErabsList = 4;
    repeated ERABParamsItem erabsParams = 5;
}

// BearerAdmissionResponse message
message BearerAdmissionResponse {
    string crnti = 1;
    ECGI ecgi = 2;
    uint32 numErabsList = 3;
    repeated ERABResponseItem erabResponse = 4;
}

// BearerAdmissionStatus message
message BearerAdmissionStatus {
    string crnti = 1;
    ECGI ecgi = 2;
    uint32 numErabsList = 3;
    repeated ERABResponseItem erabStatus = 4;
}

// BearerReleaseInd message
message BearerReleaseInd {
    string crnti = 1;
    ECGI ecgi = 2;
    uint32 numErabsList = 3;
    repeated string erabIds = 4;
}

// HORequest message
message HORequest {
    string crnti = 1;
    ECGI ecgiS = 2;
    ECGI ecgiT = 3;
    repeated string crntis = 4;
}

// HOFailure message
message HOFailure {
    string crnti = 1;
    ECGI ecgiS = 2;
    string hoFailureCause = 3; // Not defined in standard yet
}

// HOComplete message
message HOComplete {
    string crntiNew = 1;
    ECGI ecgiS = 2;
    ECGI ecgiT = 3;
}

// HOCause message
message HOCause {
    string crnti = 1;
    ECGI ecgiS = 2;
    ECGI ecgiT = 3;
    string hoCause = 4;
    repeated RXSigReport hoTrigger = 5;
}

message MeasCell {
    uint32 pci = 1;
    string cellIndividualOffset = 2;
}

message MeasObject {
    string dlFreq = 1;
    repeated MeasCell measCells = 2;
}

enum ReportParamPR {
    REPORT_PARAM_PR_NOTHING = 0;
    REPORT_PARAM_PR_PER_PARAM = 1;
    REPORT_PARAM_PR_A1PARAM = 2;
    REPORT_PARAM_PR_A2PARAM = 3;
    REPORT_PARAM_PR_A3PARAM = 4;
    REPORT_PARAM_PR_A4PARAM = 5;
    REPORT_PARAM_PR_A5PARAM = 6;
    REPORT_PARAM_PR_A6PARAM = 7;
}

message ReportParamChoice {
    oneof choice {
        PerParam perParam = 1;
        A1Param a1Param = 2;
        A2Param a2Param = 3;
        A3Param a3Param = 4;
        A4Param a4Param = 5;
        A5Param a5Param = 6;
        A6Param a6Param = 7;
    }
}

enum PerParamReportIntervalMs {
    PER_PARAM_MS_120 = 0;
    PER_PARAM_MS_240 = 1;
    PER_PARAM_MS_480 = 2;
    PER_PARAM_MS_640 = 3;
    PER_PARAM_MS_1024 = 4;
    PER_PARAM_MS_2048 = 5;
    PER_PARAM_MS_5120 = 6;
    PER_PARAM_MS_10240 = 7;
    PER_PARAM_MIN_1 = 8;
    PER_PARAM_MIN_6 = 9;
    PER_PARAM_MIN_12 = 10;
    PER_PARAM_MIN_30 = 11;
    PER_PARAM_MIN_60 = 12;
}

enum ThresholdEUTRAPR {
    THRESHOLD_EUTRA_PR_NOTHING = 0;
    THRESHOLD_EUTRA_PR_RSRP = 1;
    THRESHOLD_EUTRA_PR_RSRQ = 2;
}

message ThresholdEUTRAChoice {
    oneof choice {
        string thresholdRSRP = 1;
        string thresholdRSRQ = 2;
    }
}

message ThreasholdEUTRA {
    ThresholdEUTRAPR present = 1;
    ThresholdEUTRAChoice choice = 2;
}

message PerParam {
    PerParamReportIntervalMs reportIntervalMs = 1;
}

message A1Param {
    ThreasholdEUTRA a1Threshold = 1;
}

message A2Param {
    ThreasholdEUTRA a2Threshold = 1;
}

message A3Param {
    string a3Offset = 1;
}

message A4Param {
    ThreasholdEUTRA a4Threshold = 1;
}

message A5Param {
    ThreasholdEUTRA a5Threshold1 = 1;
    ThreasholdEUTRA a5Threshold2 = 2;
}

message A6Param {
    string a6Offset = 1;
}

enum TimeToTrigger {
    TTT_MS0 = 0;
    TTT_MS40 = 1;
    TTT_MS64 = 2;
    TTT_MS80 = 3;
    TTT_MS100 = 4;
    TTT_MS128 = 5;
    TTT_MS160 = 6;
    TTT_MS256 = 7;
    TTT_MS320 = 8;
    TTT_MS480 = 9;
    TTT_MS512 = 10;
    TTT_MS640 = 11;
    TTT_MS1024 = 12;
    TTT_MS1280 = 13;
    TTT_MS2560 = 14;
    TTT_MS5120 = 15;
}

message ReportParam {
    ReportParamPR present = 1;
    ReportParamChoice choice = 2;
    string hysteresis = 3;
    TimeToTrigger timetotrigger = 4;
}

enum TriggerQuantity {
    TQ_RSRP = 0;
    TQ_RSRQ = 1;
}

enum ReportQuality {
    RQ_SAME = 0;
    RQ_BOTH = 1;
}

message ReportConfig {
    ReportParam reportParams = 1;
    TriggerQuantity triggerQuantity = 2;
    ReportQuality reportQuality = 3;
}

enum MeasIdActionPR {
    MEAS_ID_ACTION_PR_NOTHING = 0;
    MEAS_ID_ACTION_PR_ADDMEASID = 1;
    MEAS_ID_ACTION_PR_DELMEASID = 2;
    MEAS_ID_ACTION_PR_HOTOTARGET = 3;
}

message AddMeasId {
    repeated string addMeasId = 1;
}

message DelMeasId {
    repeated string delMeasId = 1;
}

message MeasIdActionChoice {
    oneof choice {
        AddMeasId addMeasId = 1;
        DelMeasId delMeasId = 2;
        string hototarget = 3;
    }
}

message MeasIdAction {
    MeasIdActionPR present = 1;
    MeasIdActionChoice choice = 2;
}

message MeasID {
    string measObjectId = 1;
    string reportConfigId = 2;
    MeasIdAction action = 3;
}

// RRCMeasConfig message
message RRCMeasConfig {
    ECGI ecgi = 1;
    repeated string crnti = 2;
    repeated MeasObject measObjects = 3;
    repeated ReportConfig reportConfigs = 4;
    repeated MeasID measIds = 5;
}

message PCIARFCN {
    uint32 pci = 1;
    string earfcnDl = 2;
}

message RXSigReport {
    PCIARFCN pciArfcn = 1;
    ECGI ecgi = 2;
    string rsrp = 3;
    string rsrq = 4;
    //string measId = 5; not defined in our SBI
}

// RxSigMeasReport message
message RxSigMeasReport {
    repeated string crnti = 1;
    ECGI ecgi = 2;
    repeated RXSigReport cellMeasReport = 3;
}

enum L2MeasReportInterval {
    NO_REPORT = 0;
    MS_10 = 1;
    MS_50 = 2;
    MS_100 = 3;
    MS_200 = 4;
    MS_500 = 5;
    MS_1024 = 6;
    S_10 = 7;
    MIN_1 = 8;
    MIN_2 = 9;
    MIN_5 = 10;
}

message L2MeasConfig {
    L2MeasReportInterval radioMeasReportPerUe = 1;
    L2MeasReportInterval radioMeasReportPerCell = 2;
    L2MeasReportInterval schedMeasReportPerUe = 3;
    L2MeasReportInterval schedMeasReportPerCell = 4;
    L2MeasReportInterval pdcpMeasReportPerUe = 5;
}

// L2MeasureReports (periodic) messages
message RadioRepPerServCell {
    ECGI ecgi = 1;
    repeated uint32 cqiHist = 2;
    repeated string riHist = 3;
    repeated string puschSinrHist = 4;
    repeated string pucchSinrHist = 5;
}

// RadioMeasReportPerUE message
message RadioMeasReportPerUE {
    ECGI ecgi = 1;
    string crnti = 2;
    repeated RadioRepPerServCell radioReportServCells = 3;
}

// RadioMeasReportPerCell message
message RadioMeasReportPerCell {
    ECGI ecgi = 1;
    repeated uint32 puschIntfPwrHist = 2;
    repeated uint32 pucchIntfPowerHist = 3;
}

message PRBUsage {
    repeated string prbUsageDl = 1;
    repeated string prbUsageUl = 2;
}

message SchedMeasRepPerServCell {
    ECGI ecgi = 1;
    repeated string qciVals = 2;
    PRBUsage prbUsage = 3;
    repeated string mcsDl = 4;
    repeated string numSchedTtisDl = 5;
    repeated string mcsUl = 6;
    repeated string numSchedTtisUl = 7;
    repeated string rankDl1 = 8;
    repeated string rankDl2 = 9;
}

// SchedMeasReportPerUE message
message SchedMeasReportPerUE {
    ECGI ecgi = 1;
    string crnti = 2;
    repeated SchedMeasRepPerServCell schedReportServCells = 3;
}

// SchedMeasReportPerCell message
message SchedMeasReportPerCell {
    ECGI ecgi = 1;
    repeated string qciVals = 2;
    PRBUsage prbUsagePcell = 3;
    PRBUsage prbUsageScell = 4;
}

// PdcpMeasReportPerUE message
message PDCPMeasReportPerUe {
    ECGI ecgi = 1;
    string crnti = 2;
    repeated string qciVals = 3;
    repeated uint32 dataVolDl = 4;
    repeated uint32 dataVolUl = 5;
    repeated uint32 pktDelayDl = 6;
    repeated uint32 pktDiscardRateDl = 7;
    repeated uint32 pktLossRateDl = 8;
    repeated uint32 pktLossRateUl = 9;
    repeated uint32 throughputDl = 10;
    repeated uint32 throughputUl = 11;
}

enum XICICPA {
    XICIC_PA_DB_MINUS6 = 0;
    XICIC_PA_DB_MINUX4DOT77 = 1;
    XICIC_PA_DB_MINUS3 = 2;
    XICIC_PA_DB_MINUS1DOT77 = 3;
    XICIC_PA_DB_0 = 4;
    XICIC_PA_DB_1 = 5;
    XICIC_PA_DB_2 = 6;
    XICIC_PA_DB_3 = 7;
}

// RRMConfig message
message RRMConfig {
    ECGI ecgi = 1;
    repeated string crnti = 2;
    PCIARFCN pciArfcn = 3;
    repeated XICICPA pA = 4;
    repeated uint32 startPrbDl = 5;
    repeated uint32 endPrbDl = 6;
    repeated string subFrameBitmaskDl = 7;
    repeated uint32 p0UePusch = 8;
    repeated uint32 startPrbUl = 9;
    repeated uint32 endPrbUl = 10;
    repeated string subFrameBitmaskUl = 11;
}

// RRMConfigStatus message
message RRMConfigStatus {
    ECGI ecgi = 1;
    repeated string crnti = 2;
    repeated SuccessOrFailure status = 3;
}

enum CACapClassDl {
    CACAP_CLASSDL_A = 0;
    CACAP_CLASSDL_B = 1;
    CACAP_CLASSDL_C = 2;
    CACAP_CLASSDL_D = 3;
    CACAP_CLASSDL_E = 4;
    CACAP_CLASSDL_F = 5;
}

enum CACapClassUl {
    CACAP_CLASSUL_A = 0;
    CACAP_CLASSUL_B = 1;
    CACAP_CLASSUL_C = 2;
    CACAP_CLASSUL_D = 3;
    CACAP_CLASSUL_E = 4;
    CACAP_CLASSUL_F = 5;
}

message CACap {
    string band = 1;
    CACapClassDl caclassdl = 2;
    CACapClassUl caclassul = 3;
    string crossCarrierSched = 4;
}

enum DCCapDrbType {
    DCCAP_DRBTYPE_SUPPORTED = 0;
}

message DCCap {
    DCCapDrbType drbTypeSplit = 1;
}

// UECapabilityEnqyuiry message
message UECapabilityEnquiry {
    string crnti = 1;
    ECGI ecgi = 2;
}

// UECapabilityInfo message
message UECapabilityInfo {
    string crnti = 1;
    ECGI ecgi = 2;
    CACap caCap = 3;
    DCCap dcCap = 4;
}

enum CADirection {
    CADIRECTION_DL = 0;
    CADIRECTION_UL = 1;
    CADIRECTION_BOTH = 2;
}

message PropScell {
    PCIARFCN pciArfcn = 1;
    string crossCarrierSchedEnable = 2;
    CADirection caDirection = 3;
    string deactTimer = 4;
}

// ScellAdd message
message ScellAdd {
    string crnti = 1;
    ECGI ecgi = 2;
    repeated PropScell scellsProp = 3;
}

// ScellAddStatus message
message ScellAddStatus {
    string crnti = 1;
    ECGI ecgi = 2;
    repeated PCIARFCN scellsInd = 3;
    repeated SuccessOrFailure status = 4;
}

// ScellDelete message
message ScellDelete {
    string crnti = 1;
    ECGI ecgi = 2;
    repeated PCIARFCN scellsInd = 3;
}

// SeNBAdd message
message SeNBAdd {
    string crnti = 1;
    ECGI mEcgi = 2;
    ECGI sEcgi = 3;
}

// SeNBAddStatus message
message SeNBAddStatus {
    string crnti = 1;
    ECGI ecgi = 2;
    SuccessOrFailure status = 3;
}

// SeNBDelete message
message SeNBDelete {
    string crnti = 1;
    ECGI mEcgi = 2;
    ECGI sEcgi = 3;
}

message TrafficSplitPercentage {
    ECGI ecgi = 1;
    string trafficPercentageDl = 2;
    string trafficPercentageUl = 3;
}

// TrafficSplitConfig message
message TrafficSplitConfig {
    string crnti = 1;
    ECGI ecgi = 2;
    repeated TrafficSplitPercentage trafficSplitPercentage = 3;
}

// To be extended for other  message types
