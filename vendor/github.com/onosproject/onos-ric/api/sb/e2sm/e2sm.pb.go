// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/sb/e2sm/e2sm.proto

package e2sm

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	sb "github.com/onosproject/onos-ric/api/sb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionMessageType int32

const (
	SubscriptionMessageType_UNKNOWN_MESSAGE SubscriptionMessageType = 0
	SubscriptionMessageType_L2_MEAS_CONFIG  SubscriptionMessageType = 1
)

var SubscriptionMessageType_name = map[int32]string{
	0: "UNKNOWN_MESSAGE",
	1: "L2_MEAS_CONFIG",
}

var SubscriptionMessageType_value = map[string]int32{
	"UNKNOWN_MESSAGE": 0,
	"L2_MEAS_CONFIG":  1,
}

func (x SubscriptionMessageType) String() string {
	return proto.EnumName(SubscriptionMessageType_name, int32(x))
}

func (SubscriptionMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{0}
}

type RicSubscriptionHeader struct {
	MessageType SubscriptionMessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=interface.e2sm.SubscriptionMessageType" json:"messageType,omitempty"`
}

func (m *RicSubscriptionHeader) Reset()         { *m = RicSubscriptionHeader{} }
func (m *RicSubscriptionHeader) String() string { return proto.CompactTextString(m) }
func (*RicSubscriptionHeader) ProtoMessage()    {}
func (*RicSubscriptionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{0}
}
func (m *RicSubscriptionHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicSubscriptionHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicSubscriptionHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicSubscriptionHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicSubscriptionHeader.Merge(m, src)
}
func (m *RicSubscriptionHeader) XXX_Size() int {
	return m.Size()
}
func (m *RicSubscriptionHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RicSubscriptionHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RicSubscriptionHeader proto.InternalMessageInfo

func (m *RicSubscriptionHeader) GetMessageType() SubscriptionMessageType {
	if m != nil {
		return m.MessageType
	}
	return SubscriptionMessageType_UNKNOWN_MESSAGE
}

type RicSubscriptionMessage struct {
	// Types that are valid to be assigned to S:
	//	*RicSubscriptionMessage_L2MeasConfig
	S isRicSubscriptionMessage_S `protobuf_oneof:"s"`
}

func (m *RicSubscriptionMessage) Reset()         { *m = RicSubscriptionMessage{} }
func (m *RicSubscriptionMessage) String() string { return proto.CompactTextString(m) }
func (*RicSubscriptionMessage) ProtoMessage()    {}
func (*RicSubscriptionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{1}
}
func (m *RicSubscriptionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicSubscriptionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicSubscriptionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicSubscriptionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicSubscriptionMessage.Merge(m, src)
}
func (m *RicSubscriptionMessage) XXX_Size() int {
	return m.Size()
}
func (m *RicSubscriptionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RicSubscriptionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RicSubscriptionMessage proto.InternalMessageInfo

type isRicSubscriptionMessage_S interface {
	isRicSubscriptionMessage_S()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RicSubscriptionMessage_L2MeasConfig struct {
	L2MeasConfig *sb.L2MeasConfig `protobuf:"bytes,1,opt,name=l2MeasConfig,proto3,oneof" json:"l2MeasConfig,omitempty"`
}

func (*RicSubscriptionMessage_L2MeasConfig) isRicSubscriptionMessage_S() {}

func (m *RicSubscriptionMessage) GetS() isRicSubscriptionMessage_S {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RicSubscriptionMessage) GetL2MeasConfig() *sb.L2MeasConfig {
	if x, ok := m.GetS().(*RicSubscriptionMessage_L2MeasConfig); ok {
		return x.L2MeasConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RicSubscriptionMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RicSubscriptionMessage_L2MeasConfig)(nil),
	}
}

//-- **************************************************************
//-- Following IE defined in E2SM
//-- **************************************************************
//RICindicationHeader ::= OCTET STRING
//RICindicationMessage ::= OCTET STRING
type RicIndicationHeader struct {
	MessageType sb.MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=interface.e2.MessageType" json:"messageType,omitempty"`
}

func (m *RicIndicationHeader) Reset()         { *m = RicIndicationHeader{} }
func (m *RicIndicationHeader) String() string { return proto.CompactTextString(m) }
func (*RicIndicationHeader) ProtoMessage()    {}
func (*RicIndicationHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{2}
}
func (m *RicIndicationHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicIndicationHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicIndicationHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicIndicationHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicIndicationHeader.Merge(m, src)
}
func (m *RicIndicationHeader) XXX_Size() int {
	return m.Size()
}
func (m *RicIndicationHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RicIndicationHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RicIndicationHeader proto.InternalMessageInfo

func (m *RicIndicationHeader) GetMessageType() sb.MessageType {
	if m != nil {
		return m.MessageType
	}
	return sb.MessageType_UNKNOWN_MESSAGE
}

type RicIndicationMessage struct {
	// Types that are valid to be assigned to S:
	//	*RicIndicationMessage_RadioMeasReportPerUE
	//	*RicIndicationMessage_UEAdmissionRequest
	//	*RicIndicationMessage_UEReleaseInd
	//	*RicIndicationMessage_RadioMeasReportPerCell
	//	*RicIndicationMessage_CellConfigReport
	S isRicIndicationMessage_S `protobuf_oneof:"s"`
}

func (m *RicIndicationMessage) Reset()         { *m = RicIndicationMessage{} }
func (m *RicIndicationMessage) String() string { return proto.CompactTextString(m) }
func (*RicIndicationMessage) ProtoMessage()    {}
func (*RicIndicationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{3}
}
func (m *RicIndicationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicIndicationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicIndicationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicIndicationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicIndicationMessage.Merge(m, src)
}
func (m *RicIndicationMessage) XXX_Size() int {
	return m.Size()
}
func (m *RicIndicationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RicIndicationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RicIndicationMessage proto.InternalMessageInfo

type isRicIndicationMessage_S interface {
	isRicIndicationMessage_S()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RicIndicationMessage_RadioMeasReportPerUE struct {
	RadioMeasReportPerUE *sb.RadioMeasReportPerUE `protobuf:"bytes,1,opt,name=radioMeasReportPerUE,proto3,oneof" json:"radioMeasReportPerUE,omitempty"`
}
type RicIndicationMessage_UEAdmissionRequest struct {
	UEAdmissionRequest *sb.UEAdmissionRequest `protobuf:"bytes,2,opt,name=uEAdmissionRequest,proto3,oneof" json:"uEAdmissionRequest,omitempty"`
}
type RicIndicationMessage_UEReleaseInd struct {
	UEReleaseInd *sb.UEReleaseInd `protobuf:"bytes,3,opt,name=uEReleaseInd,proto3,oneof" json:"uEReleaseInd,omitempty"`
}
type RicIndicationMessage_RadioMeasReportPerCell struct {
	RadioMeasReportPerCell *sb.RadioMeasReportPerCell `protobuf:"bytes,4,opt,name=radioMeasReportPerCell,proto3,oneof" json:"radioMeasReportPerCell,omitempty"`
}
type RicIndicationMessage_CellConfigReport struct {
	CellConfigReport *sb.CellConfigReport `protobuf:"bytes,5,opt,name=cellConfigReport,proto3,oneof" json:"cellConfigReport,omitempty"`
}

func (*RicIndicationMessage_RadioMeasReportPerUE) isRicIndicationMessage_S()   {}
func (*RicIndicationMessage_UEAdmissionRequest) isRicIndicationMessage_S()     {}
func (*RicIndicationMessage_UEReleaseInd) isRicIndicationMessage_S()           {}
func (*RicIndicationMessage_RadioMeasReportPerCell) isRicIndicationMessage_S() {}
func (*RicIndicationMessage_CellConfigReport) isRicIndicationMessage_S()       {}

func (m *RicIndicationMessage) GetS() isRicIndicationMessage_S {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RicIndicationMessage) GetRadioMeasReportPerUE() *sb.RadioMeasReportPerUE {
	if x, ok := m.GetS().(*RicIndicationMessage_RadioMeasReportPerUE); ok {
		return x.RadioMeasReportPerUE
	}
	return nil
}

func (m *RicIndicationMessage) GetUEAdmissionRequest() *sb.UEAdmissionRequest {
	if x, ok := m.GetS().(*RicIndicationMessage_UEAdmissionRequest); ok {
		return x.UEAdmissionRequest
	}
	return nil
}

func (m *RicIndicationMessage) GetUEReleaseInd() *sb.UEReleaseInd {
	if x, ok := m.GetS().(*RicIndicationMessage_UEReleaseInd); ok {
		return x.UEReleaseInd
	}
	return nil
}

func (m *RicIndicationMessage) GetRadioMeasReportPerCell() *sb.RadioMeasReportPerCell {
	if x, ok := m.GetS().(*RicIndicationMessage_RadioMeasReportPerCell); ok {
		return x.RadioMeasReportPerCell
	}
	return nil
}

func (m *RicIndicationMessage) GetCellConfigReport() *sb.CellConfigReport {
	if x, ok := m.GetS().(*RicIndicationMessage_CellConfigReport); ok {
		return x.CellConfigReport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RicIndicationMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RicIndicationMessage_RadioMeasReportPerUE)(nil),
		(*RicIndicationMessage_UEAdmissionRequest)(nil),
		(*RicIndicationMessage_UEReleaseInd)(nil),
		(*RicIndicationMessage_RadioMeasReportPerCell)(nil),
		(*RicIndicationMessage_CellConfigReport)(nil),
	}
}

//RICcontrolHeader ::= OCTET STRING
type RicControlHeader struct {
	MessageType sb.MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=interface.e2.MessageType" json:"messageType,omitempty"`
	Ecgi        *sb.ECGI       `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti       []string       `protobuf:"bytes,3,rep,name=crnti,proto3" json:"crnti,omitempty"`
}

func (m *RicControlHeader) Reset()         { *m = RicControlHeader{} }
func (m *RicControlHeader) String() string { return proto.CompactTextString(m) }
func (*RicControlHeader) ProtoMessage()    {}
func (*RicControlHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{4}
}
func (m *RicControlHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicControlHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicControlHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicControlHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicControlHeader.Merge(m, src)
}
func (m *RicControlHeader) XXX_Size() int {
	return m.Size()
}
func (m *RicControlHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RicControlHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RicControlHeader proto.InternalMessageInfo

func (m *RicControlHeader) GetMessageType() sb.MessageType {
	if m != nil {
		return m.MessageType
	}
	return sb.MessageType_UNKNOWN_MESSAGE
}

func (m *RicControlHeader) GetEcgi() *sb.ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *RicControlHeader) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

//-- **************************************************************
//-- Following IE defined in E2SM
//-- **************************************************************
//RICcontrolMessage ::= OCTET STRING
type RicControlMessage struct {
	// Types that are valid to be assigned to S:
	//	*RicControlMessage_RRMConfig
	//	*RicControlMessage_HORequest
	//	*RicControlMessage_CellConfigRequest
	//	*RicControlMessage_L2MeasConfig
	S isRicControlMessage_S `protobuf_oneof:"s"`
}

func (m *RicControlMessage) Reset()         { *m = RicControlMessage{} }
func (m *RicControlMessage) String() string { return proto.CompactTextString(m) }
func (*RicControlMessage) ProtoMessage()    {}
func (*RicControlMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{5}
}
func (m *RicControlMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicControlMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicControlMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicControlMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicControlMessage.Merge(m, src)
}
func (m *RicControlMessage) XXX_Size() int {
	return m.Size()
}
func (m *RicControlMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RicControlMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RicControlMessage proto.InternalMessageInfo

type isRicControlMessage_S interface {
	isRicControlMessage_S()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RicControlMessage_RRMConfig struct {
	RRMConfig *sb.RRMConfig `protobuf:"bytes,1,opt,name=rRMConfig,proto3,oneof" json:"rRMConfig,omitempty"`
}
type RicControlMessage_HORequest struct {
	HORequest *sb.HORequest `protobuf:"bytes,2,opt,name=hORequest,proto3,oneof" json:"hORequest,omitempty"`
}
type RicControlMessage_CellConfigRequest struct {
	CellConfigRequest *sb.CellConfigRequest `protobuf:"bytes,3,opt,name=cellConfigRequest,proto3,oneof" json:"cellConfigRequest,omitempty"`
}
type RicControlMessage_L2MeasConfig struct {
	L2MeasConfig *sb.L2MeasConfig `protobuf:"bytes,4,opt,name=l2MeasConfig,proto3,oneof" json:"l2MeasConfig,omitempty"`
}

func (*RicControlMessage_RRMConfig) isRicControlMessage_S()         {}
func (*RicControlMessage_HORequest) isRicControlMessage_S()         {}
func (*RicControlMessage_CellConfigRequest) isRicControlMessage_S() {}
func (*RicControlMessage_L2MeasConfig) isRicControlMessage_S()      {}

func (m *RicControlMessage) GetS() isRicControlMessage_S {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RicControlMessage) GetRRMConfig() *sb.RRMConfig {
	if x, ok := m.GetS().(*RicControlMessage_RRMConfig); ok {
		return x.RRMConfig
	}
	return nil
}

func (m *RicControlMessage) GetHORequest() *sb.HORequest {
	if x, ok := m.GetS().(*RicControlMessage_HORequest); ok {
		return x.HORequest
	}
	return nil
}

func (m *RicControlMessage) GetCellConfigRequest() *sb.CellConfigRequest {
	if x, ok := m.GetS().(*RicControlMessage_CellConfigRequest); ok {
		return x.CellConfigRequest
	}
	return nil
}

func (m *RicControlMessage) GetL2MeasConfig() *sb.L2MeasConfig {
	if x, ok := m.GetS().(*RicControlMessage_L2MeasConfig); ok {
		return x.L2MeasConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RicControlMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RicControlMessage_RRMConfig)(nil),
		(*RicControlMessage_HORequest)(nil),
		(*RicControlMessage_CellConfigRequest)(nil),
		(*RicControlMessage_L2MeasConfig)(nil),
	}
}

type RicControlOutcome struct {
	// Types that are valid to be assigned to S:
	//	*RicControlOutcome_HOComplete
	//	*RicControlOutcome_HOFailure
	//	*RicControlOutcome_RRMConfigStatus
	//	*RicControlOutcome_CellConfigReport
	S isRicControlOutcome_S `protobuf_oneof:"s"`
}

func (m *RicControlOutcome) Reset()         { *m = RicControlOutcome{} }
func (m *RicControlOutcome) String() string { return proto.CompactTextString(m) }
func (*RicControlOutcome) ProtoMessage()    {}
func (*RicControlOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_048d76895a87e9ca, []int{6}
}
func (m *RicControlOutcome) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicControlOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicControlOutcome.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicControlOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicControlOutcome.Merge(m, src)
}
func (m *RicControlOutcome) XXX_Size() int {
	return m.Size()
}
func (m *RicControlOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_RicControlOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_RicControlOutcome proto.InternalMessageInfo

type isRicControlOutcome_S interface {
	isRicControlOutcome_S()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RicControlOutcome_HOComplete struct {
	HOComplete *sb.HOComplete `protobuf:"bytes,1,opt,name=hOComplete,proto3,oneof" json:"hOComplete,omitempty"`
}
type RicControlOutcome_HOFailure struct {
	HOFailure *sb.HOFailure `protobuf:"bytes,2,opt,name=hOFailure,proto3,oneof" json:"hOFailure,omitempty"`
}
type RicControlOutcome_RRMConfigStatus struct {
	RRMConfigStatus *sb.RRMConfigStatus `protobuf:"bytes,3,opt,name=rRMConfigStatus,proto3,oneof" json:"rRMConfigStatus,omitempty"`
}
type RicControlOutcome_CellConfigReport struct {
	CellConfigReport *sb.CellConfigReport `protobuf:"bytes,4,opt,name=cellConfigReport,proto3,oneof" json:"cellConfigReport,omitempty"`
}

func (*RicControlOutcome_HOComplete) isRicControlOutcome_S()       {}
func (*RicControlOutcome_HOFailure) isRicControlOutcome_S()        {}
func (*RicControlOutcome_RRMConfigStatus) isRicControlOutcome_S()  {}
func (*RicControlOutcome_CellConfigReport) isRicControlOutcome_S() {}

func (m *RicControlOutcome) GetS() isRicControlOutcome_S {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RicControlOutcome) GetHOComplete() *sb.HOComplete {
	if x, ok := m.GetS().(*RicControlOutcome_HOComplete); ok {
		return x.HOComplete
	}
	return nil
}

func (m *RicControlOutcome) GetHOFailure() *sb.HOFailure {
	if x, ok := m.GetS().(*RicControlOutcome_HOFailure); ok {
		return x.HOFailure
	}
	return nil
}

func (m *RicControlOutcome) GetRRMConfigStatus() *sb.RRMConfigStatus {
	if x, ok := m.GetS().(*RicControlOutcome_RRMConfigStatus); ok {
		return x.RRMConfigStatus
	}
	return nil
}

func (m *RicControlOutcome) GetCellConfigReport() *sb.CellConfigReport {
	if x, ok := m.GetS().(*RicControlOutcome_CellConfigReport); ok {
		return x.CellConfigReport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RicControlOutcome) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RicControlOutcome_HOComplete)(nil),
		(*RicControlOutcome_HOFailure)(nil),
		(*RicControlOutcome_RRMConfigStatus)(nil),
		(*RicControlOutcome_CellConfigReport)(nil),
	}
}

func init() {
	proto.RegisterEnum("interface.e2sm.SubscriptionMessageType", SubscriptionMessageType_name, SubscriptionMessageType_value)
	proto.RegisterType((*RicSubscriptionHeader)(nil), "interface.e2sm.RicSubscriptionHeader")
	proto.RegisterType((*RicSubscriptionMessage)(nil), "interface.e2sm.RicSubscriptionMessage")
	proto.RegisterType((*RicIndicationHeader)(nil), "interface.e2sm.RicIndicationHeader")
	proto.RegisterType((*RicIndicationMessage)(nil), "interface.e2sm.RicIndicationMessage")
	proto.RegisterType((*RicControlHeader)(nil), "interface.e2sm.RicControlHeader")
	proto.RegisterType((*RicControlMessage)(nil), "interface.e2sm.RicControlMessage")
	proto.RegisterType((*RicControlOutcome)(nil), "interface.e2sm.RicControlOutcome")
}

func init() { proto.RegisterFile("api/sb/e2sm/e2sm.proto", fileDescriptor_048d76895a87e9ca) }

var fileDescriptor_048d76895a87e9ca = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0xb5, 0x9b, 0x14, 0xa9, 0x53, 0xd4, 0xa6, 0xd3, 0xd2, 0x9a, 0x4a, 0x98, 0x2a, 0x42, 0x50,
	0x21, 0x35, 0x91, 0xc2, 0x02, 0x01, 0x1b, 0x5a, 0xcb, 0xad, 0x23, 0x9a, 0x18, 0x4d, 0x88, 0x60,
	0x45, 0xe4, 0x4c, 0x7e, 0xd3, 0x41, 0x8e, 0xc7, 0xcc, 0x8c, 0x17, 0x1c, 0x02, 0x89, 0x0b, 0xb0,
	0xe5, 0x0e, 0xdc, 0x80, 0x65, 0x97, 0x2c, 0x51, 0x73, 0x11, 0x14, 0xdb, 0x69, 0xec, 0x24, 0x16,
	0x12, 0xb0, 0x89, 0xe2, 0xfc, 0xf7, 0xde, 0xff, 0xff, 0xcd, 0x9b, 0x18, 0xed, 0x7a, 0x21, 0xab,
	0xcb, 0x7e, 0x1d, 0x1a, 0x72, 0x14, 0x7f, 0xd4, 0x42, 0xc1, 0x15, 0xc7, 0x1b, 0x2c, 0x50, 0x20,
	0x2e, 0x3c, 0x0a, 0xb5, 0xc9, 0xaf, 0xfb, 0xcf, 0x86, 0x4c, 0x5d, 0x46, 0xfd, 0x1a, 0xe5, 0xa3,
	0x3a, 0x0f, 0xb8, 0x0c, 0x05, 0xff, 0x00, 0x54, 0xc5, 0xdf, 0x8f, 0x04, 0xa3, 0xf5, 0x1b, 0x9d,
	0xa3, 0x19, 0x33, 0x96, 0xaa, 0xf6, 0xd1, 0x1d, 0xc2, 0x68, 0x27, 0xea, 0x4b, 0x2a, 0x58, 0xa8,
	0x18, 0x0f, 0x1c, 0xf0, 0x06, 0x20, 0x70, 0x13, 0xad, 0x8f, 0x40, 0x4a, 0x6f, 0x08, 0x6f, 0x3e,
	0x85, 0x60, 0xe8, 0x07, 0xfa, 0xe1, 0x46, 0xe3, 0x51, 0x2d, 0xdf, 0xb9, 0x96, 0x25, 0xb6, 0x66,
	0x70, 0x92, 0xe5, 0x56, 0x7b, 0x68, 0x77, 0xae, 0x47, 0x0a, 0xc5, 0x2f, 0xd1, 0x6d, 0xbf, 0xd1,
	0x02, 0x4f, 0x5a, 0x3c, 0xb8, 0x60, 0xc3, 0xb8, 0xcb, 0x7a, 0x63, 0x3f, 0xd7, 0xa5, 0x76, 0x9e,
	0x41, 0x38, 0x1a, 0xc9, 0x31, 0x4e, 0x4a, 0x48, 0x97, 0x55, 0x82, 0xb6, 0x09, 0xa3, 0xcd, 0x60,
	0xc0, 0xa8, 0x97, 0x59, 0xe1, 0xc5, 0xb2, 0x15, 0xee, 0xe6, 0xc5, 0x0b, 0x87, 0xfe, 0x5e, 0x42,
	0x3b, 0x39, 0xd1, 0xe9, 0xcc, 0xef, 0xd0, 0x8e, 0xf0, 0x06, 0x8c, 0x4f, 0x86, 0x20, 0x10, 0x72,
	0xa1, 0x5e, 0x83, 0xe8, 0xda, 0xe9, 0xec, 0xd5, 0xbc, 0x3c, 0x59, 0x82, 0x74, 0x34, 0xb2, 0x54,
	0x01, 0x13, 0x84, 0x23, 0xfb, 0x78, 0x30, 0x62, 0x52, 0x32, 0x1e, 0x10, 0xf8, 0x18, 0x81, 0x54,
	0xc6, 0x4a, 0xac, 0x7b, 0x90, 0xd7, 0xed, 0x2e, 0xe0, 0x1c, 0x8d, 0x2c, 0x61, 0x4f, 0x1c, 0x8e,
	0x6c, 0x02, 0x3e, 0x78, 0x12, 0x9a, 0xc1, 0xc0, 0x28, 0x2d, 0x73, 0xb8, 0x9b, 0x41, 0x4c, 0x1c,
	0xce, 0x32, 0xf0, 0x7b, 0xb4, 0xbb, 0x38, 0xad, 0x05, 0xbe, 0x6f, 0x94, 0x63, 0xad, 0x07, 0x7f,
	0xda, 0x78, 0x82, 0x75, 0x34, 0x52, 0xa0, 0x82, 0xcf, 0x51, 0x85, 0x82, 0xef, 0x27, 0xe7, 0x99,
	0x94, 0x8c, 0xd5, 0x58, 0xd9, 0xcc, 0x2b, 0x5b, 0x73, 0x28, 0x47, 0x23, 0x0b, 0xcc, 0x24, 0x0f,
	0x9f, 0x75, 0x54, 0x21, 0x8c, 0x5a, 0x3c, 0x50, 0x82, 0xfb, 0xff, 0x21, 0x0d, 0xf8, 0x21, 0x2a,
	0x03, 0x1d, 0xb2, 0xf4, 0x30, 0x70, 0x9e, 0x65, 0x5b, 0x67, 0x4d, 0x12, 0xd7, 0xf1, 0x0e, 0x5a,
	0xa5, 0x22, 0x50, 0xcc, 0x28, 0x1d, 0x94, 0x0e, 0xd7, 0x48, 0xf2, 0x50, 0xfd, 0xba, 0x82, 0xb6,
	0x66, 0xf3, 0x4c, 0x83, 0xf4, 0x14, 0xad, 0x09, 0xd2, 0xca, 0x25, 0x7f, 0x6f, 0xce, 0xcb, 0x69,
	0xd9, 0xd1, 0xc8, 0x0c, 0x3b, 0x21, 0x5e, 0xba, 0xf9, 0x78, 0xcc, 0x11, 0x1d, 0x77, 0x96, 0x8a,
	0x19, 0x16, 0xbb, 0x68, 0x2b, 0x6b, 0x58, 0x22, 0x90, 0x24, 0xe2, 0x7e, 0xb1, 0xd7, 0x53, 0xa1,
	0x45, 0xee, 0xc2, 0xfd, 0x2d, 0xff, 0xdd, 0xfd, 0xfd, 0x96, 0xf3, 0xc7, 0x8d, 0x14, 0xe5, 0x23,
	0xc0, 0xcf, 0x11, 0xba, 0x74, 0x2d, 0x3e, 0x0a, 0x7d, 0x50, 0x90, 0x1a, 0x64, 0xcc, 0xef, 0x39,
	0xad, 0x3b, 0x1a, 0xc9, 0xa0, 0x13, 0x8b, 0x4e, 0x3d, 0xe6, 0x47, 0x02, 0x8a, 0x2c, 0x4a, 0xcb,
	0x89, 0x45, 0xe9, 0x03, 0x6e, 0xa2, 0xcd, 0x1b, 0xa3, 0x3b, 0xca, 0x53, 0x91, 0x4c, 0x0d, 0xba,
	0x57, 0x70, 0x34, 0x09, 0xc8, 0xd1, 0xc8, 0x3c, 0x6f, 0x69, 0xb0, 0xcb, 0xff, 0x14, 0xec, 0xc7,
	0x27, 0x68, 0xaf, 0xe0, 0x1f, 0x17, 0x6f, 0xa3, 0xcd, 0x6e, 0xfb, 0x55, 0xdb, 0x7d, 0xdb, 0xee,
	0xb5, 0xec, 0x4e, 0xe7, 0xf8, 0xcc, 0xae, 0x68, 0x18, 0xa3, 0x8d, 0xf3, 0x46, 0xaf, 0x65, 0x1f,
	0x77, 0x7a, 0x96, 0xdb, 0x3e, 0x6d, 0x9e, 0x55, 0xf4, 0x13, 0xe3, 0xc7, 0xb5, 0xa9, 0x5f, 0x5d,
	0x9b, 0xfa, 0xaf, 0x6b, 0x53, 0xff, 0x32, 0x36, 0xb5, 0xab, 0xb1, 0xa9, 0xfd, 0x1c, 0x9b, 0x5a,
	0xff, 0x56, 0xfc, 0x4a, 0x78, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x86, 0x9c, 0x8e, 0xf9, 0x77,
	0x06, 0x00, 0x00,
}

func (m *RicSubscriptionHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicSubscriptionHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicSubscriptionHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		i = encodeVarintE2Sm(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RicSubscriptionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicSubscriptionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicSubscriptionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S != nil {
		{
			size := m.S.Size()
			i -= size
			if _, err := m.S.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RicSubscriptionMessage_L2MeasConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicSubscriptionMessage_L2MeasConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L2MeasConfig != nil {
		{
			size, err := m.L2MeasConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RicIndicationHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicIndicationHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		i = encodeVarintE2Sm(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RicIndicationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicIndicationMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S != nil {
		{
			size := m.S.Size()
			i -= size
			if _, err := m.S.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RicIndicationMessage_RadioMeasReportPerUE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage_RadioMeasReportPerUE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RadioMeasReportPerUE != nil {
		{
			size, err := m.RadioMeasReportPerUE.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RicIndicationMessage_UEAdmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage_UEAdmissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEAdmissionRequest != nil {
		{
			size, err := m.UEAdmissionRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RicIndicationMessage_UEReleaseInd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage_UEReleaseInd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEReleaseInd != nil {
		{
			size, err := m.UEReleaseInd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RicIndicationMessage_RadioMeasReportPerCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage_RadioMeasReportPerCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RadioMeasReportPerCell != nil {
		{
			size, err := m.RadioMeasReportPerCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RicIndicationMessage_CellConfigReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicIndicationMessage_CellConfigReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellConfigReport != nil {
		{
			size, err := m.CellConfigReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RicControlHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicControlHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2Sm(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MessageType != 0 {
		i = encodeVarintE2Sm(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RicControlMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicControlMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S != nil {
		{
			size := m.S.Size()
			i -= size
			if _, err := m.S.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RicControlMessage_RRMConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlMessage_RRMConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RRMConfig != nil {
		{
			size, err := m.RRMConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RicControlMessage_HORequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlMessage_HORequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HORequest != nil {
		{
			size, err := m.HORequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RicControlMessage_CellConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlMessage_CellConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellConfigRequest != nil {
		{
			size, err := m.CellConfigRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RicControlMessage_L2MeasConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlMessage_L2MeasConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L2MeasConfig != nil {
		{
			size, err := m.L2MeasConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RicControlOutcome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicControlOutcome) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlOutcome) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S != nil {
		{
			size := m.S.Size()
			i -= size
			if _, err := m.S.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RicControlOutcome_HOComplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlOutcome_HOComplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HOComplete != nil {
		{
			size, err := m.HOComplete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RicControlOutcome_HOFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlOutcome_HOFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HOFailure != nil {
		{
			size, err := m.HOFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RicControlOutcome_RRMConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlOutcome_RRMConfigStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RRMConfigStatus != nil {
		{
			size, err := m.RRMConfigStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RicControlOutcome_CellConfigReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicControlOutcome_CellConfigReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellConfigReport != nil {
		{
			size, err := m.CellConfigReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Sm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintE2Sm(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2Sm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RicSubscriptionHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovE2Sm(uint64(m.MessageType))
	}
	return n
}

func (m *RicSubscriptionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S != nil {
		n += m.S.Size()
	}
	return n
}

func (m *RicSubscriptionMessage_L2MeasConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L2MeasConfig != nil {
		l = m.L2MeasConfig.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicIndicationHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovE2Sm(uint64(m.MessageType))
	}
	return n
}

func (m *RicIndicationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S != nil {
		n += m.S.Size()
	}
	return n
}

func (m *RicIndicationMessage_RadioMeasReportPerUE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RadioMeasReportPerUE != nil {
		l = m.RadioMeasReportPerUE.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicIndicationMessage_UEAdmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEAdmissionRequest != nil {
		l = m.UEAdmissionRequest.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicIndicationMessage_UEReleaseInd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEReleaseInd != nil {
		l = m.UEReleaseInd.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicIndicationMessage_RadioMeasReportPerCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RadioMeasReportPerCell != nil {
		l = m.RadioMeasReportPerCell.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicIndicationMessage_CellConfigReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfigReport != nil {
		l = m.CellConfigReport.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovE2Sm(uint64(m.MessageType))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2Sm(uint64(l))
		}
	}
	return n
}

func (m *RicControlMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S != nil {
		n += m.S.Size()
	}
	return n
}

func (m *RicControlMessage_RRMConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RRMConfig != nil {
		l = m.RRMConfig.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlMessage_HORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HORequest != nil {
		l = m.HORequest.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlMessage_CellConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfigRequest != nil {
		l = m.CellConfigRequest.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlMessage_L2MeasConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L2MeasConfig != nil {
		l = m.L2MeasConfig.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlOutcome) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S != nil {
		n += m.S.Size()
	}
	return n
}

func (m *RicControlOutcome_HOComplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HOComplete != nil {
		l = m.HOComplete.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlOutcome_HOFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HOFailure != nil {
		l = m.HOFailure.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlOutcome_RRMConfigStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RRMConfigStatus != nil {
		l = m.RRMConfigStatus.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}
func (m *RicControlOutcome_CellConfigReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfigReport != nil {
		l = m.CellConfigReport.Size()
		n += 1 + l + sovE2Sm(uint64(l))
	}
	return n
}

func sovE2Sm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2Sm(x uint64) (n int) {
	return sovE2Sm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RicSubscriptionHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicSubscriptionHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicSubscriptionHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= SubscriptionMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicSubscriptionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicSubscriptionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicSubscriptionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2MeasConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.L2MeasConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicSubscriptionMessage_L2MeasConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicIndicationHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicIndicationHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicIndicationHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= sb.MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicIndicationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicIndicationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicIndicationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioMeasReportPerUE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.RadioMeasReportPerUE{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicIndicationMessage_RadioMeasReportPerUE{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEAdmissionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.UEAdmissionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicIndicationMessage_UEAdmissionRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEReleaseInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.UEReleaseInd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicIndicationMessage_UEReleaseInd{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioMeasReportPerCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.RadioMeasReportPerCell{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicIndicationMessage_RadioMeasReportPerCell{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfigReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.CellConfigReport{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicIndicationMessage_CellConfigReport{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicControlHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicControlHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicControlHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= sb.MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &sb.ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicControlMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicControlMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicControlMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RRMConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.RRMConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlMessage_RRMConfig{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HORequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.HORequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlMessage_HORequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfigRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.CellConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlMessage_CellConfigRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2MeasConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.L2MeasConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlMessage_L2MeasConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicControlOutcome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicControlOutcome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicControlOutcome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HOComplete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.HOComplete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlOutcome_HOComplete{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HOFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.HOFailure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlOutcome_HOFailure{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RRMConfigStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.RRMConfigStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlOutcome_RRMConfigStatus{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfigReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Sm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Sm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.CellConfigReport{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S = &RicControlOutcome_CellConfigReport{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Sm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Sm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2Sm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2Sm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Sm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2Sm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2Sm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2Sm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2Sm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2Sm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2Sm = fmt.Errorf("proto: unexpected end of group")
)
