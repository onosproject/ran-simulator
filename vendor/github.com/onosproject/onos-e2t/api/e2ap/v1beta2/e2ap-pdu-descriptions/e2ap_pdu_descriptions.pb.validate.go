// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta2/e2ap_pdu_descriptions.proto

package e2ap_pdu_descriptions

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_ap_pdu_descriptions_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on E2ApPdu with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *E2ApPdu) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2ApPdu.(type) {

	case *E2ApPdu_InitiatingMessage:

		if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "InitiatingMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2ApPdu_SuccessfulOutcome:

		if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "SuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2ApPdu_UnsuccessfulOutcome:

		if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2ApPduValidationError{
					field:  "UnsuccessfulOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2ApPduValidationError is the validation error returned by E2ApPdu.Validate
// if the designated constraints aren't met.
type E2ApPduValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ApPduValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ApPduValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ApPduValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ApPduValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ApPduValidationError) ErrorName() string { return "E2ApPduValidationError" }

// Error satisfies the builtin error interface
func (e E2ApPduValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ApPdu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ApPduValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ApPduValidationError{}

// Validate checks the field values on InitiatingMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InitiatingMessage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiatingMessageValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InitiatingMessageValidationError is the validation error returned by
// InitiatingMessage.Validate if the designated constraints aren't met.
type InitiatingMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiatingMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiatingMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiatingMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiatingMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiatingMessageValidationError) ErrorName() string {
	return "InitiatingMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InitiatingMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiatingMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiatingMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiatingMessageValidationError{}

// Validate checks the field values on SuccessfulOutcome with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SuccessfulOutcome) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuccessfulOutcomeValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SuccessfulOutcomeValidationError is the validation error returned by
// SuccessfulOutcome.Validate if the designated constraints aren't met.
type SuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessfulOutcomeValidationError) ErrorName() string {
	return "SuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e SuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessfulOutcomeValidationError{}

// Validate checks the field values on UnsuccessfulOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnsuccessfulOutcome) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsuccessfulOutcomeValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnsuccessfulOutcomeValidationError is the validation error returned by
// UnsuccessfulOutcome.Validate if the designated constraints aren't met.
type UnsuccessfulOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuccessfulOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuccessfulOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuccessfulOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuccessfulOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuccessfulOutcomeValidationError) ErrorName() string {
	return "UnsuccessfulOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuccessfulOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuccessfulOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuccessfulOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuccessfulOutcomeValidationError{}

// Validate checks the field values on E2ApElementaryProcedures with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2ApElementaryProcedures) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicSubscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicSubscriptionDelete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicSubscriptionDelete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicServiceUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicServiceUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2Setup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "E2Setup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2NodeConfigurationUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "E2NodeConfigurationUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2ConnectionUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "E2ConnectionUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReset_()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "Reset_",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicIndication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicIndication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicServiceQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "RicServiceQuery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetErrorIndication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresValidationError{
				field:  "ErrorIndication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2ApElementaryProceduresValidationError is the validation error returned by
// E2ApElementaryProcedures.Validate if the designated constraints aren't met.
type E2ApElementaryProceduresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ApElementaryProceduresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ApElementaryProceduresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ApElementaryProceduresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ApElementaryProceduresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ApElementaryProceduresValidationError) ErrorName() string {
	return "E2ApElementaryProceduresValidationError"
}

// Error satisfies the builtin error interface
func (e E2ApElementaryProceduresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ApElementaryProcedures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ApElementaryProceduresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ApElementaryProceduresValidationError{}

// Validate checks the field values on E2ApElementaryProceduresClass1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2ApElementaryProceduresClass1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "RicSubscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicSubscriptionDelete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "RicSubscriptionDelete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicServiceUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "RicServiceUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "RicControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2Setup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "E2Setup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2NodeConfigurationUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "E2NodeConfigurationUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetE2ConnectionUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "E2ConnectionUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReset_()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass1ValidationError{
				field:  "Reset_",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2ApElementaryProceduresClass1ValidationError is the validation error
// returned by E2ApElementaryProceduresClass1.Validate if the designated
// constraints aren't met.
type E2ApElementaryProceduresClass1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ApElementaryProceduresClass1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ApElementaryProceduresClass1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ApElementaryProceduresClass1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ApElementaryProceduresClass1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ApElementaryProceduresClass1ValidationError) ErrorName() string {
	return "E2ApElementaryProceduresClass1ValidationError"
}

// Error satisfies the builtin error interface
func (e E2ApElementaryProceduresClass1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ApElementaryProceduresClass1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ApElementaryProceduresClass1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ApElementaryProceduresClass1ValidationError{}

// Validate checks the field values on E2ApElementaryProceduresClass2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2ApElementaryProceduresClass2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRicIndication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass2ValidationError{
				field:  "RicIndication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicServiceQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass2ValidationError{
				field:  "RicServiceQuery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetErrorIndication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ApElementaryProceduresClass2ValidationError{
				field:  "ErrorIndication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2ApElementaryProceduresClass2ValidationError is the validation error
// returned by E2ApElementaryProceduresClass2.Validate if the designated
// constraints aren't met.
type E2ApElementaryProceduresClass2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ApElementaryProceduresClass2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ApElementaryProceduresClass2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ApElementaryProceduresClass2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ApElementaryProceduresClass2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ApElementaryProceduresClass2ValidationError) ErrorName() string {
	return "E2ApElementaryProceduresClass2ValidationError"
}

// Error satisfies the builtin error interface
func (e E2ApElementaryProceduresClass2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ApElementaryProceduresClass2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ApElementaryProceduresClass2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ApElementaryProceduresClass2ValidationError{}

// Validate checks the field values on E2ConnectionUpdateEp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2ConnectionUpdateEp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ConnectionUpdateEpValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ConnectionUpdateEpValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ConnectionUpdateEpValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ConnectionUpdateEpValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2ConnectionUpdateEpValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2ConnectionUpdateEpValidationError is the validation error returned by
// E2ConnectionUpdateEp.Validate if the designated constraints aren't met.
type E2ConnectionUpdateEpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2ConnectionUpdateEpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2ConnectionUpdateEpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2ConnectionUpdateEpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2ConnectionUpdateEpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2ConnectionUpdateEpValidationError) ErrorName() string {
	return "E2ConnectionUpdateEpValidationError"
}

// Error satisfies the builtin error interface
func (e E2ConnectionUpdateEpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2ConnectionUpdateEp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2ConnectionUpdateEpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2ConnectionUpdateEpValidationError{}

// Validate checks the field values on E2NodeConfigurationUpdateEp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeConfigurationUpdateEp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeConfigurationUpdateEpValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeConfigurationUpdateEpValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeConfigurationUpdateEpValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeConfigurationUpdateEpValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeConfigurationUpdateEpValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2NodeConfigurationUpdateEpValidationError is the validation error returned
// by E2NodeConfigurationUpdateEp.Validate if the designated constraints
// aren't met.
type E2NodeConfigurationUpdateEpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeConfigurationUpdateEpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeConfigurationUpdateEpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeConfigurationUpdateEpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeConfigurationUpdateEpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeConfigurationUpdateEpValidationError) ErrorName() string {
	return "E2NodeConfigurationUpdateEpValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeConfigurationUpdateEpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeConfigurationUpdateEp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeConfigurationUpdateEpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeConfigurationUpdateEpValidationError{}

// Validate checks the field values on E2Setup with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *E2Setup) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2SetupValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2SetupValidationError is the validation error returned by E2Setup.Validate
// if the designated constraints aren't met.
type E2SetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2SetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2SetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2SetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2SetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2SetupValidationError) ErrorName() string { return "E2SetupValidationError" }

// Error satisfies the builtin error interface
func (e E2SetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2Setup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2SetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2SetupValidationError{}

// Validate checks the field values on ErrorIndicationEp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ErrorIndicationEp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationEpValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationEpValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorIndicationEpValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorIndicationEpValidationError is the validation error returned by
// ErrorIndicationEp.Validate if the designated constraints aren't met.
type ErrorIndicationEpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorIndicationEpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorIndicationEpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorIndicationEpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorIndicationEpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorIndicationEpValidationError) ErrorName() string {
	return "ErrorIndicationEpValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorIndicationEpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorIndicationEp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorIndicationEpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorIndicationEpValidationError{}

// Validate checks the field values on Reset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Reset) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetValidationError is the validation error returned by Reset.Validate if
// the designated constraints aren't met.
type ResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetValidationError) ErrorName() string { return "ResetValidationError" }

// Error satisfies the builtin error interface
func (e ResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetValidationError{}

// Validate checks the field values on RicControl with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RicControl) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicControlValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicControlValidationError is the validation error returned by
// RicControl.Validate if the designated constraints aren't met.
type RicControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicControlValidationError) ErrorName() string { return "RicControlValidationError" }

// Error satisfies the builtin error interface
func (e RicControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicControlValidationError{}

// Validate checks the field values on RicIndication with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicIndication) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicIndicationValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicIndicationValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicIndicationValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicIndicationValidationError is the validation error returned by
// RicIndication.Validate if the designated constraints aren't met.
type RicIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicIndicationValidationError) ErrorName() string { return "RicIndicationValidationError" }

// Error satisfies the builtin error interface
func (e RicIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicIndicationValidationError{}

// Validate checks the field values on RicServiceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicServiceQuery) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceQueryValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceQueryValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceQueryValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicServiceQueryValidationError is the validation error returned by
// RicServiceQuery.Validate if the designated constraints aren't met.
type RicServiceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicServiceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicServiceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicServiceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicServiceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicServiceQueryValidationError) ErrorName() string { return "RicServiceQueryValidationError" }

// Error satisfies the builtin error interface
func (e RicServiceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicServiceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicServiceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicServiceQueryValidationError{}

// Validate checks the field values on RicServiceUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicServiceUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceUpdateValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceUpdateValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceUpdateValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceUpdateValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicServiceUpdateValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicServiceUpdateValidationError is the validation error returned by
// RicServiceUpdate.Validate if the designated constraints aren't met.
type RicServiceUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicServiceUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicServiceUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicServiceUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicServiceUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicServiceUpdateValidationError) ErrorName() string { return "RicServiceUpdateValidationError" }

// Error satisfies the builtin error interface
func (e RicServiceUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicServiceUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicServiceUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicServiceUpdateValidationError{}

// Validate checks the field values on RicSubscription with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicSubscription) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicSubscriptionValidationError is the validation error returned by
// RicSubscription.Validate if the designated constraints aren't met.
type RicSubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicSubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicSubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicSubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicSubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicSubscriptionValidationError) ErrorName() string { return "RicSubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e RicSubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicSubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicSubscriptionValidationError{}

// Validate checks the field values on RicSubscriptionDelete with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicSubscriptionDelete) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInitiatingMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionDeleteValidationError{
				field:  "InitiatingMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionDeleteValidationError{
				field:  "SuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsuccessfulOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionDeleteValidationError{
				field:  "UnsuccessfulOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionDeleteValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriticality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RicSubscriptionDeleteValidationError{
				field:  "Criticality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RicSubscriptionDeleteValidationError is the validation error returned by
// RicSubscriptionDelete.Validate if the designated constraints aren't met.
type RicSubscriptionDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicSubscriptionDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicSubscriptionDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicSubscriptionDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicSubscriptionDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicSubscriptionDeleteValidationError) ErrorName() string {
	return "RicSubscriptionDeleteValidationError"
}

// Error satisfies the builtin error interface
func (e RicSubscriptionDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicSubscriptionDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicSubscriptionDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicSubscriptionDeleteValidationError{}
