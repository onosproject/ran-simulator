// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta2/e2ap_constants.proto

package e2ap_constants

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_ap_constants_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on IdE2Setup with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdE2Setup) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 1 {
		return IdE2SetupValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
	}

	return nil
}

// IdE2SetupValidationError is the validation error returned by
// IdE2Setup.Validate if the designated constraints aren't met.
type IdE2SetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2SetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2SetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2SetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2SetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2SetupValidationError) ErrorName() string { return "IdE2SetupValidationError" }

// Error satisfies the builtin error interface
func (e IdE2SetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2Setup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2SetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2SetupValidationError{}

// Validate checks the field values on IdErrorIndication with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdErrorIndication) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 2 {
		return IdErrorIndicationValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
	}

	return nil
}

// IdErrorIndicationValidationError is the validation error returned by
// IdErrorIndication.Validate if the designated constraints aren't met.
type IdErrorIndicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdErrorIndicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdErrorIndicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdErrorIndicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdErrorIndicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdErrorIndicationValidationError) ErrorName() string {
	return "IdErrorIndicationValidationError"
}

// Error satisfies the builtin error interface
func (e IdErrorIndicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdErrorIndication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdErrorIndicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdErrorIndicationValidationError{}

// Validate checks the field values on IdReset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdReset) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 3 {
		return IdResetValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
	}

	return nil
}

// IdResetValidationError is the validation error returned by IdReset.Validate
// if the designated constraints aren't met.
type IdResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResetValidationError) ErrorName() string { return "IdResetValidationError" }

// Error satisfies the builtin error interface
func (e IdResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResetValidationError{}

// Validate checks the field values on IdRiccontrol with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdRiccontrol) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 4 {
		return IdRiccontrolValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
	}

	return nil
}

// IdRiccontrolValidationError is the validation error returned by
// IdRiccontrol.Validate if the designated constraints aren't met.
type IdRiccontrolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolValidationError) ErrorName() string { return "IdRiccontrolValidationError" }

// Error satisfies the builtin error interface
func (e IdRiccontrolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolValidationError{}

// Validate checks the field values on IdRicindication with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRicindication) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 5 {
		return IdRicindicationValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
	}

	return nil
}

// IdRicindicationValidationError is the validation error returned by
// IdRicindication.Validate if the designated constraints aren't met.
type IdRicindicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationValidationError) ErrorName() string { return "IdRicindicationValidationError" }

// Error satisfies the builtin error interface
func (e IdRicindicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationValidationError{}

// Validate checks the field values on IdRicserviceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRicserviceQuery) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 6 {
		return IdRicserviceQueryValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
	}

	return nil
}

// IdRicserviceQueryValidationError is the validation error returned by
// IdRicserviceQuery.Validate if the designated constraints aren't met.
type IdRicserviceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicserviceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicserviceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicserviceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicserviceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicserviceQueryValidationError) ErrorName() string {
	return "IdRicserviceQueryValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicserviceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicserviceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicserviceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicserviceQueryValidationError{}

// Validate checks the field values on IdRicserviceUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicserviceUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 7 {
		return IdRicserviceUpdateValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
	}

	return nil
}

// IdRicserviceUpdateValidationError is the validation error returned by
// IdRicserviceUpdate.Validate if the designated constraints aren't met.
type IdRicserviceUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicserviceUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicserviceUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicserviceUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicserviceUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicserviceUpdateValidationError) ErrorName() string {
	return "IdRicserviceUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicserviceUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicserviceUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicserviceUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicserviceUpdateValidationError{}

// Validate checks the field values on IdRicsubscription with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRicsubscription) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 8 {
		return IdRicsubscriptionValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
	}

	return nil
}

// IdRicsubscriptionValidationError is the validation error returned by
// IdRicsubscription.Validate if the designated constraints aren't met.
type IdRicsubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionValidationError) ErrorName() string {
	return "IdRicsubscriptionValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionValidationError{}

// Validate checks the field values on IdRicsubscriptionDelete with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicsubscriptionDelete) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 9 {
		return IdRicsubscriptionDeleteValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
	}

	return nil
}

// IdRicsubscriptionDeleteValidationError is the validation error returned by
// IdRicsubscriptionDelete.Validate if the designated constraints aren't met.
type IdRicsubscriptionDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionDeleteValidationError) ErrorName() string {
	return "IdRicsubscriptionDeleteValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscriptionDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionDeleteValidationError{}

// Validate checks the field values on IdE2NodeConfigurationUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2NodeConfigurationUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 10 {
		return IdE2NodeConfigurationUpdateValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
	}

	return nil
}

// IdE2NodeConfigurationUpdateValidationError is the validation error returned
// by IdE2NodeConfigurationUpdate.Validate if the designated constraints
// aren't met.
type IdE2NodeConfigurationUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2NodeConfigurationUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2NodeConfigurationUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2NodeConfigurationUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2NodeConfigurationUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2NodeConfigurationUpdateValidationError) ErrorName() string {
	return "IdE2NodeConfigurationUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2NodeConfigurationUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2NodeConfigurationUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2NodeConfigurationUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2NodeConfigurationUpdateValidationError{}

// Validate checks the field values on IdE2ConnectionUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 11 {
		return IdE2ConnectionUpdateValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
	}

	return nil
}

// IdE2ConnectionUpdateValidationError is the validation error returned by
// IdE2ConnectionUpdate.Validate if the designated constraints aren't met.
type IdE2ConnectionUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateValidationError{}

// Validate checks the field values on MaxProtocolIes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxProtocolIes) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 65535 {
		return MaxProtocolIesValidationError{
			field:  "Value",
			reason: "value must equal 65535",
		}
	}

	return nil
}

// MaxProtocolIesValidationError is the validation error returned by
// MaxProtocolIes.Validate if the designated constraints aren't met.
type MaxProtocolIesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxProtocolIesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxProtocolIesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxProtocolIesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxProtocolIesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxProtocolIesValidationError) ErrorName() string { return "MaxProtocolIesValidationError" }

// Error satisfies the builtin error interface
func (e MaxProtocolIesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxProtocolIes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxProtocolIesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxProtocolIesValidationError{}

// Validate checks the field values on MaxnoofErrors with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaxnoofErrors) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 256 {
		return MaxnoofErrorsValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
	}

	return nil
}

// MaxnoofErrorsValidationError is the validation error returned by
// MaxnoofErrors.Validate if the designated constraints aren't met.
type MaxnoofErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxnoofErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxnoofErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxnoofErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxnoofErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxnoofErrorsValidationError) ErrorName() string { return "MaxnoofErrorsValidationError" }

// Error satisfies the builtin error interface
func (e MaxnoofErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxnoofErrors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxnoofErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxnoofErrorsValidationError{}

// Validate checks the field values on MaxofE2NodeComponents with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofE2NodeComponents) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 1024 {
		return MaxofE2NodeComponentsValidationError{
			field:  "Value",
			reason: "value must equal 1024",
		}
	}

	return nil
}

// MaxofE2NodeComponentsValidationError is the validation error returned by
// MaxofE2NodeComponents.Validate if the designated constraints aren't met.
type MaxofE2NodeComponentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofE2NodeComponentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofE2NodeComponentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofE2NodeComponentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofE2NodeComponentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofE2NodeComponentsValidationError) ErrorName() string {
	return "MaxofE2NodeComponentsValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofE2NodeComponentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofE2NodeComponents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofE2NodeComponentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofE2NodeComponentsValidationError{}

// Validate checks the field values on MaxofRanfunctionId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaxofRanfunctionId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 256 {
		return MaxofRanfunctionIdValidationError{
			field:  "Value",
			reason: "value must equal 256",
		}
	}

	return nil
}

// MaxofRanfunctionIdValidationError is the validation error returned by
// MaxofRanfunctionId.Validate if the designated constraints aren't met.
type MaxofRanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRanfunctionIdValidationError) ErrorName() string {
	return "MaxofRanfunctionIdValidationError"
}

// Error satisfies the builtin error interface
func (e MaxofRanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRanfunctionIdValidationError{}

// Validate checks the field values on MaxofRicactionId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MaxofRicactionId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 16 {
		return MaxofRicactionIdValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
	}

	return nil
}

// MaxofRicactionIdValidationError is the validation error returned by
// MaxofRicactionId.Validate if the designated constraints aren't met.
type MaxofRicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofRicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofRicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofRicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofRicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofRicactionIdValidationError) ErrorName() string { return "MaxofRicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e MaxofRicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofRicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofRicactionIdValidationError{}

// Validate checks the field values on MaxofTnla with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MaxofTnla) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 32 {
		return MaxofTnlaValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
	}

	return nil
}

// MaxofTnlaValidationError is the validation error returned by
// MaxofTnla.Validate if the designated constraints aren't met.
type MaxofTnlaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaxofTnlaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaxofTnlaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaxofTnlaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaxofTnlaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaxofTnlaValidationError) ErrorName() string { return "MaxofTnlaValidationError" }

// Error satisfies the builtin error interface
func (e MaxofTnlaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaxofTnla.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaxofTnlaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaxofTnlaValidationError{}

// Validate checks the field values on IdCause with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdCause) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 1 {
		return IdCauseValidationError{
			field:  "Value",
			reason: "value must equal 1",
		}
	}

	return nil
}

// IdCauseValidationError is the validation error returned by IdCause.Validate
// if the designated constraints aren't met.
type IdCauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCauseValidationError) ErrorName() string { return "IdCauseValidationError" }

// Error satisfies the builtin error interface
func (e IdCauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCauseValidationError{}

// Validate checks the field values on IdCriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdCriticalityDiagnostics) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 2 {
		return IdCriticalityDiagnosticsValidationError{
			field:  "Value",
			reason: "value must equal 2",
		}
	}

	return nil
}

// IdCriticalityDiagnosticsValidationError is the validation error returned by
// IdCriticalityDiagnostics.Validate if the designated constraints aren't met.
type IdCriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCriticalityDiagnosticsValidationError) ErrorName() string {
	return "IdCriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e IdCriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCriticalityDiagnosticsValidationError{}

// Validate checks the field values on IdGlobalE2NodeId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdGlobalE2NodeId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 3 {
		return IdGlobalE2NodeIdValidationError{
			field:  "Value",
			reason: "value must equal 3",
		}
	}

	return nil
}

// IdGlobalE2NodeIdValidationError is the validation error returned by
// IdGlobalE2NodeId.Validate if the designated constraints aren't met.
type IdGlobalE2NodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGlobalE2NodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGlobalE2NodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGlobalE2NodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGlobalE2NodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGlobalE2NodeIdValidationError) ErrorName() string { return "IdGlobalE2NodeIdValidationError" }

// Error satisfies the builtin error interface
func (e IdGlobalE2NodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGlobalE2NodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGlobalE2NodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGlobalE2NodeIdValidationError{}

// Validate checks the field values on IdGlobalRicId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdGlobalRicId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 4 {
		return IdGlobalRicIdValidationError{
			field:  "Value",
			reason: "value must equal 4",
		}
	}

	return nil
}

// IdGlobalRicIdValidationError is the validation error returned by
// IdGlobalRicId.Validate if the designated constraints aren't met.
type IdGlobalRicIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdGlobalRicIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdGlobalRicIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdGlobalRicIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdGlobalRicIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdGlobalRicIdValidationError) ErrorName() string { return "IdGlobalRicIdValidationError" }

// Error satisfies the builtin error interface
func (e IdGlobalRicIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdGlobalRicId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdGlobalRicIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdGlobalRicIdValidationError{}

// Validate checks the field values on IdRanfunctionId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRanfunctionId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 5 {
		return IdRanfunctionIdValidationError{
			field:  "Value",
			reason: "value must equal 5",
		}
	}

	return nil
}

// IdRanfunctionIdValidationError is the validation error returned by
// IdRanfunctionId.Validate if the designated constraints aren't met.
type IdRanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIdValidationError) ErrorName() string { return "IdRanfunctionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIdValidationError{}

// Validate checks the field values on IdRanfunctionIdItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionIdItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 6 {
		return IdRanfunctionIdItemValidationError{
			field:  "Value",
			reason: "value must equal 6",
		}
	}

	return nil
}

// IdRanfunctionIdItemValidationError is the validation error returned by
// IdRanfunctionIdItem.Validate if the designated constraints aren't met.
type IdRanfunctionIdItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIdItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIdItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIdItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIdItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIdItemValidationError) ErrorName() string {
	return "IdRanfunctionIdItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionIdItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionIdItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIdItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIdItemValidationError{}

// Validate checks the field values on IdRanfunctionIecauseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionIecauseItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 7 {
		return IdRanfunctionIecauseItemValidationError{
			field:  "Value",
			reason: "value must equal 7",
		}
	}

	return nil
}

// IdRanfunctionIecauseItemValidationError is the validation error returned by
// IdRanfunctionIecauseItem.Validate if the designated constraints aren't met.
type IdRanfunctionIecauseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionIecauseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionIecauseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionIecauseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionIecauseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionIecauseItemValidationError) ErrorName() string {
	return "IdRanfunctionIecauseItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionIecauseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionIecauseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionIecauseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionIecauseItemValidationError{}

// Validate checks the field values on IdRanfunctionItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRanfunctionItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 8 {
		return IdRanfunctionItemValidationError{
			field:  "Value",
			reason: "value must equal 8",
		}
	}

	return nil
}

// IdRanfunctionItemValidationError is the validation error returned by
// IdRanfunctionItem.Validate if the designated constraints aren't met.
type IdRanfunctionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionItemValidationError) ErrorName() string {
	return "IdRanfunctionItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionItemValidationError{}

// Validate checks the field values on IdRanfunctionsAccepted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionsAccepted) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 9 {
		return IdRanfunctionsAcceptedValidationError{
			field:  "Value",
			reason: "value must equal 9",
		}
	}

	return nil
}

// IdRanfunctionsAcceptedValidationError is the validation error returned by
// IdRanfunctionsAccepted.Validate if the designated constraints aren't met.
type IdRanfunctionsAcceptedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsAcceptedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsAcceptedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsAcceptedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsAcceptedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsAcceptedValidationError) ErrorName() string {
	return "IdRanfunctionsAcceptedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsAcceptedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsAccepted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsAcceptedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsAcceptedValidationError{}

// Validate checks the field values on IdRanfunctionsAdded with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionsAdded) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 10 {
		return IdRanfunctionsAddedValidationError{
			field:  "Value",
			reason: "value must equal 10",
		}
	}

	return nil
}

// IdRanfunctionsAddedValidationError is the validation error returned by
// IdRanfunctionsAdded.Validate if the designated constraints aren't met.
type IdRanfunctionsAddedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsAddedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsAddedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsAddedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsAddedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsAddedValidationError) ErrorName() string {
	return "IdRanfunctionsAddedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsAddedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsAdded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsAddedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsAddedValidationError{}

// Validate checks the field values on IdRanfunctionsDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionsDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 11 {
		return IdRanfunctionsDeletedValidationError{
			field:  "Value",
			reason: "value must equal 11",
		}
	}

	return nil
}

// IdRanfunctionsDeletedValidationError is the validation error returned by
// IdRanfunctionsDeleted.Validate if the designated constraints aren't met.
type IdRanfunctionsDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsDeletedValidationError) ErrorName() string {
	return "IdRanfunctionsDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsDeletedValidationError{}

// Validate checks the field values on IdRanfunctionsModified with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionsModified) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 12 {
		return IdRanfunctionsModifiedValidationError{
			field:  "Value",
			reason: "value must equal 12",
		}
	}

	return nil
}

// IdRanfunctionsModifiedValidationError is the validation error returned by
// IdRanfunctionsModified.Validate if the designated constraints aren't met.
type IdRanfunctionsModifiedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsModifiedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsModifiedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsModifiedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsModifiedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsModifiedValidationError) ErrorName() string {
	return "IdRanfunctionsModifiedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsModifiedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsModified.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsModifiedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsModifiedValidationError{}

// Validate checks the field values on IdRanfunctionsRejected with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRanfunctionsRejected) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 13 {
		return IdRanfunctionsRejectedValidationError{
			field:  "Value",
			reason: "value must equal 13",
		}
	}

	return nil
}

// IdRanfunctionsRejectedValidationError is the validation error returned by
// IdRanfunctionsRejected.Validate if the designated constraints aren't met.
type IdRanfunctionsRejectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRanfunctionsRejectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRanfunctionsRejectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRanfunctionsRejectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRanfunctionsRejectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRanfunctionsRejectedValidationError) ErrorName() string {
	return "IdRanfunctionsRejectedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRanfunctionsRejectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRanfunctionsRejected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRanfunctionsRejectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRanfunctionsRejectedValidationError{}

// Validate checks the field values on IdRicactionAdmittedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicactionAdmittedItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 14 {
		return IdRicactionAdmittedItemValidationError{
			field:  "Value",
			reason: "value must equal 14",
		}
	}

	return nil
}

// IdRicactionAdmittedItemValidationError is the validation error returned by
// IdRicactionAdmittedItem.Validate if the designated constraints aren't met.
type IdRicactionAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionAdmittedItemValidationError) ErrorName() string {
	return "IdRicactionAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionAdmittedItemValidationError{}

// Validate checks the field values on IdRicactionId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdRicactionId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 15 {
		return IdRicactionIdValidationError{
			field:  "Value",
			reason: "value must equal 15",
		}
	}

	return nil
}

// IdRicactionIdValidationError is the validation error returned by
// IdRicactionId.Validate if the designated constraints aren't met.
type IdRicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionIdValidationError) ErrorName() string { return "IdRicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionIdValidationError{}

// Validate checks the field values on IdRicactionNotAdmittedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicactionNotAdmittedItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 16 {
		return IdRicactionNotAdmittedItemValidationError{
			field:  "Value",
			reason: "value must equal 16",
		}
	}

	return nil
}

// IdRicactionNotAdmittedItemValidationError is the validation error returned
// by IdRicactionNotAdmittedItem.Validate if the designated constraints aren't met.
type IdRicactionNotAdmittedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionNotAdmittedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionNotAdmittedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionNotAdmittedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionNotAdmittedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionNotAdmittedItemValidationError) ErrorName() string {
	return "IdRicactionNotAdmittedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionNotAdmittedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionNotAdmittedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionNotAdmittedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionNotAdmittedItemValidationError{}

// Validate checks the field values on IdRicactionsAdmitted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicactionsAdmitted) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 17 {
		return IdRicactionsAdmittedValidationError{
			field:  "Value",
			reason: "value must equal 17",
		}
	}

	return nil
}

// IdRicactionsAdmittedValidationError is the validation error returned by
// IdRicactionsAdmitted.Validate if the designated constraints aren't met.
type IdRicactionsAdmittedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionsAdmittedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionsAdmittedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionsAdmittedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionsAdmittedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionsAdmittedValidationError) ErrorName() string {
	return "IdRicactionsAdmittedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionsAdmittedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionsAdmitted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionsAdmittedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionsAdmittedValidationError{}

// Validate checks the field values on IdRicactionsNotAdmitted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicactionsNotAdmitted) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 18 {
		return IdRicactionsNotAdmittedValidationError{
			field:  "Value",
			reason: "value must equal 18",
		}
	}

	return nil
}

// IdRicactionsNotAdmittedValidationError is the validation error returned by
// IdRicactionsNotAdmitted.Validate if the designated constraints aren't met.
type IdRicactionsNotAdmittedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionsNotAdmittedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionsNotAdmittedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionsNotAdmittedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionsNotAdmittedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionsNotAdmittedValidationError) ErrorName() string {
	return "IdRicactionsNotAdmittedValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionsNotAdmittedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionsNotAdmitted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionsNotAdmittedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionsNotAdmittedValidationError{}

// Validate checks the field values on IdRicactionToBeSetupItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicactionToBeSetupItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 19 {
		return IdRicactionToBeSetupItemValidationError{
			field:  "Value",
			reason: "value must equal 19",
		}
	}

	return nil
}

// IdRicactionToBeSetupItemValidationError is the validation error returned by
// IdRicactionToBeSetupItem.Validate if the designated constraints aren't met.
type IdRicactionToBeSetupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicactionToBeSetupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicactionToBeSetupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicactionToBeSetupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicactionToBeSetupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicactionToBeSetupItemValidationError) ErrorName() string {
	return "IdRicactionToBeSetupItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicactionToBeSetupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicactionToBeSetupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicactionToBeSetupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicactionToBeSetupItemValidationError{}

// Validate checks the field values on IdRiccallProcessId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccallProcessId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 20 {
		return IdRiccallProcessIdValidationError{
			field:  "Value",
			reason: "value must equal 20",
		}
	}

	return nil
}

// IdRiccallProcessIdValidationError is the validation error returned by
// IdRiccallProcessId.Validate if the designated constraints aren't met.
type IdRiccallProcessIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccallProcessIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccallProcessIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccallProcessIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccallProcessIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccallProcessIdValidationError) ErrorName() string {
	return "IdRiccallProcessIdValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccallProcessIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccallProcessId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccallProcessIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccallProcessIdValidationError{}

// Validate checks the field values on IdRiccontrolAckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccontrolAckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 21 {
		return IdRiccontrolAckRequestValidationError{
			field:  "Value",
			reason: "value must equal 21",
		}
	}

	return nil
}

// IdRiccontrolAckRequestValidationError is the validation error returned by
// IdRiccontrolAckRequest.Validate if the designated constraints aren't met.
type IdRiccontrolAckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolAckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolAckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolAckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolAckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolAckRequestValidationError) ErrorName() string {
	return "IdRiccontrolAckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolAckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolAckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolAckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolAckRequestValidationError{}

// Validate checks the field values on IdRiccontrolHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccontrolHeader) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 22 {
		return IdRiccontrolHeaderValidationError{
			field:  "Value",
			reason: "value must equal 22",
		}
	}

	return nil
}

// IdRiccontrolHeaderValidationError is the validation error returned by
// IdRiccontrolHeader.Validate if the designated constraints aren't met.
type IdRiccontrolHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolHeaderValidationError) ErrorName() string {
	return "IdRiccontrolHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolHeaderValidationError{}

// Validate checks the field values on IdRiccontrolMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccontrolMessage) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 23 {
		return IdRiccontrolMessageValidationError{
			field:  "Value",
			reason: "value must equal 23",
		}
	}

	return nil
}

// IdRiccontrolMessageValidationError is the validation error returned by
// IdRiccontrolMessage.Validate if the designated constraints aren't met.
type IdRiccontrolMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolMessageValidationError) ErrorName() string {
	return "IdRiccontrolMessageValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolMessageValidationError{}

// Validate checks the field values on IdRiccontrolStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccontrolStatus) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 24 {
		return IdRiccontrolStatusValidationError{
			field:  "Value",
			reason: "value must equal 24",
		}
	}

	return nil
}

// IdRiccontrolStatusValidationError is the validation error returned by
// IdRiccontrolStatus.Validate if the designated constraints aren't met.
type IdRiccontrolStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolStatusValidationError) ErrorName() string {
	return "IdRiccontrolStatusValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolStatusValidationError{}

// Validate checks the field values on IdRicindicationHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicindicationHeader) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 25 {
		return IdRicindicationHeaderValidationError{
			field:  "Value",
			reason: "value must equal 25",
		}
	}

	return nil
}

// IdRicindicationHeaderValidationError is the validation error returned by
// IdRicindicationHeader.Validate if the designated constraints aren't met.
type IdRicindicationHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationHeaderValidationError) ErrorName() string {
	return "IdRicindicationHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationHeaderValidationError{}

// Validate checks the field values on IdRicindicationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicindicationMessage) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 26 {
		return IdRicindicationMessageValidationError{
			field:  "Value",
			reason: "value must equal 26",
		}
	}

	return nil
}

// IdRicindicationMessageValidationError is the validation error returned by
// IdRicindicationMessage.Validate if the designated constraints aren't met.
type IdRicindicationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationMessageValidationError) ErrorName() string {
	return "IdRicindicationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationMessageValidationError{}

// Validate checks the field values on IdRicindicationSn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdRicindicationSn) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 27 {
		return IdRicindicationSnValidationError{
			field:  "Value",
			reason: "value must equal 27",
		}
	}

	return nil
}

// IdRicindicationSnValidationError is the validation error returned by
// IdRicindicationSn.Validate if the designated constraints aren't met.
type IdRicindicationSnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationSnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationSnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationSnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationSnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationSnValidationError) ErrorName() string {
	return "IdRicindicationSnValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationSnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationSn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationSnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationSnValidationError{}

// Validate checks the field values on IdRicindicationType with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicindicationType) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 28 {
		return IdRicindicationTypeValidationError{
			field:  "Value",
			reason: "value must equal 28",
		}
	}

	return nil
}

// IdRicindicationTypeValidationError is the validation error returned by
// IdRicindicationType.Validate if the designated constraints aren't met.
type IdRicindicationTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicindicationTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicindicationTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicindicationTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicindicationTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicindicationTypeValidationError) ErrorName() string {
	return "IdRicindicationTypeValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicindicationTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicindicationType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicindicationTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicindicationTypeValidationError{}

// Validate checks the field values on IdRicrequestId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdRicrequestId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 29 {
		return IdRicrequestIdValidationError{
			field:  "Value",
			reason: "value must equal 29",
		}
	}

	return nil
}

// IdRicrequestIdValidationError is the validation error returned by
// IdRicrequestId.Validate if the designated constraints aren't met.
type IdRicrequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicrequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicrequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicrequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicrequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicrequestIdValidationError) ErrorName() string { return "IdRicrequestIdValidationError" }

// Error satisfies the builtin error interface
func (e IdRicrequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicrequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicrequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicrequestIdValidationError{}

// Validate checks the field values on IdRicsubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRicsubscriptionDetails) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 30 {
		return IdRicsubscriptionDetailsValidationError{
			field:  "Value",
			reason: "value must equal 30",
		}
	}

	return nil
}

// IdRicsubscriptionDetailsValidationError is the validation error returned by
// IdRicsubscriptionDetails.Validate if the designated constraints aren't met.
type IdRicsubscriptionDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRicsubscriptionDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRicsubscriptionDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRicsubscriptionDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRicsubscriptionDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRicsubscriptionDetailsValidationError) ErrorName() string {
	return "IdRicsubscriptionDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e IdRicsubscriptionDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRicsubscriptionDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRicsubscriptionDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRicsubscriptionDetailsValidationError{}

// Validate checks the field values on IdTimeToWait with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdTimeToWait) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 31 {
		return IdTimeToWaitValidationError{
			field:  "Value",
			reason: "value must equal 31",
		}
	}

	return nil
}

// IdTimeToWaitValidationError is the validation error returned by
// IdTimeToWait.Validate if the designated constraints aren't met.
type IdTimeToWaitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTimeToWaitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTimeToWaitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTimeToWaitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTimeToWaitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTimeToWaitValidationError) ErrorName() string { return "IdTimeToWaitValidationError" }

// Error satisfies the builtin error interface
func (e IdTimeToWaitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTimeToWait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTimeToWaitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTimeToWaitValidationError{}

// Validate checks the field values on IdRiccontrolOutcome with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdRiccontrolOutcome) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 32 {
		return IdRiccontrolOutcomeValidationError{
			field:  "Value",
			reason: "value must equal 32",
		}
	}

	return nil
}

// IdRiccontrolOutcomeValidationError is the validation error returned by
// IdRiccontrolOutcome.Validate if the designated constraints aren't met.
type IdRiccontrolOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRiccontrolOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRiccontrolOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRiccontrolOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRiccontrolOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRiccontrolOutcomeValidationError) ErrorName() string {
	return "IdRiccontrolOutcomeValidationError"
}

// Error satisfies the builtin error interface
func (e IdRiccontrolOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRiccontrolOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRiccontrolOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRiccontrolOutcomeValidationError{}

// Validate checks the field values on IdE2NodeComponentConfigUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2NodeComponentConfigUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 33 {
		return IdE2NodeComponentConfigUpdateValidationError{
			field:  "Value",
			reason: "value must equal 33",
		}
	}

	return nil
}

// IdE2NodeComponentConfigUpdateValidationError is the validation error
// returned by IdE2NodeComponentConfigUpdate.Validate if the designated
// constraints aren't met.
type IdE2NodeComponentConfigUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2NodeComponentConfigUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2NodeComponentConfigUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2NodeComponentConfigUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2NodeComponentConfigUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2NodeComponentConfigUpdateValidationError) ErrorName() string {
	return "IdE2NodeComponentConfigUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2NodeComponentConfigUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2NodeComponentConfigUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2NodeComponentConfigUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2NodeComponentConfigUpdateValidationError{}

// Validate checks the field values on IdE2NodeComponentConfigUpdateItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IdE2NodeComponentConfigUpdateItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 34 {
		return IdE2NodeComponentConfigUpdateItemValidationError{
			field:  "Value",
			reason: "value must equal 34",
		}
	}

	return nil
}

// IdE2NodeComponentConfigUpdateItemValidationError is the validation error
// returned by IdE2NodeComponentConfigUpdateItem.Validate if the designated
// constraints aren't met.
type IdE2NodeComponentConfigUpdateItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2NodeComponentConfigUpdateItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2NodeComponentConfigUpdateItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2NodeComponentConfigUpdateItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2NodeComponentConfigUpdateItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2NodeComponentConfigUpdateItemValidationError) ErrorName() string {
	return "IdE2NodeComponentConfigUpdateItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2NodeComponentConfigUpdateItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2NodeComponentConfigUpdateItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2NodeComponentConfigUpdateItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2NodeComponentConfigUpdateItemValidationError{}

// Validate checks the field values on IdE2NodeComponentConfigUpdateAck with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IdE2NodeComponentConfigUpdateAck) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 35 {
		return IdE2NodeComponentConfigUpdateAckValidationError{
			field:  "Value",
			reason: "value must equal 35",
		}
	}

	return nil
}

// IdE2NodeComponentConfigUpdateAckValidationError is the validation error
// returned by IdE2NodeComponentConfigUpdateAck.Validate if the designated
// constraints aren't met.
type IdE2NodeComponentConfigUpdateAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2NodeComponentConfigUpdateAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2NodeComponentConfigUpdateAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2NodeComponentConfigUpdateAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2NodeComponentConfigUpdateAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2NodeComponentConfigUpdateAckValidationError) ErrorName() string {
	return "IdE2NodeComponentConfigUpdateAckValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2NodeComponentConfigUpdateAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2NodeComponentConfigUpdateAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2NodeComponentConfigUpdateAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2NodeComponentConfigUpdateAckValidationError{}

// Validate checks the field values on IdE2NodeComponentConfigUpdateAckItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *IdE2NodeComponentConfigUpdateAckItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 36 {
		return IdE2NodeComponentConfigUpdateAckItemValidationError{
			field:  "Value",
			reason: "value must equal 36",
		}
	}

	return nil
}

// IdE2NodeComponentConfigUpdateAckItemValidationError is the validation error
// returned by IdE2NodeComponentConfigUpdateAckItem.Validate if the designated
// constraints aren't met.
type IdE2NodeComponentConfigUpdateAckItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) ErrorName() string {
	return "IdE2NodeComponentConfigUpdateAckItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2NodeComponentConfigUpdateAckItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2NodeComponentConfigUpdateAckItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2NodeComponentConfigUpdateAckItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2NodeComponentConfigUpdateAckItemValidationError{}

// Validate checks the field values on IdE2ConnectionSetup with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionSetup) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 39 {
		return IdE2ConnectionSetupValidationError{
			field:  "Value",
			reason: "value must equal 39",
		}
	}

	return nil
}

// IdE2ConnectionSetupValidationError is the validation error returned by
// IdE2ConnectionSetup.Validate if the designated constraints aren't met.
type IdE2ConnectionSetupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionSetupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionSetupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionSetupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionSetupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionSetupValidationError) ErrorName() string {
	return "IdE2ConnectionSetupValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionSetupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionSetup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionSetupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionSetupValidationError{}

// Validate checks the field values on IdE2ConnectionSetupFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionSetupFailed) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 40 {
		return IdE2ConnectionSetupFailedValidationError{
			field:  "Value",
			reason: "value must equal 40",
		}
	}

	return nil
}

// IdE2ConnectionSetupFailedValidationError is the validation error returned by
// IdE2ConnectionSetupFailed.Validate if the designated constraints aren't met.
type IdE2ConnectionSetupFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionSetupFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionSetupFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionSetupFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionSetupFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionSetupFailedValidationError) ErrorName() string {
	return "IdE2ConnectionSetupFailedValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionSetupFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionSetupFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionSetupFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionSetupFailedValidationError{}

// Validate checks the field values on IdE2ConnectionSetupFailedItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionSetupFailedItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 41 {
		return IdE2ConnectionSetupFailedItemValidationError{
			field:  "Value",
			reason: "value must equal 41",
		}
	}

	return nil
}

// IdE2ConnectionSetupFailedItemValidationError is the validation error
// returned by IdE2ConnectionSetupFailedItem.Validate if the designated
// constraints aren't met.
type IdE2ConnectionSetupFailedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionSetupFailedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionSetupFailedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionSetupFailedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionSetupFailedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionSetupFailedItemValidationError) ErrorName() string {
	return "IdE2ConnectionSetupFailedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionSetupFailedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionSetupFailedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionSetupFailedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionSetupFailedItemValidationError{}

// Validate checks the field values on IdE2ConnectionFailedItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionFailedItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 42 {
		return IdE2ConnectionFailedItemValidationError{
			field:  "Value",
			reason: "value must equal 42",
		}
	}

	return nil
}

// IdE2ConnectionFailedItemValidationError is the validation error returned by
// IdE2ConnectionFailedItem.Validate if the designated constraints aren't met.
type IdE2ConnectionFailedItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionFailedItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionFailedItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionFailedItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionFailedItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionFailedItemValidationError) ErrorName() string {
	return "IdE2ConnectionFailedItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionFailedItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionFailedItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionFailedItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionFailedItemValidationError{}

// Validate checks the field values on IdE2ConnectionUpdateItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdateItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 43 {
		return IdE2ConnectionUpdateItemValidationError{
			field:  "Value",
			reason: "value must equal 43",
		}
	}

	return nil
}

// IdE2ConnectionUpdateItemValidationError is the validation error returned by
// IdE2ConnectionUpdateItem.Validate if the designated constraints aren't met.
type IdE2ConnectionUpdateItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateItemValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdateItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateItemValidationError{}

// Validate checks the field values on IdE2ConnectionUpdateAdd with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdateAdd) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 44 {
		return IdE2ConnectionUpdateAddValidationError{
			field:  "Value",
			reason: "value must equal 44",
		}
	}

	return nil
}

// IdE2ConnectionUpdateAddValidationError is the validation error returned by
// IdE2ConnectionUpdateAdd.Validate if the designated constraints aren't met.
type IdE2ConnectionUpdateAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateAddValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateAddValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdateAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateAddValidationError{}

// Validate checks the field values on IdE2ConnectionUpdateModify with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdateModify) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 45 {
		return IdE2ConnectionUpdateModifyValidationError{
			field:  "Value",
			reason: "value must equal 45",
		}
	}

	return nil
}

// IdE2ConnectionUpdateModifyValidationError is the validation error returned
// by IdE2ConnectionUpdateModify.Validate if the designated constraints aren't met.
type IdE2ConnectionUpdateModifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateModifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateModifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateModifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateModifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateModifyValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateModifyValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateModifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdateModify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateModifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateModifyValidationError{}

// Validate checks the field values on IdE2ConnectionUpdateRemove with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdateRemove) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 46 {
		return IdE2ConnectionUpdateRemoveValidationError{
			field:  "Value",
			reason: "value must equal 46",
		}
	}

	return nil
}

// IdE2ConnectionUpdateRemoveValidationError is the validation error returned
// by IdE2ConnectionUpdateRemove.Validate if the designated constraints aren't met.
type IdE2ConnectionUpdateRemoveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateRemoveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateRemoveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateRemoveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateRemoveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateRemoveValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateRemoveValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateRemoveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdateRemove.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateRemoveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateRemoveValidationError{}

// Validate checks the field values on IdE2ConnectionUpdateRemoveItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IdE2ConnectionUpdateRemoveItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 47 {
		return IdE2ConnectionUpdateRemoveItemValidationError{
			field:  "Value",
			reason: "value must equal 47",
		}
	}

	return nil
}

// IdE2ConnectionUpdateRemoveItemValidationError is the validation error
// returned by IdE2ConnectionUpdateRemoveItem.Validate if the designated
// constraints aren't met.
type IdE2ConnectionUpdateRemoveItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdE2ConnectionUpdateRemoveItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdE2ConnectionUpdateRemoveItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdE2ConnectionUpdateRemoveItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdE2ConnectionUpdateRemoveItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdE2ConnectionUpdateRemoveItemValidationError) ErrorName() string {
	return "IdE2ConnectionUpdateRemoveItemValidationError"
}

// Error satisfies the builtin error interface
func (e IdE2ConnectionUpdateRemoveItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdE2ConnectionUpdateRemoveItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdE2ConnectionUpdateRemoveItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdE2ConnectionUpdateRemoveItemValidationError{}

// Validate checks the field values on IdTnlinformation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IdTnlinformation) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetValue() != 48 {
		return IdTnlinformationValidationError{
			field:  "Value",
			reason: "value must equal 48",
		}
	}

	return nil
}

// IdTnlinformationValidationError is the validation error returned by
// IdTnlinformation.Validate if the designated constraints aren't met.
type IdTnlinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdTnlinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdTnlinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdTnlinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdTnlinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdTnlinformationValidationError) ErrorName() string { return "IdTnlinformationValidationError" }

// Error satisfies the builtin error interface
func (e IdTnlinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdTnlinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdTnlinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdTnlinformationValidationError{}
