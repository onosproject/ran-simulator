// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/e2ap/v1beta2/e2ap_ies.proto

package e2ap_ies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _e_2_ap_ies_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Cause with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cause) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Cause.(type) {

	case *Cause_RicRequest:
		// no validation rules for RicRequest

	case *Cause_RicService:
		// no validation rules for RicService

	case *Cause_Transport:
		// no validation rules for Transport

	case *Cause_Protocol:
		// no validation rules for Protocol

	case *Cause_Misc:
		// no validation rules for Misc

	}

	return nil
}

// CauseValidationError is the validation error returned by Cause.Validate if
// the designated constraints aren't met.
type CauseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CauseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CauseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CauseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CauseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CauseValidationError) ErrorName() string { return "CauseValidationError" }

// Error satisfies the builtin error interface
func (e CauseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCause.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CauseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CauseValidationError{}

// Validate checks the field values on CriticalityDiagnostics with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CriticalityDiagnostics) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProcedureCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "ProcedureCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TriggeringMessage

	// no validation rules for ProcedureCriticality

	if v, ok := interface{}(m.GetRicRequestorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "RicRequestorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIEsCriticalityDiagnostics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsValidationError{
				field:  "IEsCriticalityDiagnostics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CriticalityDiagnosticsValidationError is the validation error returned by
// CriticalityDiagnostics.Validate if the designated constraints aren't met.
type CriticalityDiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsValidationError) ErrorName() string {
	return "CriticalityDiagnosticsValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsValidationError{}

// Validate checks the field values on CriticalityDiagnosticsIeList with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CriticalityDiagnosticsIeList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CriticalityDiagnosticsIeListValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CriticalityDiagnosticsIeListValidationError is the validation error returned
// by CriticalityDiagnosticsIeList.Validate if the designated constraints
// aren't met.
type CriticalityDiagnosticsIeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsIeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsIeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsIeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsIeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsIeListValidationError) ErrorName() string {
	return "CriticalityDiagnosticsIeListValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsIeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnosticsIeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsIeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsIeListValidationError{}

// Validate checks the field values on CriticalityDiagnosticsIeItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CriticalityDiagnosticsIeItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IEcriticality

	if v, ok := interface{}(m.GetIEId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CriticalityDiagnosticsIeItemValidationError{
				field:  "IEId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeOfError

	return nil
}

// CriticalityDiagnosticsIeItemValidationError is the validation error returned
// by CriticalityDiagnosticsIeItem.Validate if the designated constraints
// aren't met.
type CriticalityDiagnosticsIeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalityDiagnosticsIeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalityDiagnosticsIeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalityDiagnosticsIeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalityDiagnosticsIeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalityDiagnosticsIeItemValidationError) ErrorName() string {
	return "CriticalityDiagnosticsIeItemValidationError"
}

// Error satisfies the builtin error interface
func (e CriticalityDiagnosticsIeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCriticalityDiagnosticsIeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalityDiagnosticsIeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalityDiagnosticsIeItemValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentConfigUpdate) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2NodeComponentConfigUpdate.(type) {

	case *E2NodeComponentConfigUpdate_GNbconfigUpdate:

		if v, ok := interface{}(m.GetGNbconfigUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentConfigUpdateValidationError{
					field:  "GNbconfigUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2NodeComponentConfigUpdate_EnGNbconfigUpdate:

		if v, ok := interface{}(m.GetEnGNbconfigUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentConfigUpdateValidationError{
					field:  "EnGNbconfigUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2NodeComponentConfigUpdate_NgENbconfigUpdate:

		if v, ok := interface{}(m.GetNgENbconfigUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentConfigUpdateValidationError{
					field:  "NgENbconfigUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2NodeComponentConfigUpdate_ENbconfigUpdate:

		if v, ok := interface{}(m.GetENbconfigUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentConfigUpdateValidationError{
					field:  "ENbconfigUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2NodeComponentConfigUpdateValidationError is the validation error returned
// by E2NodeComponentConfigUpdate.Validate if the designated constraints
// aren't met.
type E2NodeComponentConfigUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdateGnb with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentConfigUpdateGnb) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NgApconfigUpdate

	// no validation rules for XnApconfigUpdate

	// no validation rules for E1ApconfigUpdate

	// no validation rules for F1ApconfigUpdate

	return nil
}

// E2NodeComponentConfigUpdateGnbValidationError is the validation error
// returned by E2NodeComponentConfigUpdateGnb.Validate if the designated
// constraints aren't met.
type E2NodeComponentConfigUpdateGnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateGnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateGnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateGnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateGnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateGnbValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateGnbValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateGnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdateGnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateGnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateGnbValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdateEngNb with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *E2NodeComponentConfigUpdateEngNb) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X2ApconfigUpdate

	return nil
}

// E2NodeComponentConfigUpdateEngNbValidationError is the validation error
// returned by E2NodeComponentConfigUpdateEngNb.Validate if the designated
// constraints aren't met.
type E2NodeComponentConfigUpdateEngNbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateEngNbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateEngNbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateEngNbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateEngNbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateEngNbValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateEngNbValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateEngNbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdateEngNb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateEngNbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateEngNbValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdateNgeNb with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *E2NodeComponentConfigUpdateNgeNb) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NgApconfigUpdate

	// no validation rules for XnApconfigUpdate

	return nil
}

// E2NodeComponentConfigUpdateNgeNbValidationError is the validation error
// returned by E2NodeComponentConfigUpdateNgeNb.Validate if the designated
// constraints aren't met.
type E2NodeComponentConfigUpdateNgeNbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateNgeNbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateNgeNbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateNgeNbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateNgeNbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateNgeNbValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateNgeNbValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateNgeNbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdateNgeNb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateNgeNbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateNgeNbValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdateEnb with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentConfigUpdateEnb) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for S1ApconfigUpdate

	// no validation rules for X2ApconfigUpdate

	return nil
}

// E2NodeComponentConfigUpdateEnbValidationError is the validation error
// returned by E2NodeComponentConfigUpdateEnb.Validate if the designated
// constraints aren't met.
type E2NodeComponentConfigUpdateEnbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateEnbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateEnbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateEnbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateEnbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateEnbValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateEnbValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateEnbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdateEnb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateEnbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateEnbValidationError{}

// Validate checks the field values on E2NodeComponentConfigUpdateAck with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentConfigUpdateAck) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdateOutcome

	if v, ok := interface{}(m.GetFailureCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeComponentConfigUpdateAckValidationError{
				field:  "FailureCause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2NodeComponentConfigUpdateAckValidationError is the validation error
// returned by E2NodeComponentConfigUpdateAck.Validate if the designated
// constraints aren't met.
type E2NodeComponentConfigUpdateAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentConfigUpdateAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentConfigUpdateAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentConfigUpdateAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentConfigUpdateAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentConfigUpdateAckValidationError) ErrorName() string {
	return "E2NodeComponentConfigUpdateAckValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentConfigUpdateAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentConfigUpdateAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentConfigUpdateAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentConfigUpdateAckValidationError{}

// Validate checks the field values on E2NodeComponentId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *E2NodeComponentId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.E2NodeComponentId.(type) {

	case *E2NodeComponentId_E2NodeComponentTypeGnbCuUp:

		if v, ok := interface{}(m.GetE2NodeComponentTypeGnbCuUp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentIdValidationError{
					field:  "E2NodeComponentTypeGnbCuUp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *E2NodeComponentId_E2NodeComponentTypeGnbDu:

		if v, ok := interface{}(m.GetE2NodeComponentTypeGnbDu()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return E2NodeComponentIdValidationError{
					field:  "E2NodeComponentTypeGnbDu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// E2NodeComponentIdValidationError is the validation error returned by
// E2NodeComponentId.Validate if the designated constraints aren't met.
type E2NodeComponentIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentIdValidationError) ErrorName() string {
	return "E2NodeComponentIdValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentIdValidationError{}

// Validate checks the field values on E2NodeComponentGnbCuUpId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentGnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeComponentGnbCuUpIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2NodeComponentGnbCuUpIdValidationError is the validation error returned by
// E2NodeComponentGnbCuUpId.Validate if the designated constraints aren't met.
type E2NodeComponentGnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentGnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentGnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentGnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentGnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentGnbCuUpIdValidationError) ErrorName() string {
	return "E2NodeComponentGnbCuUpIdValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentGnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentGnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentGnbCuUpIdValidationError{}

// Validate checks the field values on E2NodeComponentGnbDuId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *E2NodeComponentGnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return E2NodeComponentGnbDuIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// E2NodeComponentGnbDuIdValidationError is the validation error returned by
// E2NodeComponentGnbDuId.Validate if the designated constraints aren't met.
type E2NodeComponentGnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e E2NodeComponentGnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e E2NodeComponentGnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e E2NodeComponentGnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e E2NodeComponentGnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e E2NodeComponentGnbDuIdValidationError) ErrorName() string {
	return "E2NodeComponentGnbDuIdValidationError"
}

// Error satisfies the builtin error interface
func (e E2NodeComponentGnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sE2NodeComponentGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = E2NodeComponentGnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = E2NodeComponentGnbDuIdValidationError{}

// Validate checks the field values on EnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbId.(type) {

	case *EnbId_MacroENbId:

		if v, ok := interface{}(m.GetMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "MacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_HomeENbId:

		if v, ok := interface{}(m.GetHomeENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "HomeENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_ShortMacroENbId:

		if v, ok := interface{}(m.GetShortMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "ShortMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbId_LongMacroENbId:

		if v, ok := interface{}(m.GetLongMacroENbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdValidationError{
					field:  "LongMacroENbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdValidationError is the validation error returned by EnbId.Validate if
// the designated constraints aren't met.
type EnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdValidationError) ErrorName() string { return "EnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdValidationError{}

// Validate checks the field values on EnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EnbIdChoice.(type) {

	case *EnbIdChoice_EnbIdMacro:

		if v, ok := interface{}(m.GetEnbIdMacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdMacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdShortmacro:

		if v, ok := interface{}(m.GetEnbIdShortmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdShortmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnbIdChoice_EnbIdLongmacro:

		if v, ok := interface{}(m.GetEnbIdLongmacro()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnbIdChoiceValidationError{
					field:  "EnbIdLongmacro",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnbIdChoiceValidationError is the validation error returned by
// EnbIdChoice.Validate if the designated constraints aren't met.
type EnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnbIdChoiceValidationError) ErrorName() string { return "EnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e EnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnbIdChoiceValidationError{}

// Validate checks the field values on EngnbId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EngnbId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.EngnbId.(type) {

	case *EngnbId_GNbId:

		if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngnbIdValidationError{
					field:  "GNbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EngnbIdValidationError is the validation error returned by EngnbId.Validate
// if the designated constraints aren't met.
type EngnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngnbIdValidationError) ErrorName() string { return "EngnbIdValidationError" }

// Error satisfies the builtin error interface
func (e EngnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalE2NodeId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GlobalE2NodeId.(type) {

	case *GlobalE2NodeId_GNb:

		if v, ok := interface{}(m.GetGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "GNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_EnGNb:

		if v, ok := interface{}(m.GetEnGNb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "EnGNb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_NgENb:

		if v, ok := interface{}(m.GetNgENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "NgENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GlobalE2NodeId_ENb:

		if v, ok := interface{}(m.GetENb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GlobalE2NodeIdValidationError{
					field:  "ENb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GlobalE2NodeIdValidationError is the validation error returned by
// GlobalE2NodeId.Validate if the designated constraints aren't met.
type GlobalE2NodeIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeIdValidationError) ErrorName() string { return "GlobalE2NodeIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalE2NodeIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeIdValidationError{}

// Validate checks the field values on GlobalE2NodeEnGnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalE2NodeEnGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeEnGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalE2NodeEnGnbIdValidationError is the validation error returned by
// GlobalE2NodeEnGnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeEnGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeEnGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeEnGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeEnGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeEnGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeEnGnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeEnGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeEnGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeEnGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeEnGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeEnGnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeEnbId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalE2NodeEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeEnbIdValidationError{
				field:  "GlobalENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalE2NodeEnbIdValidationError is the validation error returned by
// GlobalE2NodeEnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeEnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeEnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeGnbId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GlobalE2NodeGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GlobalGNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbCuUpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GNbCuUpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbDuId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeGnbIdValidationError{
				field:  "GNbDuId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalE2NodeGnbIdValidationError is the validation error returned by
// GlobalE2NodeGnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeGnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeGnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeGnbIdValidationError{}

// Validate checks the field values on GlobalE2NodeNgEnbId with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GlobalE2NodeNgEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobalNgENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalE2NodeNgEnbIdValidationError{
				field:  "GlobalNgENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalE2NodeNgEnbIdValidationError is the validation error returned by
// GlobalE2NodeNgEnbId.Validate if the designated constraints aren't met.
type GlobalE2NodeNgEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalE2NodeNgEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalE2NodeNgEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalE2NodeNgEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalE2NodeNgEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalE2NodeNgEnbIdValidationError) ErrorName() string {
	return "GlobalE2NodeNgEnbIdValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalE2NodeNgEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalE2NodeNgEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalE2NodeNgEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalE2NodeNgEnbIdValidationError{}

// Validate checks the field values on GlobalEnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalEnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetENbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalEnbIdValidationError{
				field:  "ENbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalEnbIdValidationError is the validation error returned by
// GlobalEnbId.Validate if the designated constraints aren't met.
type GlobalEnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalEnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalEnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalEnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalEnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalEnbIdValidationError) ErrorName() string { return "GlobalEnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalEnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalEnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalEnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalEnbIdValidationError{}

// Validate checks the field values on GlobalenGnbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalenGnbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGNbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalenGnbIdValidationError{
				field:  "GNbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalenGnbIdValidationError is the validation error returned by
// GlobalenGnbId.Validate if the designated constraints aren't met.
type GlobalenGnbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalenGnbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalenGnbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalenGnbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalenGnbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalenGnbIdValidationError) ErrorName() string { return "GlobalenGnbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalenGnbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalenGnbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalenGnbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalenGnbIdValidationError{}

// Validate checks the field values on GlobalgNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalgNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalgNbIdValidationError{
				field:  "GnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalgNbIdValidationError is the validation error returned by
// GlobalgNbId.Validate if the designated constraints aren't met.
type GlobalgNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalgNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalgNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalgNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalgNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalgNbIdValidationError) ErrorName() string { return "GlobalgNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalgNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalgNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalgNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalgNbIdValidationError{}

// Validate checks the field values on GlobalngeNbId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalngeNbId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlmnId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "PlmnId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnbId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalngeNbIdValidationError{
				field:  "EnbId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalngeNbIdValidationError is the validation error returned by
// GlobalngeNbId.Validate if the designated constraints aren't met.
type GlobalngeNbIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalngeNbIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalngeNbIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalngeNbIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalngeNbIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalngeNbIdValidationError) ErrorName() string { return "GlobalngeNbIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalngeNbIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalngeNbId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalngeNbIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalngeNbIdValidationError{}

// Validate checks the field values on GlobalRicId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalRicId) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPLmnIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalRicIdValidationError{
				field:  "PLmnIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRicId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalRicIdValidationError{
				field:  "RicId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GlobalRicIdValidationError is the validation error returned by
// GlobalRicId.Validate if the designated constraints aren't met.
type GlobalRicIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalRicIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalRicIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalRicIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalRicIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalRicIdValidationError) ErrorName() string { return "GlobalRicIdValidationError" }

// Error satisfies the builtin error interface
func (e GlobalRicIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalRicId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalRicIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalRicIdValidationError{}

// Validate checks the field values on GnbCuUpId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbCuUpId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbCuUpIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbCuUpIdValidationError is the validation error returned by
// GnbCuUpId.Validate if the designated constraints aren't met.
type GnbCuUpIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbCuUpIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbCuUpIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbCuUpIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbCuUpIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbCuUpIdValidationError) ErrorName() string { return "GnbCuUpIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbCuUpIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbCuUpId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbCuUpIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbCuUpIdValidationError{}

// Validate checks the field values on GnbDuId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GnbDuId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 68719476735 {
		return GnbDuIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 68719476735]",
		}
	}

	return nil
}

// GnbDuIdValidationError is the validation error returned by GnbDuId.Validate
// if the designated constraints aren't met.
type GnbDuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbDuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbDuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbDuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbDuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbDuIdValidationError) ErrorName() string { return "GnbDuIdValidationError" }

// Error satisfies the builtin error interface
func (e GnbDuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbDuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbDuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbDuIdValidationError{}

// Validate checks the field values on GnbIdChoice with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GnbIdChoice) Validate() error {
	if m == nil {
		return nil
	}

	switch m.GnbIdChoice.(type) {

	case *GnbIdChoice_GnbId:

		if v, ok := interface{}(m.GetGnbId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GnbIdChoiceValidationError{
					field:  "GnbId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GnbIdChoiceValidationError is the validation error returned by
// GnbIdChoice.Validate if the designated constraints aren't met.
type GnbIdChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbIdChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbIdChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbIdChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbIdChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbIdChoiceValidationError) ErrorName() string { return "GnbIdChoiceValidationError" }

// Error satisfies the builtin error interface
func (e GnbIdChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbIdChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbIdChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbIdChoiceValidationError{}

// Validate checks the field values on RanfunctionId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RanfunctionId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 4095 {
		return RanfunctionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
	}

	return nil
}

// RanfunctionIdValidationError is the validation error returned by
// RanfunctionId.Validate if the designated constraints aren't met.
type RanfunctionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionIdValidationError) ErrorName() string { return "RanfunctionIdValidationError" }

// Error satisfies the builtin error interface
func (e RanfunctionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionIdValidationError{}

// Validate checks the field values on RanfunctionRevision with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RanfunctionRevision) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 4095 {
		return RanfunctionRevisionValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 4095]",
		}
	}

	return nil
}

// RanfunctionRevisionValidationError is the validation error returned by
// RanfunctionRevision.Validate if the designated constraints aren't met.
type RanfunctionRevisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RanfunctionRevisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RanfunctionRevisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RanfunctionRevisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RanfunctionRevisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RanfunctionRevisionValidationError) ErrorName() string {
	return "RanfunctionRevisionValidationError"
}

// Error satisfies the builtin error interface
func (e RanfunctionRevisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRanfunctionRevision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RanfunctionRevisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RanfunctionRevisionValidationError{}

// Validate checks the field values on RicactionId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicactionId) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 255 {
		return RicactionIdValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 255]",
		}
	}

	return nil
}

// RicactionIdValidationError is the validation error returned by
// RicactionId.Validate if the designated constraints aren't met.
type RicactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicactionIdValidationError) ErrorName() string { return "RicactionIdValidationError" }

// Error satisfies the builtin error interface
func (e RicactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicactionIdValidationError{}

// Validate checks the field values on RicindicationSn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RicindicationSn) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetValue(); val < 0 || val > 65535 {
		return RicindicationSnValidationError{
			field:  "Value",
			reason: "value must be inside range [0, 65535]",
		}
	}

	return nil
}

// RicindicationSnValidationError is the validation error returned by
// RicindicationSn.Validate if the designated constraints aren't met.
type RicindicationSnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicindicationSnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicindicationSnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicindicationSnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicindicationSnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicindicationSnValidationError) ErrorName() string { return "RicindicationSnValidationError" }

// Error satisfies the builtin error interface
func (e RicindicationSnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicindicationSn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicindicationSnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicindicationSnValidationError{}

// Validate checks the field values on RicrequestId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RicrequestId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RicRequestorId

	// no validation rules for RicInstanceId

	return nil
}

// RicrequestIdValidationError is the validation error returned by
// RicrequestId.Validate if the designated constraints aren't met.
type RicrequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicrequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicrequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicrequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicrequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicrequestIdValidationError) ErrorName() string { return "RicrequestIdValidationError" }

// Error satisfies the builtin error interface
func (e RicrequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicrequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicrequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicrequestIdValidationError{}

// Validate checks the field values on RicsubsequentAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RicsubsequentAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RicSubsequentActionType

	// no validation rules for RicTimeToWait

	return nil
}

// RicsubsequentActionValidationError is the validation error returned by
// RicsubsequentAction.Validate if the designated constraints aren't met.
type RicsubsequentActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RicsubsequentActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RicsubsequentActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RicsubsequentActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RicsubsequentActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RicsubsequentActionValidationError) ErrorName() string {
	return "RicsubsequentActionValidationError"
}

// Error satisfies the builtin error interface
func (e RicsubsequentActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRicsubsequentAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RicsubsequentActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RicsubsequentActionValidationError{}

// Validate checks the field values on Tnlinformation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Tnlinformation) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTnlAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TnlinformationValidationError{
				field:  "TnlAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTnlPort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TnlinformationValidationError{
				field:  "TnlPort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TnlinformationValidationError is the validation error returned by
// Tnlinformation.Validate if the designated constraints aren't met.
type TnlinformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TnlinformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TnlinformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TnlinformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TnlinformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TnlinformationValidationError) ErrorName() string { return "TnlinformationValidationError" }

// Error satisfies the builtin error interface
func (e TnlinformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTnlinformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TnlinformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TnlinformationValidationError{}
