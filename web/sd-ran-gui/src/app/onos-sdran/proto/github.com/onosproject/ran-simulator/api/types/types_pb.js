// source: github.com/onosproject/ran-simulator/api/types/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ran.trafficsim.types.MapLayout', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Point', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Route', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Tower', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.TowersParams', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Ue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Point.displayName = 'proto.ran.trafficsim.types.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ran.trafficsim.types.Route.repeatedFields_, null);
};
goog.inherits(proto.ran.trafficsim.types.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Route.displayName = 'proto.ran.trafficsim.types.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Ue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.Ue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Ue.displayName = 'proto.ran.trafficsim.types.Ue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.TowersParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.TowersParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.TowersParams.displayName = 'proto.ran.trafficsim.types.TowersParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Tower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ran.trafficsim.types.Tower.repeatedFields_, null);
};
goog.inherits(proto.ran.trafficsim.types.Tower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Tower.displayName = 'proto.ran.trafficsim.types.Tower';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.MapLayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.MapLayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.MapLayout.displayName = 'proto.ran.trafficsim.types.MapLayout';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Point;
  return proto.ran.trafficsim.types.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.Point.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Point.prototype.setLat = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lng = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.Point.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Point.prototype.setLng = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ran.trafficsim.types.Route.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    waypointsList: jspb.Message.toObjectList(msg.getWaypointsList(),
    proto.ran.trafficsim.types.Point.toObject, includeInstance),
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Route}
 */
proto.ran.trafficsim.types.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Route;
  return proto.ran.trafficsim.types.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Route}
 */
proto.ran.trafficsim.types.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.addWaypoints(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWaypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ran.trafficsim.types.Route.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Route.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Point waypoints = 2;
 * @return {!Array<!proto.ran.trafficsim.types.Point>}
 */
proto.ran.trafficsim.types.Route.prototype.getWaypointsList = function() {
  return /** @type{!Array<!proto.ran.trafficsim.types.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ran.trafficsim.types.Point, 2));
};


/** @param {!Array<!proto.ran.trafficsim.types.Point>} value */
proto.ran.trafficsim.types.Route.prototype.setWaypointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ran.trafficsim.types.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Route.prototype.addWaypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ran.trafficsim.types.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ran.trafficsim.types.Route.prototype.clearWaypointsList = function() {
  this.setWaypointsList([]);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.ran.trafficsim.types.Route.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Route.prototype.setColor = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Ue.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Ue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Ue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Ue.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: (f = msg.getPosition()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    rotation: jspb.Message.getFieldWithDefault(msg, 5, 0),
    route: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tower: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tower2: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tower3: jspb.Message.getFieldWithDefault(msg, 9, ""),
    crnti: jspb.Message.getFieldWithDefault(msg, 10, ""),
    towerdist: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    tower2dist: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    tower3dist: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Ue}
 */
proto.ran.trafficsim.types.Ue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Ue;
  return proto.ran.trafficsim.types.Ue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Ue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Ue}
 */
proto.ran.trafficsim.types.Ue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRotation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoute(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTower(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTower2(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTower3(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowerdist(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTower2dist(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTower3dist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Ue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Ue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Ue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Ue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRoute();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTower();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTower2();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTower3();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTowerdist();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getTower2dist();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getTower3dist();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Point position = 4;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Ue.prototype.getPosition = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 4));
};


/** @param {?proto.ran.trafficsim.types.Point|undefined} value */
proto.ran.trafficsim.types.Ue.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.types.Ue.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rotation = 5;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Ue.prototype.setRotation = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string route = 6;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getRoute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setRoute = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string tower = 7;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setTower = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string tower2 = 8;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setTower2 = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string tower3 = 9;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setTower3 = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string crnti = 10;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Ue.prototype.setCrnti = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional float towerDist = 11;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTowerdist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Ue.prototype.setTowerdist = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float tower2Dist = 12;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower2dist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Ue.prototype.setTower2dist = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float tower3Dist = 13;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower3dist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Ue.prototype.setTower3dist = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.TowersParams.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.TowersParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.TowersParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.TowersParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    towerrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    towercols: jspb.Message.getFieldWithDefault(msg, 2, 0),
    towerspacingvert: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    towerspacinghoriz: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxues: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.TowersParams}
 */
proto.ran.trafficsim.types.TowersParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.TowersParams;
  return proto.ran.trafficsim.types.TowersParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.TowersParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.TowersParams}
 */
proto.ran.trafficsim.types.TowersParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTowerrows(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTowercols(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowerspacingvert(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowerspacinghoriz(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.TowersParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.TowersParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.TowersParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.TowersParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTowerrows();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTowercols();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTowerspacingvert();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTowerspacinghoriz();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMaxues();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 towerRows = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerrows = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 towerCols = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowercols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.TowersParams.prototype.setTowercols = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float towerSpacingVert = 3;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerspacingvert = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerspacingvert = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float towerSpacingHoriz = 4;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerspacinghoriz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerspacinghoriz = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint32 maxUEs = 5;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getMaxues = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.TowersParams.prototype.setMaxues = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ran.trafficsim.types.Tower.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Tower.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Tower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Tower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Tower.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ecid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    plmnid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maxues: jspb.Message.getFieldWithDefault(msg, 6, 0),
    neighborsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    txpower: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Tower}
 */
proto.ran.trafficsim.types.Tower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Tower;
  return proto.ran.trafficsim.types.Tower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Tower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Tower}
 */
proto.ran.trafficsim.types.Tower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlmnid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxues(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addNeighbors(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxpower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Tower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Tower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Tower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Tower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEcid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlmnid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaxues();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getNeighborsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getTxpower();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ran.trafficsim.types.Tower.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Tower.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Point location = 2;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Tower.prototype.getLocation = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 2));
};


/** @param {?proto.ran.trafficsim.types.Point|undefined} value */
proto.ran.trafficsim.types.Tower.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.types.Tower.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Tower.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.ran.trafficsim.types.Tower.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Tower.prototype.setColor = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ecID = 4;
 * @return {string}
 */
proto.ran.trafficsim.types.Tower.prototype.getEcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Tower.prototype.setEcid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string plmnID = 5;
 * @return {string}
 */
proto.ran.trafficsim.types.Tower.prototype.getPlmnid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ran.trafficsim.types.Tower.prototype.setPlmnid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 maxUEs = 6;
 * @return {number}
 */
proto.ran.trafficsim.types.Tower.prototype.getMaxues = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Tower.prototype.setMaxues = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string neighbors = 7;
 * @return {!Array<string>}
 */
proto.ran.trafficsim.types.Tower.prototype.getNeighborsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.ran.trafficsim.types.Tower.prototype.setNeighborsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ran.trafficsim.types.Tower.prototype.addNeighbors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ran.trafficsim.types.Tower.prototype.clearNeighborsList = function() {
  this.setNeighborsList([]);
};


/**
 * optional uint32 txPower = 8;
 * @return {number}
 */
proto.ran.trafficsim.types.Tower.prototype.getTxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ran.trafficsim.types.Tower.prototype.setTxpower = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.MapLayout.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.MapLayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.MapLayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.MapLayout.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    zoom: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    fade: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    showroutes: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    showpower: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.MapLayout}
 */
proto.ran.trafficsim.types.MapLayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.MapLayout;
  return proto.ran.trafficsim.types.MapLayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.MapLayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.MapLayout}
 */
proto.ran.trafficsim.types.MapLayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoom(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFade(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowroutes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowpower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.MapLayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.MapLayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.MapLayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.MapLayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFade();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getShowroutes();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getShowpower();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional Point center = 1;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getCenter = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 1));
};


/** @param {?proto.ran.trafficsim.types.Point|undefined} value */
proto.ran.trafficsim.types.MapLayout.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.types.MapLayout.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float zoom = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.ran.trafficsim.types.MapLayout.prototype.setZoom = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool fade = 3;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getFade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.types.MapLayout.prototype.setFade = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool showRoutes = 4;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getShowroutes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.types.MapLayout.prototype.setShowroutes = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool showPower = 5;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getShowpower = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.types.MapLayout.prototype.setShowpower = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.ran.trafficsim.types);
