// source: github.com/onosproject/ran-simulator/api/trafficsim/trafficsim.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_onosproject_ran$simulator_api_types_types_pb = require('../../../../../github.com/onosproject/ran-simulator/api/types/types_pb.js');
goog.object.extend(proto, github_com_onosproject_ran$simulator_api_types_types_pb);
goog.exportSymbol('proto.ran.trafficsim.ListRoutesRequest', null, global);
goog.exportSymbol('proto.ran.trafficsim.ListRoutesResponse', null, global);
goog.exportSymbol('proto.ran.trafficsim.ListTowersRequest', null, global);
goog.exportSymbol('proto.ran.trafficsim.ListTowersResponse', null, global);
goog.exportSymbol('proto.ran.trafficsim.ListUesRequest', null, global);
goog.exportSymbol('proto.ran.trafficsim.ListUesResponse', null, global);
goog.exportSymbol('proto.ran.trafficsim.MapLayoutRequest', null, global);
goog.exportSymbol('proto.ran.trafficsim.Type', null, global);
goog.exportSymbol('proto.ran.trafficsim.UpdateType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.MapLayoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.MapLayoutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.MapLayoutRequest.displayName = 'proto.ran.trafficsim.MapLayoutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListTowersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListTowersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListTowersRequest.displayName = 'proto.ran.trafficsim.ListTowersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListTowersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListTowersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListTowersResponse.displayName = 'proto.ran.trafficsim.ListTowersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListRoutesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListRoutesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListRoutesRequest.displayName = 'proto.ran.trafficsim.ListRoutesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListRoutesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListRoutesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListRoutesResponse.displayName = 'proto.ran.trafficsim.ListRoutesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListUesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListUesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListUesRequest.displayName = 'proto.ran.trafficsim.ListUesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.ListUesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.ListUesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.ListUesResponse.displayName = 'proto.ran.trafficsim.ListUesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.MapLayoutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.MapLayoutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.MapLayoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.MapLayoutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.MapLayoutRequest}
 */
proto.ran.trafficsim.MapLayoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.MapLayoutRequest;
  return proto.ran.trafficsim.MapLayoutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.MapLayoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.MapLayoutRequest}
 */
proto.ran.trafficsim.MapLayoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.MapLayoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.MapLayoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.MapLayoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.MapLayoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListTowersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListTowersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListTowersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListTowersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    withoutreplay: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListTowersRequest}
 */
proto.ran.trafficsim.ListTowersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListTowersRequest;
  return proto.ran.trafficsim.ListTowersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListTowersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListTowersRequest}
 */
proto.ran.trafficsim.ListTowersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListTowersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListTowersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListTowersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListTowersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWithoutreplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool subscribe = 1;
 * @return {boolean}
 */
proto.ran.trafficsim.ListTowersRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListTowersRequest.prototype.setSubscribe = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool withoutReplay = 2;
 * @return {boolean}
 */
proto.ran.trafficsim.ListTowersRequest.prototype.getWithoutreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListTowersRequest.prototype.setWithoutreplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListTowersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListTowersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListTowersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListTowersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tower: (f = msg.getTower()) && github_com_onosproject_ran$simulator_api_types_types_pb.Tower.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListTowersResponse}
 */
proto.ran.trafficsim.ListTowersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListTowersResponse;
  return proto.ran.trafficsim.ListTowersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListTowersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListTowersResponse}
 */
proto.ran.trafficsim.ListTowersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_onosproject_ran$simulator_api_types_types_pb.Tower;
      reader.readMessage(value,github_com_onosproject_ran$simulator_api_types_types_pb.Tower.deserializeBinaryFromReader);
      msg.setTower(value);
      break;
    case 2:
      var value = /** @type {!proto.ran.trafficsim.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListTowersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListTowersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListTowersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListTowersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTower();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_onosproject_ran$simulator_api_types_types_pb.Tower.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional types.Tower tower = 1;
 * @return {?proto.ran.trafficsim.types.Tower}
 */
proto.ran.trafficsim.ListTowersResponse.prototype.getTower = function() {
  return /** @type{?proto.ran.trafficsim.types.Tower} */ (
    jspb.Message.getWrapperField(this, github_com_onosproject_ran$simulator_api_types_types_pb.Tower, 1));
};


/** @param {?proto.ran.trafficsim.types.Tower|undefined} value */
proto.ran.trafficsim.ListTowersResponse.prototype.setTower = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.ListTowersResponse.prototype.clearTower = function() {
  this.setTower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.ListTowersResponse.prototype.hasTower = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.ran.trafficsim.Type}
 */
proto.ran.trafficsim.ListTowersResponse.prototype.getType = function() {
  return /** @type {!proto.ran.trafficsim.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ran.trafficsim.Type} value */
proto.ran.trafficsim.ListTowersResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListRoutesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListRoutesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListRoutesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListRoutesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    withoutreplay: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListRoutesRequest}
 */
proto.ran.trafficsim.ListRoutesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListRoutesRequest;
  return proto.ran.trafficsim.ListRoutesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListRoutesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListRoutesRequest}
 */
proto.ran.trafficsim.ListRoutesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListRoutesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListRoutesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListRoutesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListRoutesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWithoutreplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool subscribe = 1;
 * @return {boolean}
 */
proto.ran.trafficsim.ListRoutesRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListRoutesRequest.prototype.setSubscribe = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool withoutReplay = 2;
 * @return {boolean}
 */
proto.ran.trafficsim.ListRoutesRequest.prototype.getWithoutreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListRoutesRequest.prototype.setWithoutreplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListRoutesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListRoutesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListRoutesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && github_com_onosproject_ran$simulator_api_types_types_pb.Route.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListRoutesResponse}
 */
proto.ran.trafficsim.ListRoutesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListRoutesResponse;
  return proto.ran.trafficsim.ListRoutesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListRoutesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListRoutesResponse}
 */
proto.ran.trafficsim.ListRoutesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_onosproject_ran$simulator_api_types_types_pb.Route;
      reader.readMessage(value,github_com_onosproject_ran$simulator_api_types_types_pb.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    case 2:
      var value = /** @type {!proto.ran.trafficsim.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListRoutesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListRoutesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListRoutesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_onosproject_ran$simulator_api_types_types_pb.Route.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional types.Route route = 1;
 * @return {?proto.ran.trafficsim.types.Route}
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.getRoute = function() {
  return /** @type{?proto.ran.trafficsim.types.Route} */ (
    jspb.Message.getWrapperField(this, github_com_onosproject_ran$simulator_api_types_types_pb.Route, 1));
};


/** @param {?proto.ran.trafficsim.types.Route|undefined} value */
proto.ran.trafficsim.ListRoutesResponse.prototype.setRoute = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.clearRoute = function() {
  this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.ran.trafficsim.Type}
 */
proto.ran.trafficsim.ListRoutesResponse.prototype.getType = function() {
  return /** @type {!proto.ran.trafficsim.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ran.trafficsim.Type} value */
proto.ran.trafficsim.ListRoutesResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListUesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListUesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListUesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListUesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    withoutreplay: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListUesRequest}
 */
proto.ran.trafficsim.ListUesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListUesRequest;
  return proto.ran.trafficsim.ListUesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListUesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListUesRequest}
 */
proto.ran.trafficsim.ListUesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithoutreplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListUesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListUesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListUesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListUesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWithoutreplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool subscribe = 1;
 * @return {boolean}
 */
proto.ran.trafficsim.ListUesRequest.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListUesRequest.prototype.setSubscribe = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool withoutReplay = 2;
 * @return {boolean}
 */
proto.ran.trafficsim.ListUesRequest.prototype.getWithoutreplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ran.trafficsim.ListUesRequest.prototype.setWithoutreplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.ListUesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.ListUesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.ListUesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListUesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ue: (f = msg.getUe()) && github_com_onosproject_ran$simulator_api_types_types_pb.Ue.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updateType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.ListUesResponse}
 */
proto.ran.trafficsim.ListUesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.ListUesResponse;
  return proto.ran.trafficsim.ListUesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.ListUesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.ListUesResponse}
 */
proto.ran.trafficsim.ListUesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_onosproject_ran$simulator_api_types_types_pb.Ue;
      reader.readMessage(value,github_com_onosproject_ran$simulator_api_types_types_pb.Ue.deserializeBinaryFromReader);
      msg.setUe(value);
      break;
    case 2:
      var value = /** @type {!proto.ran.trafficsim.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.ran.trafficsim.UpdateType} */ (reader.readEnum());
      msg.setUpdateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.ListUesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.ListUesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.ListUesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.ListUesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_onosproject_ran$simulator_api_types_types_pb.Ue.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUpdateType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional types.Ue ue = 1;
 * @return {?proto.ran.trafficsim.types.Ue}
 */
proto.ran.trafficsim.ListUesResponse.prototype.getUe = function() {
  return /** @type{?proto.ran.trafficsim.types.Ue} */ (
    jspb.Message.getWrapperField(this, github_com_onosproject_ran$simulator_api_types_types_pb.Ue, 1));
};


/** @param {?proto.ran.trafficsim.types.Ue|undefined} value */
proto.ran.trafficsim.ListUesResponse.prototype.setUe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ran.trafficsim.ListUesResponse.prototype.clearUe = function() {
  this.setUe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.ListUesResponse.prototype.hasUe = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {!proto.ran.trafficsim.Type}
 */
proto.ran.trafficsim.ListUesResponse.prototype.getType = function() {
  return /** @type {!proto.ran.trafficsim.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ran.trafficsim.Type} value */
proto.ran.trafficsim.ListUesResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional UpdateType update_type = 3;
 * @return {!proto.ran.trafficsim.UpdateType}
 */
proto.ran.trafficsim.ListUesResponse.prototype.getUpdateType = function() {
  return /** @type {!proto.ran.trafficsim.UpdateType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ran.trafficsim.UpdateType} value */
proto.ran.trafficsim.ListUesResponse.prototype.setUpdateType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.ran.trafficsim.Type = {
  NONE: 0,
  ADDED: 1,
  UPDATED: 2,
  REMOVED: 3
};

/**
 * @enum {number}
 */
proto.ran.trafficsim.UpdateType = {
  NOUPDATETYPE: 0,
  POSITION: 1,
  TOWER: 2,
  HANDOVER: 3
};

goog.object.extend(exports, proto.ran.trafficsim);
